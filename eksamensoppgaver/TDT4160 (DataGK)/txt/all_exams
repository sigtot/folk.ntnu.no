Løsningsforslag eksamen TDT4160 høsten 2005
NB! Ved en feil er summen av prosentvektene for alle oppgavene 90 % og ikke 100 %.
For å korrigere dette, ble alle resultater delt på 0,9.

Oppgave 1
Alternativ→
Oppgave↓

1

2

3

a)
X

c)

X

d)

f)

X
X
X

g)

X

h)
i)

X
X

j)
k)

5

X

b)

e)

4

X
X

l)

X

m)

X

n)
o)

X
X

Oppgave 2
a) Underflyt vil si at en flyttallsoperasjon gir et resultat som er for nærme null til å
kunne bli representert. I praksis vil dette si en eksponent som er mindre (negativt
tall) enn hva som kan bli representert.
b) I1:
I2:
I3:
I4:
•
•
•

R3 = R3 * R5
R4 = R3 + 1
R3 = R5 + 1
R7 = R3 * R4
Sann dataavhengighet. En senere instruksjon leser det en tidligere har
skrevet. I eksempelet leser I2 R3 som blir skrevet av I1. I1 må dermed få
skrive før I2 leser.
Utavhengighet. To instruksjoner skriver til samme lokasjon (for eksempel
register). I eksempelet skriver både I1 og I3 til R3. I1 må dermed få skrive
før I3 skriver.
Antiavhengighet. En senere instruksjoner skriver til samme lokasjon (for
eksempel register) som en tidligere leser fra. I eksempelet skriver I3 til R3
som I2 leser fra. I2 må dermed få lese før I3 skriver.

c) Følgende steg skjer under behandling av et avbrudd:
• Enhet aktiverer avbruddslinje
• CPU godkjenner avbrudd
• Enhet oppgir avbruddsvektor
• CPU lagrer programinformasjon (programteller, statusord)
• CPU bruker avbruddsvektor til å finne avbruddsrutine
• Avbruddsrutine lagrer registerverdier
• Avbruddsrutine finner ekstra info om avbrudd (hvilken enhet, hvilken
situasjon har oppstått)
• Avbrudd håndteres
• Avbruddsrutine setter tilbake registerverdier
• Programteller og statusord blir satt tilbake
d) Hvis LOAD og STORE aksesserer forskjellige registre og hovedlagerceller er de
ikke avhengig av hverandre og de kan fritt bytte rekkefølge. Hvis LOAD og
STORE bruker samme register, har vi en vanlig avhengighet som håndteres som
normalt. Hvis LOAD og STORE bruker samme (eller overlappende)
hovedlagercelle har vi også en avhengighet. Denne kan være vanskelig å oppdage
i kjøretid ettersom adressen kan være ukjent ved kompilering. Eksempel:
• Store [R4], R2
• Load R6, [R8]
Hvis R4 = R8 betyr dette i praksis at R6 blir satt lik R2. Hvis instruksjonene
derimot bytter rekkefølge vil ikke dette være resultatet lengre. IA-64 inneholder
”advanced load”-instruksjoner som løser akkurat dette problemet.

Oppgave 3
a) Lokalitetsprinsippet er årsaken til at hurtigbuffre fungerer så bra som de gjør.
Dette prinsippet sier at (hoved-)lager ikke blir aksessert i et tilfeldig mønster.
Dermed kan man forutse fremtidige lageraksesser og passe på å ha data i
hurtigbuffer før de trengs. Lokalitetsprinsippet kan deles i to: Lokalitet i tid og
lokalitet i rom.
Lokalitet i tid sier at hvis en lagerlokasjon blir aksessert, er det sannsynlig at
samme lokasjon vil bli aksessert i nær fremtid. Hvis noe hentes fra hovedlager,
bør det derfor lagres i hurtigbuffer.
Lokalitet i rom sier at hvis en lagerlokasjon blir aksessert, er det sannsynlig at en
lokasjon i nærheten vil bli aksessert i nær fremtid. Hvis noe hentes fra hovedlager,
bør data fra etterfølgende adresser derfor også hentes og lagres i hurtigbuffer.
b) ”Write through”: Data som blir skrevet til en hurtigbuffer, blir også skrevet til
lavere nivå (1. nivå => 2. nivå; 2. nivå => hovedlager). Dette er en enkel løsning
som også sikrer at vi ikke har inkonsistens (ulik verdi for samme adresse på
forskjellig nivå i minnehierarkiet). Ulempen er at det medfører flere
skriveoperasjoner enn strengt tatt nødvendig. En fordel er at innlegging av nye
hurtigbufferlinjer tar kortere tid ettersom man slipper å skrive tilbake en gammel.
Dessuten er dette en enklere løsning enn ”Write back”.
”Write back”: Data som blir skrevet til en hurtigbuffer blir ikke skrevet til lavere
nivå før det er absolutt nødvendig. Dette er en mer komplisert løsning som tillater
inkonsistens i minnehierarkiet. Fordelen er at det blir så få skriveoperasjoner som
mulig.
Ulempen med ”write though” betyr ikke så mye når det er snakk om skriving fra
1. til 2. nivås hurtigbuffer. Disse ligger uansett inne på prosessorbrikken begge to.
Derimot tar skriveoperasjoner mellom 2. nivås hurtigbuffer og hovedlager ”lang”
tid og det er fornuftig å ta ekstra kompleksitet i form av ”write back” for å
minimere antallet.

c) Med direkte avbildning blir hovedlageradresser brukt som følger: Siden vi har 4
linjer, 2 ord per linje og hvert ord er på 32 bit, vil vi få følgende oppdeling av
adressen:
• Tag 15 (= 20 - 2 - 1 - 2) bit
• Linje 2 bit
• Ord 1 bit
• Byte 2 bit
Dette betyr at innholdet i minneadresser hvor linje-bit’ene er like, vil havne på
samme hurtigbufferlinje. Instruksjoner (starter på adresse 0 og er lagret
fortløpende, hver instr. er 32 bit):
• Instruksjon 1 & 2, startadr 0000 0000 Î linje 0
• Instruksjon 3 & 4, startadr 0000 1000 Î linje 1
• Instruksjon 5 & 6, startadr 0001 0000 Î linje 2
• Instruksjon 7 & 8, startadr 0001 1000 Î linje 3
Når det gjelder data, var det oppgitt at de lå lagret fra adresse 0010 1000. De 5
siste bit’ene gir linje, ord og byte-plassering i hurtigbufferet. Dette gir:
• X, adr 0010 1000 Î linje 1, ord 0, byte 0
Lister opp innholdet i hurtigbuffer etter at hver instruksjon har blitt utført. Kaller
de 8 bit’ene som blir lest for ”X”.
1. MOV R0, #0
Linje
Byte 0
0
1
2
3
2. MOV R5, #40
Linje
Byte 0
0
1
2
3

Byte 1 Byte 2
Instruksjon 1

Byte 3

Byte 0

Byte 1 Byte 2
Instruksjon 2

Byte 3

Byte 1 Byte 2
Instruksjon 1

Byte 3

Byte 0

Byte 1 Byte 2
Instruksjon 2

Byte 3

3. LD R1, [R5]
Linje
Byte 0 Byte 1 Byte 2 Byte 3 Byte 0 Byte 1 Byte 2 Byte 3
0
Instruksjon 1
Instruksjon 2
1
X
(…)
(…)
(…)
(…)
(…)
(…)
(…)
2
3
(…) = Data etterfølgende X i hovedlager. Instruksjon 3 og 4 vil først bli hentet inn til
linje 1, men vil rett etterpå bli overskrevet når LOAD-instruksjonen aksesserer
hovedlageret.

4. ADD R1, R1, R9
Linje
Byte 0 Byte 1 Byte 2
0
Instruksjon 1
1
Instruksjon 3
2
3

Byte 3

Byte 0

Byte 1 Byte 2
Instruksjon 2
Instruksjon 4

Byte 3

5. ST [R5], R1
Linje
Byte 0 Byte 1 Byte 2 Byte 3 Byte 0 Byte 1 Byte 2 Byte 3
0
Instruksjon 1
Instruksjon 2
1
Y
(…)
(…)
(…)
(…)
(…)
(…)
(…)
2
Instruksjon 5
Instruksjon 6
3
Her får vi skriving til en adresse der data ikke finnes i hurtigbuffer. Pga. ”write
allocation” hentes data (hurtigbufferlinje) inn først. Kaller innholdet i R1 for Y.
6. ADD R5, R5, #4
Linje
Byte 0 Byte 1 Byte 2
0
Instruksjon 1
1
Y
(…)
(…)
2
Instruksjon 5
3
7. SUB R0, R0, #1
Linje
Byte 0 Byte 1 Byte 2
0
Instruksjon 1
1
Y
(…)
(…)
2
Instruksjon 5
3
Instruksjon 7
8. ADD R9, R9, #1
Linje
Byte 0 Byte 1 Byte 2
0
Instruksjon 1
1
Y
(…)
(…)
2
Instruksjon 5
3
Instruksjon 7

Byte 3

Byte 0

(…)

(…)

Byte 3

Byte 0

(…)

(…)

Byte 3

Byte 0

(…)

(…)

Byte 1 Byte 2
Instruksjon 2
(…)
(…)
Instruksjon 6

Byte 1 Byte 2
Instruksjon 2
(…)
(…)
Instruksjon 6
Instruksjon 8
Byte 1 Byte 2
Instruksjon 2
(…)
(…)
Instruksjon 6
Instruksjon 8

Byte 3
(…)

Byte 3
(…)

Byte 3
(…)

Oppgave 4
a) Mikroarkitektur kan deles opp i styreenhet (kontrollenhet el. ”control unit”) og
utførende enhet (”datapath”). Den utførende enhet inneholder registrene og ALU
og er den som faktisk utfører operasjoner. Styreenheten inneholder logikk for å få
den utførende til å gjøre de rette operasjonene – for eksempel utføre et
mikroprogram som implementerer en ISA-instruksjon. I tillegg bestemmer
styreenheten neste tilstand, henter inn og tolker ISA-instruksjoner.

b) ISA-instruksjoner er de instruksjonene som er tilgjengelig for (assembly-)
programmerere. De definerer dermed grensesnittet mellom maskinvare og
programvare.
Styreenheten i mikroarkitekturen leser inn ISA-instruksjoner fra et program og
sørger for at disse blir utført av den utførende enheten. Styresignalene som blir
generert fra styreenheten kan enten være generert av en sekvensiell krets
(hardwired) eller via et mikroprogram. Et mikroprogram er en sekvens av
mikroinstruksjoner som til sammen implementerer en ISA-instruksjon. En
mikroinstruksjon er dermed en del av et mikroprogram og bestemmer hva den
utførende enheten skal gjøre i en hel klokkesyklus. Mikroinstruksjonen vil også
inneholde informasjon om hvilken mikroinstruksjon som skal utføres etterpå
(styring av styreenheten).
c) De tre figurene er gitt på neste side.
(Pga. av at det i oppgaven står at MIR lastes i slutten av en klokkesyklus mens det
i læreboka er slik at MIR lastes i starten av en klokkesyklus, ble det også godtatt
at MIR inneholder mikroinstruksjonene til hhv. Bipush3, Bipush3 og Swap6).

Legg merke til at skriveoperasjonen (“wr”) mot hovedlager enda ikke har tatt effekt.

Side 1 av 8

Norges teknisk-naturvitenskapelige universitet
Institutt for datateknikk og informasjonsvitenskap

EKSAMENSOPPGAVE I FAG TDT4160 – DATAMASKINER GRUNNKURS

Faglig kontakt under eksamen:

Jon Olav Hauglid

Tlf.: 93440

Eksamensdato:

15. desember 2005

Eksamenstid:

09.00-13.00

Tillatte hjelpemiddel:

D: Ingen trykte eller håndskrevne hjelpemiddel tillatt. Bestemt, enkel
kalkulator tillatt.

Språkform: Bokmål

Side 2 av 8

Oppgave 1 – Flervalgsspørsmål (”multiple choice”) – 30 %
Denne oppgaven skal besvares på eget svarark sist i oppgavesettet. Dersom du finner flere alternativer
som synes å passe, setter du kryss for det ene som passer best. For å unngå at gode tippere blir
belønnet, vil et galt svar gi færre poeng enn om oppgaven forblir ubesvart.
a) Hvilken av de følgende påstandene om Pentium 4 er ikke riktig?
1. Pentium 4 er en 32 bits prosessor.
2. Pentium 4 har et langt samlebånd (mange steg).
3. Pentium 4 er designet med fokus på ytelse vha. høy klokkefrekvens.
4. Pentium 4 har instruksjoner med fast lengde og fast format.
5. Pentium 4 oversetter instruksjoner til RISC-lignende mikrooperasjoner før utføring.
b) Hvilken av de følgende påstandene om UltraSPARC III er ikke riktig?
1. UltraSPARC III er en RISC-prosessor.
2. UltraSPARC III har relativt få registre, fokusert på hovedlager.
3. UltraSPARC III er en 64 bits prosessor.
4. UltraSPARC III er en superskalar prosessor.
5. UltraSPARC III har nivå-2 hurtigbuffer utenfor prosessorbrikken.
c) Hvilken av de følgende påstandene om 8051 er ikke riktig?
1. 8051 er en mikrokontroller.
2. 8051 har ingen hurtigbuffer.
3. 8051 har et fem-stegs samlebånd.
4. 8051 er designet med fokus på pris, strømforbruk og størrelse.
5. 8051 har separat minne for instruksjoner og data.
d) Hvilken av alternativene under er ikke en årsak til å ha mer enn en buss i en datamaskin?
1. Med kun en buss, blir denne gjerne en flaskehals.
2. Flere busser gir økt risiko for overflyt.
3. Eksterne enheter har gjerne svært forskjellig datarate.
4. Jo lengre en buss er, jo lengre tid tar det å overføre data.
5. Noen eksterne enheter har seriell dataoverføring, mens andre har parallell.
e) Hvilken av alternativene under er en ulempe med direkte adressering?
1. Gir gjerne et langt instruksjonsformat.
2. Feltlengden begrenser operandstørrelsen.
3. Det tar ekstra tid å slå opp i et register før man aksesserer hovedlager.
4. Målinstruksjonen ved betingede hoppinstruksjoner (”conditional branches”) kan være
vanskelig å finne.
5. Alle alternativer 1-4 er ulemper med direkte adressering.
f) Hvilken av de følgende påstandene om samlebånd (”pipeline”) er riktig?
1. Samlebånd reduserer tiden det tar å utføre en enkelt instruksjon.
2. Samlebånd reduserer tiden det tar å utføre en serie med instruksjoner.
3. Samlebånd samler først sammen en mengde instruksjoner som så blir utført samtidig.
4. Samlebånd øker treffraten på hurtigbuffer.
5. Alle alternativer 1-4 er riktige påstander om samlebånd.

Side 3 av 8

g) Hvilken av de følgende påstandene om RISC er riktig?
1. RISC-prosessorer har instruksjoner som er kompliserte å dekode.
2. De fleste instruksjoner i RISC-prosessorer kan aksessere hovedlager.
3. En RISC-prosessor utfører instruksjoner vha. mikroprogram.
4. RISC-prosessorer har små og enkle instruksjonssett.
5. RISC-prosessorer har mange adresseringsmodi.
h) Hvilken av de følgende påstandene om multidatamaskin og multiprosessor er riktig?
1. Prosessorer i multidatamaskiner deler hovedlager.
2. Med mange prosessorer er multiprosessor bedre enn multidatamaskin.
3. Både multiprosessor og multidatamaskin er eksempler på MIMD (Multiple Instruction
Multiple Data).
4. En multidatamaskin er det samme som en superskalar prosessor.
5. Ingen av alternativene 1-4 er riktige.
i) Hvilken av de følgende påstandene om PCI og PCI Express er riktig?
1. PCI er ikke egentlig en buss, men punkt-til-punkt-forbindelse.
2. PCI er parallell mens PCI Express er seriell.
3. Med PCI kan man overføre adresse og data samtidig.
4. Både PCI og PCI Express er asynkrone busser.
5. PCI Express er en egen overføringsmodus som PCI-bussen bruker når bussmaster har
spesielt dårlig tid.
j) Registeromdøping (”register renaming”) er en teknikk som …
1. … gjør det vanskeligere å skrive assemblykode.
2. … er unødvendig for CISC-prosessorer.
3. … reduserer antall sanne dataavhengigheter.
4. … reduserer antall avhengigheter i superskalare samlebånd.
5. … ikke kan brukes av prosessorer som støtter registeradressering.
k) Prefetch er en teknikk som …
1. … går ut på at betingede hopp (”conditional branch”) utføres vha. to instruksjoner (eks:
Compare/Branch).
2. … IA-64 bruker for å bestemme hvilken utførende enhet en instruksjon skal utføres av
før instruksjonen blir hentet fra hovedlager.
3. … går ut på å hente data og/eller instruksjoner fra hovedlager før de trengs.
4. … går ut på at flyttall normaliseres før addisjon og subtraksjon utføres.
5. … brukes for å redusere tiden fra et register blir lest til ALU kan utføre operasjon på
registerverdien.
l) Hva vil det si at en prosessor er superskalar?
1. Den er spesiallaget for heltallsoperasjoner.
2. Den bruker 1 klokkesyklus på å utføre en instruksjon.
3. Den har et stort og komplisert instruksjonssett.
4. Den har både nivå-1 og nivå-2 av hurtigbuffer på prosessorbrikken.
5. Den har flere utføringsenheter (”functional units”).

Side 4 av 8

m) Hva vil det si at en prosessor har støtte for 3-adresseinstruksjoner (”3-address instruction”)?
1. Den pakker 3 instruksjoner sammen i en pakke med et felt som indikerer begrensninger
i parallellitet.
2. Den har spesielle hoppinstruksjoner som kan medføre hopp til 3 forskjellige adresser alt
etter resultat av forrige instruksjon.
3. Noe slikt eksisterer ikke; det maksimale er 2-adresseinstruksjoner.
4. Hver instruksjon har 3 implisitte operander.
5. 3 eksplisitte operander kan oppgis i instruksjonsformatet.
n) Hvor mange forskjellige tall kan man maksimalt representere vha. 32 bit?
1. 2^31
(= 2 147 483 648)
2. 2^31 - 1
(= 2 147 483 647)
3. 2^32
(= 4 294 967 296)
4. 2^32 - 1
(= 4 294 967 295)
5. Dette avhenger av om tallet er et heltall eller et flyttall.
o) Hva brukes predikatregistrene i IA-64 til?
1. De brukes i forbindelse med forgreningspredikering.
2. De brukes i forbindelse med registeromdøping.
3. De brukes i forbindelse med registervindu.
4. De brukes i forbindelse med betinget utføring (”conditional execution”).
5. De brukes i forbindelse med samlebånd i programkode (”software pipelining”).

Oppgave 2 – Instruksjonssettarkitektur – 20 %
a) Flyttallsoperasjoner kan gi underflyt. Hva vil dette si?
b) Forklar vha. et kodeeksempel både sanne dataavhengigheter, ut- og anti-avhengigheter.
c) Beskriv hva som skjer når et avbrudd (”interrupt”) oppstår.
d) Hvorfor kan man ikke uten videre bytte utføringsrekkefølgen på LOAD og STORE
instruksjoner?

Side 5 av 8

Oppgave 3 – Hurtigbuffer (”cache”) – 20 % (5 % på a og b, 10 % på c)
a) En hurtigbuffer har gjerne bare plass til 1/1000 av innholdet i hovedlageret. Forklar hvorfor det
likevel er mulig med en treffrate på 95 %.
b) Pentium 4 bruker ”write through” mellom 1. og 2. nivås hurtigbuffer og ”write back” mellom
2. nivås hurtigbuffer og hovedlager. Diskuter fordeler og ulemper med denne løsningen.
c) I denne oppgaven skal du se på hvordan innholdet i en hurtigbuffer endrer seg under utføring
av et kodesegment. Dette kodesegmentet er oppgitt under.
1.
2.
3.
4.
5.
6.
7.
8.

MOV
MOV
LD
ADD
ST
ADD
SUB
ADD

R0, #0
R5, #40
R1, [R5]
R1, R1, R9
[R5], R1
R5, R5, #4
R0, R0, #1
R9, R9, #1

Move
Move
Load
Add
Store
Add
Subtract
Add

Legger 0 inn i R0
Legger 40 (101 000 i binær) inn i R5
Laster fra hovedlager til R1 (R5 har adressen)
Adderer R9 til R1 (R1 = R1 + R9).
Lagrer fra R1 til hovedlager (R5 har adressen)
Adderer 4 til R5
Subtraherer 1 fra R0
Adderer 1 til R9

Gitt følgende opplysninger:
• Instruksjonsformatet er på 32 bit for alle instruksjoner.
• Load-instruksjonen henter 8 bit med data.
• Store-instruksjonen skriver 8 bit med data.
• Instruksjon 1 ligger i hovedlageret på adresse 0 med resten av instruksjonene lagret
fortløpende.
• Hovedlager på 1 MB – adresselengden er dermed 20 bit (mao. byteadresserbart).
• Hurtigbufferet:
o Direkte avbildning
o 4 hurtigbufferlinjer
o 2 ord per linje, hvert ord er 32 bit
o Felles for både instruksjoner og data
o ”Write allocation” – hvis prosessoren skriver til hovedlager og data ikke finnes i
hurtigbuffer, hentes data inn til hurtigbuffer først.
Anta at vi starter med tom hurtigbuffer. Vis hva som ligger i de fire hurtigbufferlinjene etter at
hver enkelt av instruksjonene 1-8 er utført. Ta hensyn til både henting av instruksjoner og data
og husk på å forklare hvordan du har tenkt!

Oppgave 4 – Mikroarkitektur – 20 % (5 % på a og b, 10 % på c)
a) Hvilke to hoveddeler deles mikroarkitekturen inn i og hvilken oppgave har hver av disse?
b) Forklar hva mikroinstruksjoner og ISA-instruksjoner er og hva som er forskjellen mellom dem.

Side 6 av 8

c) I denne oppgaven skal du simulere utføring av tre IJVM-instruksjoner i Mic-1
mikroarkitekturen. De tre instruksjonene er:
1
2
3

Symbolsk form
BIPUSH 4
BIPUSH 3
SWAP

Forklaring
Legg 4 øverst på stakken
Legg 3 øverst på stakken
Bytt de to øverste tallene på stakken

Hexadesimal form
0x10 0x04
0x10 0x03
0x5F

Mic-1 utfører IJVM-instruksjoner ved hjelp av mikroprogram. Mikroprogram for BIPUSH og
SWAP, samt hovedløkka (Main1) er gitt under.
Main1

PC = PC + 1; fetch; goto (MBR)

Bipush1
Bipush2
Bipush3

SP = MAR = SP + 1
PC = PC + 1; fetch
MDR = TOS = MBR; wr; goto Main1

Swap1
Swap2
Swap3
Swap4
Swap5
Swap6

MAR = SP – 1; rd
MAR = SP
H = MDR; wr
MDR = TOS
MAR = SP – 1; wr
TOS = H; goto Main1

Starttilstanden er gitt under. Tomme ruter betyr at den nåværende verdien i registeret/
hovedlageradressen er irrelevant for oppgaven. MIR ble lastet i slutten av forrige klokkesyklus
og Main1 skal akkurat starte utføring.

Oppgaven går ut på å finne tilstanden etter at hver IJVM-instruksjon er ferdig (dvs. etter
Bipush3, Bipush3 og Swap6). Bruk eget svarark til slutt i oppgavesettet.

Side 7 av 8

Studentnr:_____________

Studieprogram: ______________

Arknr: _____ Antall ark: ______

Svarark for oppgave 1 – Flervalgsspørsmål (”multiple choice”)
Dette arket skal brukes til å svare på oppgave 1. Arket skal rives av oppgavesettet og leveres inn
sammen med resten av besvarelsen.
Dersom du finner flere alternativer som synes å passe, setter du kryss for det ene som passer best.
For å unngå at gode tippere blir belønnet, vil et galt svar gi færre poeng enn om oppgaven forblir
ubesvart.
Alternativ→
Oppgave↓
a)
b)
c)
d)
e)
f)
g)
h)
i)
j)
k)
l)
m)
n)
o)

1

2

3

4

5

Side 8 av 8

Studentnr:_____________

Studieprogram: ______________

Arknr: _____ Antall ark: ______

Svarark for oppgave 4c – Mikroarkitektur
Arket skal rives av oppgavesettet og leveres inn sammen med resten av besvarelsen.
Etter Bipush3 (BIPUSH 4):

Etter Bipush3 (BIPUSH 3):

Etter Swap6 (SWAP):

Oppgave 1
1)
2)
3)
4)
5)
6)
7)
8)
9)
10)
11)
12)
13)
14)
15)

b
c
c
a
d
d
b
c
a
c
a
a
b
c
b

Kap 7.5, s 430
Kap 11.3, s 587

Kap 2.5, s 50
Kap 2.1, s 28
Kap 2.4-2.8
Kap 1.3, s 7
Kap 5.2, s 297
Kap 12.9, s 656

Oppgave 2
a) Se figur 4.19 side 236 i læreboka
b) Utfører dataoverføringen – genererer minneadresser og buss-signaler for hver ordoverføring og holder dessuten orden på når utføringen er over.
c) Programmet som skal ha overføringen utført, blir blokkert.
Prosessor legger inn startadresse og antall ord i DMA-registre.
Prosessor gir beskjed til DMA-kontrolleren om å starte overføring.
Prosessor begynner å utføre andre program / DMA-kontroller utfører overføring.
DMA bruker avbrudd for å signalisere at utføringen er over.
Prosessor fortsetter utføring av blokkert program.

Oppgave 3
Dekkes sort sett av 10.3 i læreboka.
a) Startbit – bit som indikerer at overføring starter. Typisk 0, mens 1 overføres når
linja ikke er i bruk.
Databit – selve dataene som skal overføres, bit for bit.
Paritetsbit – feiloppdagende kode, for eksempel 1 hvis dataene inneholder et odde
antall 1’ere.
Stoppbit – Ekstra bit (1’ere) som skiller to overførte bytes fra hverandre.
b) Fordeler med seriell: Høyere klokkerate, tåler lengre avstander, billigere kabler og
kontakter, mindre risiko for crosstalk.

Oppgave 4
1) DA – 011
AA – 110
BA – 101
MB – 0
FS – 00011
MD – 0
RW – 1

; R3 som målregister
; R6 som det første argumentregisteret
; R5 som det andre argumentregisteret
; Register, ingen konstant
; Skal ha F = A + B + 1
; Skal skrive resultat av ALU-op, ikke minneop.
; Skal oppdatere register

2) 111 – DA
; R7 som målregister
010 – AA
; R2 som argumentregister
xxx – BA
; Bruker kun ett argument
x – MB
; Bruker kun ett argument
00001 – FS ; Operasjonen F = A + 1
0 – MD
; Skal skrive resultat av ALU-op, ikke minneop.
0 – RW
; Skriver ikke til register
Konklusjon: R7 = R2 + 1, bortsett fra at R7 ikke blir skrevet til. Vil mao bare
oppdatere statusregistre.
3) MOV R1, #45 - bruker ”immediate” adressering for å legge tallet 45 inn i R1.
4) PUSH R4
MOV R5, #antall
MOV R7, [R5]
POP R5
MOV R6, 1(R5)
MOV R7, 10

; Legger 8 øverst på stakken
; Legger 4 (antall) i register R5
; Legger 28 i R7 – 28 ligger i minneadr. gitt av R5 (4)
; 8 fjernes fra øverst på stakken og legges i R5
; Legger 7 i R6 – 7 ligger i minneadr. 9, 1 + 8 (fra R5)
; Legger 45 i R7 – 45 ligger i minneadr. 10.

Oppgave 5
for (i = 0; i ≤ n; i++)
a[i] = b[i] + i;
Der $3 inneholder adressen til a[0], $4 inneholder n og $5 inneholder adressen til b[0].
Bruker $1 til i og $2 til midlertidig lagring
bxor $1, $1, $1
loop: jgt
$1, $4, slutt
load $2, $5, $1
add
$2, $2, $1
store $2, $3, $1
inc
$1
jmp loop
slutt:
end loop.

; Legger 0 i $1
; Avslutter når i > n
; Leser inn b[i]
; b[i] + i
; Skriver til a[i]
; Øker i med 1

Side 1 av 9

NORGES TEKNISK-NATURVITENSKAPELIGE UNIVERSITET
INSTITUTT FOR DATATEKNIKK OG INFORMASJONSVITENSKAP

Faglig kontakt under eksamen:
Jon Olav Hauglid, Tlf 93440
Institutt for datateknikk og informasjonsvitenskap, Gløshaugen

EKSAMEN I EMNE TDT4160 DATAMASKINER GRUNNKURS
17. AUGUST 2005
KL. 09.00 – 13.00

Hjelpemidler: D – Ingen trykte eller håndskrevne hjelpemidler tillatt. Bestemt, enkel
kalkulator tillatt.

Sensuren faller 7. september 2005.
Resultater gjøres kjent på http://studweb.ntnu.no/ og sensurtelefon 810 48 014.

Totalt antall sider: 9

Prosentsatser viser hvor mye hver oppgave teller innen settet.

Lykke til!

Side 2 av 9

Oppgave 1 – Flervalgsoppgaver (30%)
Bruk svararket bakerst i oppgaveteksten for å svare på denne oppgaven. Du kan få nytt ark av
eksamensvaktene dersom du trenger dette. Poengberegning per spørsmål: Riktig svar 2 poeng,
galt svar gir -1 poeng, blankt svar gir 0 poeng. NB! Det er ikke mulig å gardere ved å krysse
av flere alternativer. Dette gir i så fall 0 poeng. Kun ett alternativ er korrekt på hvert spørsmål.
1) Hvor mange assemblerinstruksjoner er det i en mikroinstruksjon?
a) Dette er avhengig av instruksjonssettarkitekturen (ISA)
b) Spørsmålet gir ikke mening fordi en assemblerinstruksjon består av flere
mikroinstruksjoner
c) Tre, en for hver fase (load, execute, store)
d) Dette er avhengig av størrelse på hurtiglager (eng. cache)
2) Enkelte maskiner har noe som heter segmentregister, hva brukes det til?
a) Peker på register som skal leses i en registerfil
b) Brukes av hurtiglager for å vite hvor data skal ligge i hovedlager
c) Holder øverste bit i en adresse for å få større adresserom
d) Holder nederste bit i en adresse for å vite relasjon til hurtiglager
3) Hva er riktig om samlebånd (eng. pipelines)?
a) Samlebånd øker hastigheten for hver enkelt instruksjon isolert sett
b) Samlebånd i prosessorer benyttes ikke lengre, dette er gammel teknologi
c) Målet med et samlebånd er å utføre instruksjoner i parallell
d) Samlebånd gjør at prosessoren gjør ferdig flere instruksjoner per klokkesykel
4) Hva er FEIL om samlebånd?
a) Klokkefrekvensen til en prosessor med samlebånd er begrenset av summen av
tiden samlebåndet bruker i de ulike trinnene
b) Klokkefrekvensen til en prosessor med samlebånd er begrenset av det tregeste
trinnet
c) Ved å innføre samlebånd kan frekvensen skrus opp fordi hvert enkelt trinn blir
enklere
d) En prosessor har samme klokkefrekvens for de ulike trinnene
5) Dersom du har et vanlig (in-order execution) samlebånd, hvilke dataavhengigheter vil
skape problemer i følgende program (Dark-syntaks – se oppgave 5)?
ADD $1, $2, $3
ADD $4, $2, $3
a) Avhengigheten på grunn av register 2
b) Avhengigheten på grunn av register 3
c) Avhengigheten på grunn av register 1
d) Det finnes ingen avhengighet

TDT4160 – EKSAMEN AUGUST 2005

Side 3 av 9
6) Hva skiller indirekte adresseringsmodus fra direkte adresseringsmodus (velg det
alternativet som er mest riktig)?
a) Indirekte er enklere enn direkte adressering fordi indirekte adressering krever et
ekstra oppslag
b) Indirekte adressering adresserer relativt til stakkregisteret, mens direkte
adressering adresserer relativt til instruksjonsregisteret
c) Direkte adressering gir lengre kildekode, og moderne prosessorer benytter kun
indirekte adressering
d) Ved indirekte adressering beregnes adressen som skal aksesseres ved kjøretid,
mens ved direkte adressering er adressen gitt av assemblerkoden
7) Hvorfor snakker man om 1ers komplement og 2ers komplement?
a) De to måtene å kode tall på benyttes i forskjellige regneoperasjoner
b) Det er lettere for en datamaskin å addere to tall som er på 2ers komplement enn
1ers komplement
c) 1ers komplement har større tallområde enn 2ers komplement
d) 1ers komplement er tenkt til 1-tallssystemet, mens 2ers komplement er tenkt til 2tallssystemet
8) Hvilken prosessortype har som oftest kortest instruksjonsord?
a) Akkumulatormaskin
b) Load/store-maskin
c) Stakkmaskin
9) Hva er et instruksjonsregister?
a) Mikroprosessoren leser instruksjonen som skal utføres til dette registret
b) Instruksjonen benytter dette registret til å lagre heltall
c) Instruksjonen benytter dette registret til å lagre både heltall og flyttall
d) Instruksjonsregisteret angir adressen til neste instruksjon som skal utføres.
10) Hvordan lagres data i hurtigminnet (SRAM) på en PC?
a) Hver bit ligger lagret som strøm i en transistor
b) Hver bit ligger lagret som ladning i en kondensator
c) Hver bit ligger lagret i to invertere som er koblet mot hverandre for å låse data
d) Data ligger lagret som strøm i magnetspoler
11) Hvis man har to ulike datamaskiner som utfører like mange instruksjoner per sekund, hva
kan man si om de to maskinene?
a) Antall MIPS (millions of instructions per second) for de to maskinene er like
b) Ytelsen er lik
c) Maskinene er like
d) Den maskinen som er nyest er sannsynligvis raskest
12) Hvordan programmerer man en mikroprosessor med samlebånd?
a) Man må passe seg for ”farer” (eng. hazards) i enkelte arkitekturer
b) Man må spesifisere rekkefølgen på de ulike trinnene for hver instruksjon
c) Til dette benyttes mikrokode
d) Det skjer alltid i et høynivå språk som Java eller C (++).

TDT4160 – EKSAMEN AUGUST 2005

Side 4 av 9
13) Hvilket av følgende utsagn er mest FEIL om harddisker?
a) Harddisker er mekaniske og tåler dårlig støt
b) Harddisker er basert på optiske plater som roterer relativt raskt (ca 7200 RPM).
c) Harddisker inneholder tosidige plater der data lagres
d) Harddisker har roterende plater, og man må vente til den har rotert til riktig plass
før data kan leses
14) Hvordan henter en datamaskin vanligvis informasjon fra omgivelsene?
a) Dette skjer ved at DRAM brikken er koblet til eksterne linjer
b) Dette skjer ved at ALU enheten er koblet til eksterne linjer
c) Dette skjer ved at porter er koblet på adresse og data bussen
d) Statusregisteret blir oppdatert med eksterne verdier
15) Hva er ulempen til USB?
a) Man kan ikke ta utstyr fra en maskin og forvente at det fungerer på en annen
maskin
b) Protokollen er ikke laget for overføring av store datamengder, her er firewire
raskere
c) Det er lite datautstyr som støtter denne protokollen
d) USB kablene blir dyre fordi det er mange ledere i selve kabelen

Oppgave 2 – Direct memory access (DMA) (18%)
a) Tegn en logisk skisse av en datamaskin (mikroprosessor, busser og dataminne)
med en DMA-kontroller.
b) Hvilke oppgave har DMA-kontrolleren?
c) Beskriv de ulike trinnene i en typisk DMA-overføring. Hvilke signaler sendes
mellom mikroprosessor og DMA-kontroller? Hvilke registre benyttes?

Oppgave 3 – Seriell overføring (12%)
a) Beskriv begrepene startbit, databit, paritetsbit og stoppbit (se figur
under).

b) Når benyttes ofte seriell dataoverføring framfor parallell dataoverføring?

TDT4160 – EKSAMEN AUGUST 2005

Side 5 av 9

Oppgave 4 – Mikroarkitektur og assembler (20%)

TDT4160 – EKSAMEN AUGUST 2005

Side 6 av 9

Bruk tabellene gitt ovenfor, som beskriver styreordet til en prosessor, og figuren på forrige
side, som skisserer en utførende enhet i denne prosessoren, til å besvare oppgavene under.
1. Hva blir styreordet for operasjonen R3 <- R6 + R5 + 1 der x skal beskrive
ubrukte bits?
2. Hva blir konsekvensene av mikrooperasjonen med styreordet
111010xxxx0000100 der x beskriver ubrukte bits?

TDT4160 – EKSAMEN AUGUST 2005

Side 7 av 9
For en gitt CISC-prosessor kan MOV-instruksjonen i assembler være definert med flere
adresseringsmodi slik:
MOV Rn, #Imm
; Immediate
MOV Rn, Addr
; Direkte
MOV Rn, [Addr]
; Indirekte
MOV Rn, Rm
; Register
MOV Rn, [Rm]
; Register indirekte
MOV Rn, Addr(Rm)
; Displacement
PUSH Rn
; Stakk push
POP Rn
; Stakk pop
Rn/Rm indikerer register nummer n/m. Addr og Imm kan være tallverdier eller variabler.
MOV fungerer slik: MOV til-operand, fra-operand
Gitt et lite utdrag av en datamaskins lager på et gitt stadium som skal benyttes for å besvare
spørsmålene under:

Hovedlager

Registre

Definerte variabler

Adresse

Verdi

Registernr

Verdi

Navn

Verdi

0

71

R0

5

teller

64

1

54

R1

15

i

3

2

12

R2

8

antall

4

3

86

R3

7

tab

3

4

28

R4

8

x

7

5

56

R5

55

retur

11

6

3

R6

9

7

8

R7

35

8

13

9

7

10

45

11

82

3. Hva vil verdien til R1 være etter følgende instruksjon: MOV R1, #45?
4. Følgende instruksjoner skal utføres etter hverandre. Skriv ned hvilke registre hver
enkelt instruksjon endrer og hva sluttverdiene til R4,R5,R6 og R7 vil være:
PUSH
MOV
MOV
POP
MOV
MOV

R4
R5,
R7,
R5
R6,
R7,

#antall
[R5]
1(R5)
10

TDT4160 – EKSAMEN AUGUST 2005

Side 8 av 9

Oppgave 5 – Assemblerprogrammering (20%)
Skriv et assemblerprogram for Dark load/store maskin (se under) som gjør følgende jobb:
for(i=0; i≤n; i++) a[i]=b[i]+i
Anta at:
$3 inneholder adressen for a[0], første elementet av en tabell med n+1 ord
$4 inneholder verdien n.
$5 inneholder adressen for b[0], første elementet av en tabell med n+1 ord

Manual DARK load/store-arkitektur

TDT4160 – EKSAMEN AUGUST 2005

Side 9 av 9

Svarark for oppgave 1
Studentnr:

______________

Fagnummer: ______________
Eksamensdato: ______________
Side ______ av _______

a

b

c

d

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

NB! Ikke glem å levere dette arket! Bla igjennom den papirbunken du gir
fra deg til slutt, for å sjekke at svar på avkrysningsoppgaven er med.

TDT4160 – EKSAMEN AUGUST 2005

Norwegian University of Science and Technology
Faculty of Information Technology, Mathematics and Electrical Engineering
The Department of Computer and Information Science

TDT4160 OG IT2201
D ATAMASKINER GRUNNKURS
E KSAMEN
20. DESEMBER , 2006, 09:00–13:00

Kontakt under eksamen:
Gunnar Tufte 73590356
Tillatte hjelpemidler:
D.
Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillatt.
Målform:
Bokmål

Page 1 of 14

O PPGAVE 1: B USS OG ADRESSEDEKODING (20%)
a. I Figur 1 er EPROM, RAM og PIO koblet til en felles buss. Finn adresseområde for EPROM, RAM og PIO. Alle enhetene har aktivt lavt (logisk ”0”) CS (Chip Select) signal.
A0

A15

CS
2K
EPROM

CS
2K
RAM

CS
PIO

Figur 1: Adressedekoding.
b. Anta at PIO-kretsen kun har mulighet til å adressere fire enheter.
Hvordan kan adressedekodingen endres for å gi maksimal utvidelsesmulighet for RAM-området?

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJO NER (20% (5% PÅ A OG B ; 10% PÅ C ))
Bruk vedlagte diagram og tabeller for IJVM til å løse oppgavene.
a. Forklar funksjonen til registeret ”PC”.
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register
”H” med innholdet i register ”TOS”.
Page 2 of 14

Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 4.
c. Lag mikroinstruksjon(er) for følgende IJVM-operasjon:
TOS = TOS + OPC.
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 4.

O PPGAVE 3: F ORBEDRE YTELSEN (20%)
a. Hvilken av disse alternativene er ikke en grunn til at man har begynt
å utvikle en-brikke mulitiprosessorer (CMP)?
1 Tilgjengelig ILP (Instruction Level Parallelism) i instruksjonsstrømmen er begrenset
2 En-kjerneprosessorer har ofte høyt effektforbruk.
3 Store cacher på brikken gjør at vi ikke har plass til større kjerner.
4 En moderne en-kjerneprosessor er svært kompleks og derfor kostbar å utvikle.
b. Anta at en prosessor har et samlebånd. Samlebåndet bruker tiden t
på å utføre en instruksjon. Hvert trinn har en forsinkelse på ∆t. Samlebåndet med tre trinn er illustrert i Figur 2(a). For å få høyere ytelse
erstattes samlebåndet med et femtrinns samlebånd, vist i Figur 2(b).
Hva skjer typisk med t og ∆t dersom tretrinns samlebåndet erstattes
med et samlebånd med fem trinn som kan øke ytelsen til prosessoren?
Begrunn svaret.
t

t
t

t

Stage 1

Stage 2

t

Stage 3

(a) Tretrinns samlebånd.

t

Stage 1

t

Stage 2

t

Stage 3

t

Stage 4

t

Stage 5

(b) Femtrinns samlebånd

Figur 2: Samlebånd med angitt tidsforsinkelse.

Page 3 of 14

O PPGAVE 4: S UPERSKALARE PROSESSORER - S COREBOARD
(20%)
Et program som utfører fire operasjonar:
1 R1 = R2 + R3
2 R4 = R1 * R1
3 R1 = R5 * R6
4 R7 = R0 + R0
a. Marker følgende typer dataavhengigheter i programmet ovenfor:
• Sanne dataavhengigheter (RAW-avhengighet).
• Utavhengigheter (WAW-avhengighet).
• Antiavhengigheter (WAR-avhengighet).
b. Anta at programmet ovenfor skal utføres på en superskalar prosessor med åtte synlige registre hvor instruksjoner startes og avsluttes i
rekkefølge og maksimalt to instruksjoner kan startes per klokkesykel.
Anta at for instruksjoner som dekodes i sykel n, så startes utførselen
i sykel n+1. Anta at for addisjonsoperasjoner (+) som startes i sykel
n, skrives resultatet tilbake til registeret i slutten av sykel n+2, og for
multiplikasjonsinstruksjoner (*) som startes i sykel n, skrives resultatet tilbake til registeret i slutten av sykel n+3.
Fullfør det påbegynte scoreboardet i Tabell 1 for alle fire instruksjoner
i programmet ovenfor.
Tabell 1: Scoreboard.
Cy

#

Decoded

Iss

1

1
2

R1=R2+R3
R4=R1*R1

1
-

Ret

Reg. being read
01234567

Page 4 of 14

Reg. being written
01234567

O PPGAVE 5: D IVERSE (20%)
Ta stilling til om påstandene er korrekte eller ikke. Korrekt svar gir 2% uttelling, feil svar gir tilsvarende straff og vet ikke (ikke svar) gir ingen uttelling.
a. Moore sin lov er oppkalt etter Gordon Moore. Dette er en lov som sier
noe om fysiske egenskaper i halvledermaterialet.
b. hex(0FF0) i ”Big endian” representerar et større tall enn hex(0FF0) i
”Little endian”.
c. RISC-prosessorer er raske fordi de har få kompliserte instruksjoner.
d. Cache (hurtigbuffer) er oftest implementert med SRAM-celler.
e. IJVM er en typisk RISC-arkitektur.
f. Aritmetiske uttrykk på omvent polsk notasjon (Reverse Polish Notation) er enkelt å utføre på stakkmaskiner.
g. IJVM-arkitekturen kan maksimalt ha et instruksjonsett bestående av
256 forskjellige instruksjoner..
h. ”Throughput” er et ytelsesmål der man måler hvor mye arbeid man
får gjort per tidsenhet.
i. ”Throughput” er et ytelsesmål som måler hvor mange instruksjoner
en prosessor gjør ferdig per klokkesykel.
j. DRAM er raskere enn SRAM (kortere aksesstid).

Page 5 of 14

IJVM vedlegg

Page 6 of 14

Figur 3: Blokkdiagram (IJVM).
Page 7 of 14

Figur 4: Mikroinstruksjonsformat (IJVM).

Page 8 of 14

A NSWER K EY

FOR

Page 1 of 14

T HE E XAM

O PPGAVE 1: B USS OG ADRESSEDEKODING (20%)
a. I Figur 1 er EPROM, RAM og PIO koblet til en felles buss. Finn adresseområde for EPROM, RAM og PIO. Alle enhetene har aktivt lavt (logisk ”0”) CS (Chip Select) signal.
Answer: EPROM: hex(0000) - hex(07FF) RAM: hex(8000) - hex (87FF)
PIO: hex(C000) - hex(FFFF)
b. Anta at PIO-kretsen kun har mulighet til å adressere fire enheter.
Hvordan kan adressedekodingen endres for å gi maksimal utvidelsesmulighet for RAM-området?
Answer: Endre adressedekodingen til PIO til kunn adressere området hex(FFFC) - hex(FFFF).

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJO NER (20% (5% PÅ A OG B ; 10% PÅ C ))
Bruk vedlagte diagram og tabeller for IJVM til å løse oppgavene.
a. Forklar funksjonen til registeret ”PC”.
Answer: PC Program Counter inneheld minne adressa til instruksjon
som skal utførast.
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register
”H” med innholdet i register ”TOS”.
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 4.
Answer: ALU: 010100 (B) C: 100000000 (H) Mem: 000 (ingen mem
opprasjon) B: 0111 (7 TOS)
c. Lag mikroinstruksjon(er) for følgende IJVM-operasjon:
TOS = TOS + OPC.
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 4.
Answer: Må ha to mikroinstruksjonar for å klare å utføre TOS = TOS
+ OPC.
1: Laste TOS inn i H ALU: 010100 (B) C: 100000000 (H) Mem: 000
(ingen mem opprasjon) B: 0111 (7 TOS)

Page 2 of 14

2 addere H + OPC skriv til TOS ALU: 111100 (A+B) C: 001000000
(TOS) Mem: 000 (ingen mem opprasjon) B: 1000 (8 OPC)
eller OPC kan lastast H i fyrste opperasjon og TOS + H i andre
operasjon.

O PPGAVE 3: F ORBEDRE YTELSEN (20%)
a. Hvilken av disse alternativene er ikke en grunn til at man har begynt
å utvikle en-brikke mulitiprosessorer (CMP)?
1 Tilgjengelig ILP (Instruction Level Parallelism) i instruksjonsstrømmen er begrenset
2 En-kjerneprosessorer har ofte høyt effektforbruk.
3 Store cacher på brikken gjør at vi ikke har plass til større kjerner.
4 En moderne en-kjerneprosessor er svært kompleks og derfor kostbar å utvikle.
Answer: 3
b. Anta at en prosessor har et samlebånd. Samlebåndet bruker tiden t
på å utføre en instruksjon. Hvert trinn har en forsinkelse på ∆t. Samlebåndet med tre trinn er illustrert i Figur 2(a). For å få høyere ytelse
erstattes samlebåndet med et femtrinns samlebånd, vist i Figur 2(b).
Hva skjer typisk med t og ∆t dersom tretrinns samlebåndet erstattes
med et samlebånd med fem trinn som kan øke ytelsen til prosessoren?
Begrunn svaret.
Answer: ∆t minkar sidan kvart trinn kan vere enklare (mindre tidsforsinkelse). Total tidsforbruk t samla for alle trinna må vere
mindre slik at klokkefrekvensen for prosessoren kan aukast.

Page 3 of 14

O PPGAVE 4: S UPERSKALARE PROSESSORER - S COREBOARD
(20%)
Et program som utfører fire operasjonar:
1 R1 = R2 + R3
2 R4 = R1 * R1
3 R1 = R5 * R6
4 R7 = R0 + R0
a. Marker følgende typer dataavhengigheter i programmet ovenfor:
• Sanne dataavhengigheter (RAW-avhengighet).
• Utavhengigheter (WAW-avhengighet).
• Antiavhengigheter (WAR-avhengighet).
Answer: Avhengighet:
RAW: I2 leser R1, I1 skriver R1
WAR: I2 leser R1, I3 skriver R1
WAW: I1 og I3 skriver R1
b. Anta at programmet ovenfor skal utføres på en superskalar prosessor med åtte synlige registre hvor instruksjoner startes og avsluttes i
rekkefølge og maksimalt to instruksjoner kan startes per klokkesykel.
Anta at for instruksjoner som dekodes i sykel n, så startes utførselen
i sykel n+1. Anta at for addisjonsoperasjoner (+) som startes i sykel
n, skrives resultatet tilbake til registeret i slutten av sykel n+2, og for
multiplikasjonsinstruksjoner (*) som startes i sykel n, skrives resultatet tilbake til registeret i slutten av sykel n+3.
Fullfør det påbegynte scoreboardet i Tabell 1 for alle fire instruksjoner
i programmet ovenfor.
Tabell 2: Scoreboard.
Cy

#

Decoded

Iss

1

1
2

R1=R2+R3
R4=R1*R1

1
-

Ret

Reg. being read
01234567

Reg. being written
01234567

Answer: Instr. (4) kan ikke avsluttes før i syklus 11 pga. kravet om
i-rekkefølge-avslutning (eng. in-order-completion).

Page 4 of 14

Tabell 3: Scoreboard.
Cy

#

Decoded

Iss

1

1
2

R1=R2+R3
R4=R1*R1

1
-

R1=R5*R6

2
-

R7=R5+R0

3
4

2
3
4

Ret

1
3

5
6
7
8

2
4

9
10
11

3
4

Reg. being read
01234567
XX11XXXX
XX11XXXX
XX11XXXX
XXXXXXXX
X1XXXXXX
X1XXXXXX
X1XXXXXX
X1XXXXXX
XXXXXXXX
XXXXX11X
1XXXX21X
1XXXX21X
1XXXX21X
1XXXX1XX
XXXXXXXX

Reg. being written
01234567
X1XXXXXX
X1XXXXXX
X1XXXXXX
XXXXXXXX
XXXX1XXX
XXXX1XXX
XXXX1XXX
XXXX1XXX
XXXXXXXX
X1XXXXXX
X1XXXXX1
X1XXXXX1
X1XXXXX1
XXXXXXX1
XXXXXXXX

O PPGAVE 5: D IVERSE (20%)
Ta stilling til om påstandene er korrekte eller ikke. Korrekt svar gir 2% uttelling, feil svar gir tilsvarende straff og vet ikke (ikke svar) gir ingen uttelling.
a. Moore sin lov er oppkalt etter Gordon Moore. Dette er en lov som sier
noe om fysiske egenskaper i halvledermaterialet.
Answer: Nei
b. hex(0FF0) i ”Big endian” representerar et større tall enn hex(0FF0) i
”Little endian”.
Answer: Nei
c. RISC-prosessorer er raske fordi de har få kompliserte instruksjoner.
Answer: Nei
d. Cache (hurtigbuffer) er oftest implementert med SRAM-celler.
Answer: Ja
e. IJVM er en typisk RISC-arkitektur.
Answer: Nei
Page 5 of 14

f. Aritmetiske uttrykk på omvent polsk notasjon (Reverse Polish Notation) er enkelt å utføre på stakkmaskiner.
Answer: Ja
g. IJVM-arkitekturen kan maksimalt ha et instruksjonsett bestående av
256 forskjellige instruksjoner..
Answer: Ja
h. ”Throughput” er et ytelsesmål der man måler hvor mye arbeid man
får gjort per tidsenhet.
Answer: Ja
i. ”Throughput” er et ytelsesmål som måler hvor mange instruksjoner
en prosessor gjør ferdig per klokkesykel.
Answer: Nei
j. DRAM er raskere enn SRAM (kortere aksesstid).
Answer: Nei

Page 6 of 14

IJVM vedlegg

Page 7 of 14

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 5: Funksjonstabell for ALU (IJVM).

Page 8 of 14

Figur 6: Timingdiagram (IJVM).

Page 9 of 14

A0

A15

CS

CS

2K
EPROM

CS

2K
RAM

PIO

Figur 7: Adressedekoding.

t

t
t

t

Stage 1

Stage 2

t

Stage 3

(a) Tretrinns samlebånd.

t

Stage 1

t

Stage 2

t

Stage 3

t

Stage 4

t

Stage 5

(b) Femtrinns samlebånd

Figur 8: Samlebånd med angitt tidsforsinkelse.

Page 10 of 14

Figur 9: Blokkdiagram (IJVM).
Page 11 of 14

Figur 10: Mikroinstruksjonsformat (IJVM).

Page 12 of 14

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 11: Funksjonstabell for ALU (IJVM).

Page 13 of 14

Figur 12: Timingdiagram (IJVM).

Page 14 of 14

Norwegian University of Science and Technology
Faculty of Information Technology, Mathematics and Electrical Engineering
The Department of Computer and Information Science

TDT4160 OG IT2201
D ATAMASKINER GRUNNKURS
E KSAMEN
20. DESEMBER , 2006, 09:00–13:00

Kontakt under eksamen:
Gunnar Tufte 73590356
Tillatte hjelpemidler:
D.
Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillatt.
Målform:
Bokmål

Page 1 of 14

O PPGAVE 1: B USS OG ADRESSEDEKODING (20%)
a. I Figur 1 er EPROM, RAM og PIO koblet til en felles buss. Finn adresseområde for EPROM, RAM og PIO. Alle enhetene har aktivt lavt (logisk ”0”) CS (Chip Select) signal.
A0

A15

CS
2K
EPROM

CS
2K
RAM

CS
PIO

Figur 1: Adressedekoding.
b. Anta at PIO-kretsen kun har mulighet til å adressere fire enheter.
Hvordan kan adressedekodingen endres for å gi maksimal utvidelsesmulighet for RAM-området?

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJO NER (20% (5% PÅ A OG B ; 10% PÅ C ))
Bruk vedlagte diagram og tabeller for IJVM til å løse oppgavene.
a. Forklar funksjonen til registeret ”PC”.
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register
”H” med innholdet i register ”TOS”.
Page 2 of 14

Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 4.
c. Lag mikroinstruksjon(er) for følgende IJVM-operasjon:
TOS = TOS + OPC.
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 4.

O PPGAVE 3: F ORBEDRE YTELSEN (20%)
a. Hvilken av disse alternativene er ikke en grunn til at man har begynt
å utvikle en-brikke mulitiprosessorer (CMP)?
1 Tilgjengelig ILP (Instruction Level Parallelism) i instruksjonsstrømmen er begrenset
2 En-kjerneprosessorer har ofte høyt effektforbruk.
3 Store cacher på brikken gjør at vi ikke har plass til større kjerner.
4 En moderne en-kjerneprosessor er svært kompleks og derfor kostbar å utvikle.
b. Anta at en prosessor har et samlebånd. Samlebåndet bruker tiden t
på å utføre en instruksjon. Hvert trinn har en forsinkelse på ∆t. Samlebåndet med tre trinn er illustrert i Figur 2(a). For å få høyere ytelse
erstattes samlebåndet med et femtrinns samlebånd, vist i Figur 2(b).
Hva skjer typisk med t og ∆t dersom tretrinns samlebåndet erstattes
med et samlebånd med fem trinn som kan øke ytelsen til prosessoren?
Begrunn svaret.
t

t
t

t

Stage 1

Stage 2

t

Stage 3

(a) Tretrinns samlebånd.

t

Stage 1

t

Stage 2

t

Stage 3

t

Stage 4

t

Stage 5

(b) Femtrinns samlebånd

Figur 2: Samlebånd med angitt tidsforsinkelse.

Page 3 of 14

O PPGAVE 4: S UPERSKALARE PROSESSORER - S COREBOARD
(20%)
Et program som utfører fire operasjonar:
1 R1 = R2 + R3
2 R4 = R1 * R1
3 R1 = R5 * R6
4 R7 = R0 + R0
a. Marker følgende typer dataavhengigheter i programmet ovenfor:
• Sanne dataavhengigheter (RAW-avhengighet).
• Utavhengigheter (WAW-avhengighet).
• Antiavhengigheter (WAR-avhengighet).
b. Anta at programmet ovenfor skal utføres på en superskalar prosessor med åtte synlige registre hvor instruksjoner startes og avsluttes i
rekkefølge og maksimalt to instruksjoner kan startes per klokkesykel.
Anta at for instruksjoner som dekodes i sykel n, så startes utførselen
i sykel n+1. Anta at for addisjonsoperasjoner (+) som startes i sykel
n, skrives resultatet tilbake til registeret i slutten av sykel n+2, og for
multiplikasjonsinstruksjoner (*) som startes i sykel n, skrives resultatet tilbake til registeret i slutten av sykel n+3.
Fullfør det påbegynte scoreboardet i Tabell 1 for alle fire instruksjoner
i programmet ovenfor.
Tabell 1: Scoreboard.
Cy

#

Decoded

Iss

1

1
2

R1=R2+R3
R4=R1*R1

1
-

Ret

Reg. being read
01234567

Page 4 of 14

Reg. being written
01234567

O PPGAVE 5: D IVERSE (20%)
Ta stilling til om påstandene er korrekte eller ikke. Korrekt svar gir 2% uttelling, feil svar gir tilsvarende straff og vet ikke (ikke svar) gir ingen uttelling.
a. Moore sin lov er oppkalt etter Gordon Moore. Dette er en lov som sier
noe om fysiske egenskaper i halvledermaterialet.
b. hex(0FF0) i ”Big endian” representerar et større tall enn hex(0FF0) i
”Little endian”.
c. RISC-prosessorer er raske fordi de har få kompliserte instruksjoner.
d. Cache (hurtigbuffer) er oftest implementert med SRAM-celler.
e. IJVM er en typisk RISC-arkitektur.
f. Aritmetiske uttrykk på omvent polsk notasjon (Reverse Polish Notation) er enkelt å utføre på stakkmaskiner.
g. IJVM-arkitekturen kan maksimalt ha et instruksjonsett bestående av
256 forskjellige instruksjoner..
h. ”Throughput” er et ytelsesmål der man måler hvor mye arbeid man
får gjort per tidsenhet.
i. ”Throughput” er et ytelsesmål som måler hvor mange instruksjoner
en prosessor gjør ferdig per klokkesykel.
j. DRAM er raskere enn SRAM (kortere aksesstid).

Page 5 of 14

IJVM vedlegg

Page 6 of 14

Figur 3: Blokkdiagram (IJVM).
Page 7 of 14

Figur 4: Mikroinstruksjonsformat (IJVM).

Page 8 of 14

A NSWER K EY

FOR

Page 1 of 14

T HE E XAM

O PPGAVE 1: B USS OG ADRESSEDEKODING (20%)
a. I Figur 1 er EPROM, RAM og PIO koblet til en felles buss. Finn adresseområde for EPROM, RAM og PIO. Alle enhetene har aktivt lavt (logisk ”0”) CS (Chip Select) signal.
Answer: EPROM: hex(0000) - hex(07FF) RAM: hex(8000) - hex (87FF)
PIO: hex(C000) - hex(FFFF)
b. Anta at PIO-kretsen kun har mulighet til å adressere fire enheter.
Hvordan kan adressedekodingen endres for å gi maksimal utvidelsesmulighet for RAM-området?
Answer: Endre adressedekodingen til PIO til kunn adressere området hex(FFFC) - hex(FFFF).

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJO NER (20% (5% PÅ A OG B ; 10% PÅ C ))
Bruk vedlagte diagram og tabeller for IJVM til å løse oppgavene.
a. Forklar funksjonen til registeret ”PC”.
Answer: PC Program Counter inneheld minne adressa til instruksjon
som skal utførast.
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register
”H” med innholdet i register ”TOS”.
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 4.
Answer: ALU: 010100 (B) C: 100000000 (H) Mem: 000 (ingen mem
opprasjon) B: 0111 (7 TOS)
c. Lag mikroinstruksjon(er) for følgende IJVM-operasjon:
TOS = TOS + OPC.
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 4.
Answer: Må ha to mikroinstruksjonar for å klare å utføre TOS = TOS
+ OPC.
1: Laste TOS inn i H ALU: 010100 (B) C: 100000000 (H) Mem: 000
(ingen mem opprasjon) B: 0111 (7 TOS)

Page 2 of 14

2 addere H + OPC skriv til TOS ALU: 111100 (A+B) C: 001000000
(TOS) Mem: 000 (ingen mem opprasjon) B: 1000 (8 OPC)
eller OPC kan lastast H i fyrste opperasjon og TOS + H i andre
operasjon.

O PPGAVE 3: F ORBEDRE YTELSEN (20%)
a. Hvilken av disse alternativene er ikke en grunn til at man har begynt
å utvikle en-brikke mulitiprosessorer (CMP)?
1 Tilgjengelig ILP (Instruction Level Parallelism) i instruksjonsstrømmen er begrenset
2 En-kjerneprosessorer har ofte høyt effektforbruk.
3 Store cacher på brikken gjør at vi ikke har plass til større kjerner.
4 En moderne en-kjerneprosessor er svært kompleks og derfor kostbar å utvikle.
Answer: 3
b. Anta at en prosessor har et samlebånd. Samlebåndet bruker tiden t
på å utføre en instruksjon. Hvert trinn har en forsinkelse på ∆t. Samlebåndet med tre trinn er illustrert i Figur 2(a). For å få høyere ytelse
erstattes samlebåndet med et femtrinns samlebånd, vist i Figur 2(b).
Hva skjer typisk med t og ∆t dersom tretrinns samlebåndet erstattes
med et samlebånd med fem trinn som kan øke ytelsen til prosessoren?
Begrunn svaret.
Answer: ∆t minkar sidan kvart trinn kan vere enklare (mindre tidsforsinkelse). Total tidsforbruk t samla for trinna må ikkje vere
mindre slik. Klokkefrekvensen for prosessoren kan aukast.

Page 3 of 14

O PPGAVE 4: S UPERSKALARE PROSESSORER - S COREBOARD
(20%)
Et program som utfører fire operasjonar:
1 R1 = R2 + R3
2 R4 = R1 * R1
3 R1 = R5 * R6
4 R7 = R0 + R0
a. Marker følgende typer dataavhengigheter i programmet ovenfor:
• Sanne dataavhengigheter (RAW-avhengighet).
• Utavhengigheter (WAW-avhengighet).
• Antiavhengigheter (WAR-avhengighet).
Answer: Avhengighet:
RAW: I2 leser R1, I1 skriver R1
WAR: I2 leser R1, I3 skriver R1
WAW: I1 og I3 skriver R1
b. Anta at programmet ovenfor skal utføres på en superskalar prosessor med åtte synlige registre hvor instruksjoner startes og avsluttes i
rekkefølge og maksimalt to instruksjoner kan startes per klokkesykel.
Anta at for instruksjoner som dekodes i sykel n, så startes utførselen
i sykel n+1. Anta at for addisjonsoperasjoner (+) som startes i sykel
n, skrives resultatet tilbake til registeret i slutten av sykel n+2, og for
multiplikasjonsinstruksjoner (*) som startes i sykel n, skrives resultatet tilbake til registeret i slutten av sykel n+3.
Fullfør det påbegynte scoreboardet i Tabell 1 for alle fire instruksjoner
i programmet ovenfor.
Tabell 2: Scoreboard.
Cy

#

Decoded

Iss

1

1
2

R1=R2+R3
R4=R1*R1

1
-

Ret

Reg. being read
01234567

Reg. being written
01234567

Answer: Instr. (4) kan ikke avsluttes før i syklus 11 pga. kravet om
i-rekkefølge-avslutning (eng. in-order-completion).

Page 4 of 14

Tabell 3: Scoreboard.
Cy

#

Decoded

Iss

1

1
2

R1=R2+R3
R4=R1*R1

1
-

R1=R5*R6

2
-

R7=R5+R0

3
4

2
3
4

Ret

1
3

5
6
7
8

2
4

9
10
11

3
4

Reg. being read
01234567
XX11XXXX
XX11XXXX
XX11XXXX
XXXXXXXX
X1XXXXXX
X1XXXXXX
X1XXXXXX
X1XXXXXX
XXXXXXXX
XXXXX11X
1XXXX21X
1XXXX21X
1XXXX21X
1XXXX1XX
XXXXXXXX

Reg. being written
01234567
X1XXXXXX
X1XXXXXX
X1XXXXXX
XXXXXXXX
XXXX1XXX
XXXX1XXX
XXXX1XXX
XXXX1XXX
XXXXXXXX
X1XXXXXX
X1XXXXX1
X1XXXXX1
X1XXXXX1
XXXXXXX1
XXXXXXXX

O PPGAVE 5: D IVERSE (20%)
Ta stilling til om påstandene er korrekte eller ikke. Korrekt svar gir 2% uttelling, feil svar gir tilsvarende straff og vet ikke (ikke svar) gir ingen uttelling.
a. Moore sin lov er oppkalt etter Gordon Moore. Dette er en lov som sier
noe om fysiske egenskaper i halvledermaterialet.
Answer: Nei
b. hex(0FF0) i ”Big endian” representerar et større tall enn hex(0FF0) i
”Little endian”.
Answer: Nei
c. RISC-prosessorer er raske fordi de har få kompliserte instruksjoner.
Answer: Nei
d. Cache (hurtigbuffer) er oftest implementert med SRAM-celler.
Answer: Ja
e. IJVM er en typisk RISC-arkitektur.
Answer: Nei
Page 5 of 14

f. Aritmetiske uttrykk på omvent polsk notasjon (Reverse Polish Notation) er enkelt å utføre på stakkmaskiner.
Answer: Ja
g. IJVM-arkitekturen kan maksimalt ha et instruksjonsett bestående av
256 forskjellige instruksjoner..
Answer: Ja
h. ”Throughput” er et ytelsesmål der man måler hvor mye arbeid man
får gjort per tidsenhet.
Answer: Ja
i. ”Throughput” er et ytelsesmål som måler hvor mange instruksjoner
en prosessor gjør ferdig per klokkesykel.
Answer: Nei
j. DRAM er raskere enn SRAM (kortere aksesstid).
Answer: Nei

Page 6 of 14

IJVM vedlegg

Page 7 of 14

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 5: Funksjonstabell for ALU (IJVM).

Page 8 of 14

Figur 6: Timingdiagram (IJVM).

Page 9 of 14

A0

A15

CS

CS

2K
EPROM

CS

2K
RAM

PIO

Figur 7: Adressedekoding.

t

t
t

t

Stage 1

Stage 2

t

Stage 3

(a) Tretrinns samlebånd.

t

Stage 1

t

Stage 2

t

Stage 3

t

Stage 4

t

Stage 5

(b) Femtrinns samlebånd

Figur 8: Samlebånd med angitt tidsforsinkelse.

Page 10 of 14

Figur 9: Blokkdiagram (IJVM).
Page 11 of 14

Figur 10: Mikroinstruksjonsformat (IJVM).

Page 12 of 14

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 11: Funksjonstabell for ALU (IJVM).

Page 13 of 14

Figur 12: Timingdiagram (IJVM).

Page 14 of 14

Side 1 av 4

Løsningsforslag eksamen TDT4160 våren 2006
Oppgave 1 – Lager – 25 % (5 % på a, b og c; 10 % på d)
a) Forklar forskjellen mellom little endian og big endian.
Hvorfor kan det være viktig å vite hvilken endian en prosessor bruker?
Ord som er på mer enn en byte kan lagres på to måter. Man kan enten lagre disse med mest
signifikante byte først og minst signifikante byte sist (big endian) eller omvendt (little endian).
For eksempel vil 0x12 34 56 78 bli lagret 78 56 34 12 i little endian.
Det er viktig å vite hvilken type endian som er brukt når man skal overføre data fra en
prosessor(-familie) til en annen. Hvis en prosessor leser 78 56 34 12 (eksempel over) og ikke
vet om det er little eller big endian, vet den ikke om tallet faktisk er 0x12 34 56 78 eller 0x78 56
34 12.
b) Minnebrikker bruker gjerne D-flip-flops til å lagre data. Hver D-flip-flop har 4
innganger/utganger: D (data inn), Q (data ut), CK (klokke), CLR (nullstill). Forklar hvordan en
4-Mbit minnebrikke kan være organisert slik at den slipper å ha 16 millioner (4*4M) pinner.
To ting er viktig å innse: Vi trenger ikke uavhengig tilgang til alle bits (#1) og vi trenger ikke
samtidig tilgang til alle bits (#2). Minnebrikker blir derfor (konseptuelt) organisert med D-flipflops i en todimensjonal matrise. Alle bits i en rad leses/skrives samtidig (#1) og på et gitt
tidspunkt er kun en rad aktiv (#2). Minnebrikken trenger derfor bare datapinner nok til en rad.
I tillegg trengs pinner for å oppgi radnummer (adresse).
c) Forklar forskjellen mellom RAID 4 og RAID 5.
Begge lagrer data i striper og bruker paritet som redundans. Forskjellen er at RAID 4 har alle
paritetsstriper på en disk, mens de er fordelt jevnt utover diskene i RAID 5. RAID 5 unngår
derfor en flaskehals ved skriveoperasjoner.
d) Forklar fordeler og ulemper ved direkte avbildning (direct mapping) versus fullt assosiativ
avbildning. Hvorfor er sett-assosiativ avbildning et godt kompromiss?
Fordeler med direkte avbildning: Raskt oppslag, enkel hardware, enkelt å finne hvor nye data
skal inn.
Fordeler med fullt assosiativ avbildning: God utnyttelse av plass, høyere treffrate.
Ved direkte avbildning kan et ord fra hovedlagret kun ligge på en linje i hurtigbufferet. Ved
fullt assosiativ avbildning kan ord ligge hvor som helst i hurtigbufferet. Ved sett-assosiativ
avbildning kan et ord kun ligge i et sett, men det er plass til flere ord i hvert sett. Dette gjør at
det er fort å finne frem samtidig som man har litt fleksibilitet når det gjelder plassering.

Side 2 av 4

Oppgave 2 – Dataoverføring – 10 %
a) Hva gjør en DMA-kontroller? Hvilke fordeler oppnås ved å bruke en slik?
En DMA-kontroller er ansvarlig for å utføre dataoverføringer til/fra hovedlager uten
innblanding fra prosessor. Prosessoren gir bare beskjed hva som skal overføres, hvor mye og
hvor dataene skal skrives. Så utfører DMA-kontrolleren jobben slik at prosessoren kan gjøre
noe annet i mens.
b) PCI Express overfører data over serielle forbindelser (lanes). Enheter som trenger å overføre
store mengder data, kan bruke flere slike forbindelser i parallell. Forklar hvordan denne
parallelliteten skiller seg fra parallell overføring i tradisjonelle busser som for eksempel PCI.
Ved vanlig parallell overføring er det for eksempel 8 bit fra et og samme ord som overføres
samtidig på 8 linjer. Dermed er det viktig at bitene kommer frem samtidig, noe som kan være et
problem ved høye klokkehastigheter (korte klokkepulser).
PCI Express bruker serielle forbindelser slik at 8 bit fra et ord overføres etter hverandre og
ikke samtidig. Med 8 slike forbindelser (lanes) kan man overføre 8 bit samtidig, men dette er da
8 bit fra forskjellige ord. Overføringene over disse 8 forbindelsene trenger derfor ikke være
synkronisert med hverandre.

Oppgave 3 – Mikroarkitektur – 35 % (5 % på a, 10 % på b, 20 % på c)
a) Forklar forskjellen mellom statisk og dynamisk forgreningspredikering.
Gi ett eksempel på teknikker for hver av disse to kategoriene.
Forgreningspredikering er å gjette om en forgrening i programkoden vil bli tatt eller ikke.
Dette er viktig for å kunne hente inn instruksjoner så tidlig som mulig i samlebånd.
Ved statisk forgreningspredikering gjetter man uten å ta hensyn til hva som har skjedd tidligere
under utføring. For eksempel kan man alltid gjette hopp, aldri gjette hopp, alltid gjette hopp
for BNE-instruksjoner, osv.
Ved dynamisk forgreningspredikering tar man hensyn til historie – hva som har skjedd når man
har utført den aktuelle instruksjonen før. For eksempel kan man bruke en historiebit til å lagre
om sist utføring medførte hopp eller ikke og bruke denne biten til å gjette neste gang. Man kan
også bruke flere historiebits og historietabell.
b) Lag mikroinstruksjon(er) for følgende IJVM-operasjon (se bort fra Addr og JAM):
SP = TOS + OPC
Se vedlegget for oversikt over utførende enhet, funksjonstabell for ALU og formatet på
mikroinstruksjoner.
Ser av den utførende enheten at TOS + OPC ikke kan utføres i en klokkesyklus. Må derfor først
kopiere TOS (eller OPC) til H for så å utføre H + OPC (eller H + TOS).
Første mikroinstruksjon: ALU = B, C = H, Mem = 0, B = TOS
(eller 00010100 100000000 000 0111)

Side 3 av 4

Andre mikroinstruksjon: ALU = A+B, C = SP, Mem = 0, B = OPC
(eller 00111100 000001000 000 1000)
c) Figuren under viser et scoreboard for en superskalar prosessor som bruker i-rekkefølgetildeling og i-rekkefølge-fullføring (in-order issue, in-order completion). Hvordan vil
scoreboardet se ut for klokkesyklus 5 og 6? Anta følgende:
•
•
•
•
•
•

Instruksjon 5 er R7 = R1*R2
Instruksjon 6 er R1 = R0-R2
Addisjon og subtraksjon tar 2 klokkesykler
Multiplikasjon tar 3klokkesykler
Det er alltid en passende funksjonell enhet ledig
Maksimalt 2 instruksjoner kan dekodes / starte utføring (issue) hver klokkesyklus

Figur 1: Scoreboard
Se figur 4-43 i læreboka (side 306) for fasit.

Oppgave 4 – Instruksjonssettarkitektur – 10 %
a) Forklar hvordan registeradressering fungerer.
Hvorfor er dette et populært adresseringsmodus?
Ved registeradressering inneholder instruksjonen et registernummer. Operanden ligger i
registeret med det registernummeret.
Mye brukt siden registre er mye brukt (toppen av minnehierarkiet). Trenger heller ikke mange
bits i instruksjonsformatet for å oppgi et registernummer (sammenlignet med for eksempel en
hovedlageradresse). Dette gjør at instruksjonsformatet kan være kort og enkelt (mindre
programkode, raskere å lese instruksjoner fra hovedlager, bedre utnyttelse av hurtigbuffer, …)
b) Hva brukes templatefeltet i instruksjonsformatet til IA-64 til?
To ting: Oppgi begrensninger i parallelliteten til instruksjonene og å spesifisere hvilken

Side 4 av 4

instruksjon i instruksjonspakken som skal utføres av hvilken type utførende enhet. Begge deler
gjør det enklere for IA-64 prosessoren å utføre instruksjonene i samlebåndet.

Oppgave 5 – Diverse – 20 % (5 % på a, 15 % på b)
a) Forklar forskjellen mellom tolking (interpreting) og oversetting (compiling / translation).
Gi ett eksempel på fornuftig bruk av hver av disse.
En datamaskin kan sees på som et hierarki av abstraksjoner der hvert nivå har sitt eget språk.
For å få utført et program skrevet for det ytterste nivået, må det oversettes til språket på nivået
innenfor. Dette kan skje på to måter: Ved tolking oversettes et program instruksjon for
instruksjon hver gang det skal utføres, mens ved oversetting blir programmet oversatt en gang
for alle.
Eksempel på tolking: Mikroprogrammert styreenhet.
Eksempel på oversetting: Kompilering fra C++ til assembly.
b) Beskriv kort de viktigste forskjellene mellom Pentium 4 og UltraSPARC III på ISA-nivået.
Gjør deretter det samme for mikroarkitektur-nivået.
ISA-nivået:
- Pentium 4 er CISC, UltraSPARC III er RISC.
- Pentium 4 har få generelle registre.
- UltraSPARC III bruker registervindu.
- Pentium 4 har variabelt instruksjonsformat.
- Pentium 4 har mange adresseringsmodi.
- Pentium 4 har mange spesialiserte instruksjoner.
Mikroarkitektur-nivået:
- Pentium 4 er 32 bits, UltraSPARC III er 64 bits.
- Pentium 4 oversetter CISC-instruksjoner til uOperasjoner.
- Pentium 4 har ut-av-rekkefølge tildeling.
- UltraSPARC III har kortere samlebånd.
- UltraSPARC III har off-chip L2 cache.

Side 1 av 5

Norges teknisk-naturvitenskapelige universitet
Institutt for datateknikk og informasjonsvitenskap

EKSAMENSOPPGAVE I FAG TDT4160 – DATAMASKINER GRUNNKURS

Faglig kontakt under eksamen:

Gunnar Tufte

Tlf.: 93440

Eksamensdato:

11. august 2006

Eksamenstid:

09.00 – 13.00

Tillatte hjelpemiddel:

D: Ingen trykte eller håndskrevne hjelpemiddel tillatt. Bestemt, enkel
kalkulator tillatt.

Språkform: Bokmål

Side 2 av 5

Oppgave 1 – Lager – 25 % (5 % på a, b og c; 10 % på d)
a) Forklar forskjellen mellom little endian og big endian.
Hvorfor kan det være viktig å vite hvilken endian en prosessor bruker?
b) Minnebrikker bruker gjerne D-flip-flops til å lagre data. Hver D-flip-flop har 4
innganger/utganger: D (data inn), Q (data ut), CK (klokke), CLR (nullstill). Forklar hvordan en
4-Mbit minnebrikke kan være organisert slik at den slipper å ha 16 millioner (4*4M) pinner.
c) Forklar forskjellen mellom RAID 4 og RAID 5.
d) Forklar fordeler og ulemper ved direkte avbildning (direct mapping) versus fullt assosiativ
avbildning. Hvorfor er sett-assosiativ avbildning et godt kompromiss?

Oppgave 2 – Dataoverføring – 10 %
a) Hva gjør en DMA-kontroller? Hvilke fordeler oppnås ved å bruke en slik?
b) PCI Express overfører data over serielle forbindelser (lanes). Enheter som trenger å overføre
store mengder data, kan bruke flere slike forbindelser i parallell. Forklar hvordan denne
parallelliteten skiller seg fra parallell overføring i tradisjonelle busser som for eksempel PCI.

Oppgave 3 – Mikroarkitektur – 35 % (5 % på a, 10 % på b, 20 % på c)
a) Forklar forskjellen mellom statisk og dynamisk forgreningspredikering.
Gi ett eksempel på teknikker for hver av disse to kategoriene.
b) Lag mikroinstruksjon(er) for følgende IJVM-operasjon (se bort fra Addr og JAM):
SP = TOS + OPC
Se vedlegget for oversikt over utførende enhet, funksjonstabell for ALU og formatet på
mikroinstruksjoner.
c) Figuren under viser et scoreboard for en superskalar prosessor som bruker i-rekkefølgetildeling og i-rekkefølge-fullføring (in-order issue, in-order completion). Hvordan vil
scoreboardet se ut for klokkesyklus 5 og 6? Anta følgende:
•
•
•
•
•
•

Instruksjon 5 er R7 = R1*R2
Instruksjon 6 er R1 = R0-R2
Addisjon og subtraksjon tar 2 klokkesykler
Multiplikasjon tar 3 klokkesykler
Det er alltid en passende funksjonell enhet ledig
Maksimalt 2 instruksjoner kan dekodes / starte utføring (issue) hver klokkesyklus

Side 3 av 5

Figur 1: Scoreboard

Oppgave 4 – Instruksjonssettarkitektur – 10 %
a) Forklar hvordan registeradressering fungerer.
Hvorfor er dette et populært adresseringsmodus?
b) Hva brukes templatefeltet i instruksjonsformatet til IA-64 til?

Oppgave 5 – Diverse – 20 % (5 % på a, 15 % på b)
a) Forklar forskjellen mellom tolking (interpreting) og oversetting (compiling / translation).
Gi ett eksempel på fornuftig bruk av hver av disse.
b) Beskriv kort de viktigste forskjellene mellom Pentium 4 og UltraSPARC III på ISA-nivået.
Gjør deretter det samme for mikroarkitektur-nivået.

Side 4 av 5

Vedlegg

Figur 2: Utførende enhet (IJVM)

Side 5 av 5

Figur 3: Funksjonstabell for ALU (IJVM)

Figur 4: Mikroinstruksjonsformat (IJVM)

Side 1 av 13

NTNU
Norges teknisk-naturvitenskapelige
universitet

Fakultet for informasjonsteknologi,
matematikk og elektroteknikk
Institutt for datateknikk
og informasjonsvitenskap

BOKMÅL

AVSLUTTENDE EKSAMEN I
TDT4160
Datamaskiner Grunnkurs
Løsningsforslag
Torsdag 29. November 2007
Kl. 09.00 – 13.00

Faglig kontakt under eksamen:
Marius Grannæs

Hjelpemidler:
Kalkulator tillatt. Ingen trykte eller håndskrevne hjelpemidler tillatt.

Sensurdato:
20. Desember 2007. Resultater gjøres kjent på http://studweb.ntnu.no/ og sensurtelefon
81548014.

Det er angitt i poeng hvor mye hver deloppgave teller ved sensur. Gjør nødvendige
antagelser der dette er nødvendig. Husk: korte og konsise svar er ofte de beste.

Lykke til!

Side 2 av 13

Oppgave 1 (30%) Multiple choice
Rett svar gir 2 poeng, feil svar vil gi -0.5 poeng. Flere avkryssinger på en oppgave gir 0
poeng. Bruk eget svarark på slutten av oppgavesettet.
1) Hvilken av disse påstandene om RISC er ikke sann?
a)
b)
c)
d)

RISC-maskiner har som regel flere registre enn CISC-maskiner.
RISC har som regel fast instruksjonslengde.
RISC har som regel flere adresseringsmodi enn CISC.
RISC har egne LOAD/STORE instruksjoner.

Svar: c)
2) Hvilket av disse typene er ikke en form for avbildning i hurtigbuffer (eng: cache)?
a)
b)
c)
d)

Sett-assosiativt avbildning
Direkte avbildning
Kummulativ avbilding
Fullt assosiativ avbildning

Svar: c)
3) Hva er hensikten med hurtigbuffer (eng: cache)?
a)
b)
c)
d)

Å øke minnekapasiteten til maskinen.
Å senke den gjennomsnittlige aksesstiden til minnet.
Å skille mellom instruksjoner og data
Å sørge for at alle prosessorer i en superdatamaskin har like data.

Svar: b)
4) Hvilket element er ikke en egenskap ved en seriell buss?
a)
b)
c)
d)

En seriell buss krever at enhetene har en felles klokke.
Overfører et bit om gangen.
Kan være raskere enn en parallell buss.
Benyttes av f.eks USB og Firewire.

Svar: a)
5) Hvilken av disse metodene er ikke en metode for å kontrollere I/O – enheter?
a)
b)
c)
d)

Avbruddstyrt I/O
Programstyrt I/O
Direct Memory Access (DMA)
Serielle registre

Svar: d)

Side 3 av 13

6) Organisasjonen av en prosessor deles ofte i:
a)
b)
c)
d)

Styreenhet og utførende enhet
Register og aritmetisk-logisk enhet (eng: ALU)
Minne og styreenhet
Register og minne

Svar: a)
7) Hvilket av disse utsagnene om minne er ikke sant?
a) Dynamisk RAM (DRAM) bruker kondensatorer for å lagre informasjon, og krever
derfor oppfriskning med jevne mellomrom
b) Statisk RAM (SRAM) bruker transistorer for å lagre informasjon, og krever derfor ikke
oppfriskning.
c) Statisk RAM bruker mindre areal enn dynamisk RAM per bit.
d) Dynamisk RAM er som oftest organisert i en matrise med kolonner og rader.
Svar: c)
8) Hvilken påstand om three-state buffer er ikke sann?
a) Three-state buffer brukes ofte i busser for å unngå at flere enheter driver bussen
samtidig.
b) Når et three-state buffer kobler en enhet av bussen kalles denne tilstanden for ’Z’.
c) Three-state buffer kan bare brukes på serielle busser.
d) Utgangen til et three-state buffer er enten 0,1 eller Z.
Svar: c)
9) Hvilken av disse påstandene er ikke sann om arbitrering?
a)
b)
c)
d)

Arbitrering styrer hvem som kan bruke bussen til enhver tid.
Arbitrering kan være sentral eller desentralisert.
”Daisy chaining” er en form for arbitrering.
Arbitrering er ikke nødvendig dersom bussen er asynkron.

Svar: d)
10) Vektorisert avbrudd vil si at:
a)
b)
c)
d)

At man har flere avbruddsrutiner, en for hvert avbrudd som kan komme.
At man bruker vektor-registre for å behandle avbruddet.
At avbruddshåndteringsrutinen får inn en vektor som første parameter.
Flere avbrudd bruker samme avbruddsrutine.

Svar: a)

Side 4 av 13
11) Hvilket utsagn om forgreningspredikering (eng: branch prediction) er ikke riktig?
a)
b)
c)
d)

Forgreningspredikering er bare viktig for mikrokontrollere.
Forgreningspredikering prøver å forutse om et hopp blir utført eller ikke.
Forgreningspredigering benytter seg ofte av historiebits.
Moderne forgreningspredikering er svært nøyaktig.

Svar: a)
12) Hvilken av disse påstandene er ikke sann om samlebånd?
a)
b)
c)
d)

Man kan benytte høyere klokkefrekvens med samlebånd enn uten.
Samlebånd krever at man tar spesielle hensyn til avhengigheter mellom instruksjoner.
Samlebåndet er bare så raskt som det tregeste steget i samlebåndet.
At en maskin bruker samlebånd må spesifiseres på ISA-nivå.

Svar: d)
13) Hva er det ISA ikke spesifiserer?
a)
b)
c)
d)

Hvilke mikroinstruksjoner som finnes
Hvilke registre som er tilgjengelig for programmereren..
Hvilke datatyper som skal støttes av maskinvaren.
Hvilke instruksjoner/opkoder som finnes.

Svar: a)
14) Hvilket av disse er ikke en adresseringsmodi?
a)
b)
c)
d)

Direkte adressering
Register adressering
Register-indirekte adressering
Hurtigbuffer (eng: cache) adressering

Svar: d)
15) Når man kaller en prosedyre kan man lagre returadressen på flere forskjellige måter.
Hvilken av disse metodene gir størst fleksibilitet?
a)
b)
c)
d)

Å lagre returadressen på stakken.
Å lagre returadressen i et spesielt register.
Å lagre returadressen i et spesielt minneområde.
Å lagre returadressen i et spesielt minneområde, et område for hver funksjon.

Svar: a)

Side 5 av 13

Oppgave 2 – Chip Multiprosessor (10% - 5% på a) og 5% på
b)
a) Nevn fire grunner til at flerkjerne prosessorer har blitt mer vanlig de siste årene
Svar:
1.
2.
3.
4.

Økende strømforbruk
Økende prosessor/minne gap
Økende designkompleksitet
Vanskelig å utnytte mer ILP (instruksjonsnivå parallellitet)

b) Hva vil det si at en chip MultiProsessor har heterogene kjerner?
Svar:
Heterogene kjerner vil si at kjernene er ulike. Dvs de har forskjellig instruksjonsett og/eller
ytelse.

Side 6 av 13

Oppgave 3 – IJVM (30% - a, b og d teller 5% hver, c teller
15%)
Nødvendige detaljer til IJVM finnes bakerst i eksamenssettet. Registrene til IJVM er som
følger (Alle tall er angitt på heksadesimal form):
SP = 0x0100, H = 0x03FF, TOS = 0x0001, OPC = 0xFFFF
a) Hva er den symbolske ekvivalenten til følgende mikroprogram?
Instruksjon 1:
Instruksjon 2:

00 110101 100000000 000 0100
00 111100 001000000 000 0111

Svar:
Instruksjon 1: H = SP + 1
Instruksjon 2: TOS = TOS + H
b) Hvilke verdier inneholder registrene over (SP,H, TOS og OPC) etter at de to
mikroinstruksjonen har kjørt?
Svar:
Etter instruksjon 1:
H = SP + 1 = 0x0100 + 1 = 0x0101
Etter instruksjon 2:
TOS = TOS + H = 0x0001 + 0x0101 = 0x102
Totalt:
SP = 0x0100, H = 0x0101, TOS = 0x102, OPC = 0xFFFF
c) En ung student ønsker å legge til en ny instruksjon til IJVM. Instruksjonen heter
IADDINC. IADDINC popper de to øverste elementene av stakken og summerer dem.
Deretter legger den til 1 til svaret og legger svaret på toppen av stakken. De to opprinlige
elementene blir borte.
Han skriver følgende mikroprogram:
iaddinc1 MAR = SP-1;rd
iaddinc2 H = TOS
iaddinc3 MDR = MDR + H + 1; wr: goto main1
Programmet inneholder imidlertid to feil. Hva er de, og hva vil du gjøre for å rette på dem?
Svar:
1) SP peker på elementet over toppen av stakken, og 2) TOS blir ikke oppdatert. En mulig
løsning vil være å endre programmet slik:

Side 7 av 13
iaddinc1 MAR = SP = SP-1;rd
iaddinc2 H = TOS
iaddinc3 MDR = TOS = MDR + H + 1; wr: goto main1

d) Denne typen maskin er relativt treg, nevn tre ting man kan gjøre for å øke ytelsen til
maskinen.
Svar:
Her er det mange muligheter, og flere riktige svar. Poeng gis for alle gode forslag
(superskalaritet osv). De tre mest nærliggende (og som blir vist i boken) er:
1. Instruction Fetch Unit – En enhet som henter instruksjoner og bufrer dem opp
slik at man selv slipper å gjøre det eksplisitt i mikrokoden.
2. A – buss. En ekstra buss som gjør at man kan legge et vilkårlig register på Ainngangen og ikke bare H.
3. Pipelining. Sett inn latcher foran ALU og etter ALU slik at datapath blir delt
opp i flere deler.

Oppgave 4 – Avhengigheter (15% - 5% på a) og 10% på b))
a) Hvilke typer avhengigheter har man mellom instruksjoner ?
Svar:
1. Sanne datavhengigheter (RAW). En foregående instruksjon skriver til et register som en
senere instruksjon leser.
2. Utavhengigheter (WAW). En foregående instruksjon skriver til samme register som en
senere instruksjon også skriver til.
3. Antiavhengigheter (WAR). En foregående instruksjon leser fra et register som en senere
instruksjon skriver til.
b) Gitt følgende kodesnutt:
I1:
I2:
I3:
I4:
I5:

Add
Mul
Sub
Div
Add

R2, R1, R0
R1, R4, R5
R6, R2, R1
R6, R0, R4
R6, R6, R1

Identifiser alle avhengigheter i kodesnutten, og angi typen avhengighet.
Svar:
Instruksjon 2: WAR til I1 (R1).
Instruksjon 3: RAW til I1 (R2), RAW til I2 (R1)
Instruksjon 4: WAW til I3 (R6)
Instruksjon 5: WAW til I4 (R6), WAW til I3 (R6), RAW til I4 (R6), RAW til I2 (R1)

Side 8 av 13

Oppgave 5 (15% - 7,5 % på hver)
a) Hva er forskjellen på 3-adresse instruksjoner, 2-adresse instruksjoner, 1-adresse
instruksjoner og 0-adresse instruksjoner? Gi kodeeksempler
Svar:
Forskjellen er i antall operander som er angitt eksplisitt. Eksempler:
3-adresse:
Add r1, r2, r3

; adderer r2 og r3 og legger svaret i r1

2-adresse
Cmp r1, r2

; sammenlikner r1 og r2

1-adresse
Jmp 0x100

; hopp til adresse 100

0-adresse
Return

; Returner fra prosedyrekall

b) Nevn fire forskjellige adresseringsmodi, og forklar hvordan de fungerer.
Svar:
Adresseringsmodi er beskrevet på side 360 i Tannenbaum. Kort liste:
•
•
•
•
•
•

Immediate Addressing
Direct Addressing
Register Addressing
Register Indirect Adressing
Indexed Addressing
Base-Indexed Addressing

Side 9 av 13

VEDLEGG – IJVM arkitektur

Side 10 av 13

Side 11 av 13

Side 12 av 13

Side 13 av 13

SVARARK – MULTIPLE CHOICE (Sett kryss)
Riv ut dette arket og lever det sammen med besvarelsen.
Oppgave
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

A)

B)

C)

D)

Side 1 av 11

NTNU
Norges teknisk-naturvitenskapelige
universitet

Fakultet for informasjonsteknologi,
matematikk og elektroteknikk
Institutt for datateknikk
og informasjonsvitenskap

BOKMÅL

AVSLUTTENDE EKSAMEN I
TDT4160
Datamaskiner Grunnkurs
Torsdag 29. November 2007
Kl. 09.00 – 13.00

Faglig kontakt under eksamen:
Marius Grannæs, tlf. 97005663

Hjelpemidler:
Kalkulator tillatt. Ingen trykte eller håndskrevne hjelpemidler tillatt.

Sensurdato:
20. Desember 2007. Resultater gjøres kjent på http://studweb.ntnu.no/ og sensurtelefon
81548014.

Det er angitt i poeng hvor mye hver deloppgave teller ved sensur. Gjør nødvendige
antagelser der dette er nødvendig. Husk: korte og konsise svar er ofte de beste.

Lykke til!

Side 2 av 11

Oppgave 1 (30%) Multiple choice
Rett svar gir 2 poeng, feil svar vil gi -0.5 poeng. Flere avkryssinger på en oppgave gir 0
poeng. Bruk eget svarark på slutten av oppgavesettet.
1) Hvilken av disse påstandene om RISC er ikke sann?
a)
b)
c)
d)

RISC-maskiner har som regel flere registre enn CISC-maskiner.
RISC har som regel fast instruksjonslengde.
RISC har som regel flere adresseringsmodi enn CISC.
RISC har egne LOAD/STORE instruksjoner.

2) Hvilket av disse typene er ikke en form for avbildning i hurtigbuffer (eng: cache)?
a)
b)
c)
d)

Sett-assosiativt avbildning
Direkte avbildning
Kummulativ avbilding
Fullt assosiativ avbildning

3) Hva er hensikten med hurtigbuffer (eng: cache)?
a)
b)
c)
d)

Å øke minnekapasiteten til maskinen.
Å senke den gjennomsnittlige aksesstiden til minnet.
Å skille mellom instruksjoner og data
Å sørge for at alle prosessorer i en superdatamaskin har like data.

4) Hvilket element er ikke en egenskap ved en seriell buss?
a)
b)
c)
d)

En seriell buss krever at enhetene har en felles klokke.
Overfører et bit om gangen.
Kan være raskere enn en parallell buss.
Benyttes av f.eks USB og Firewire.

5) Hvilken av disse metodene er ikke en metode for å kontrolle I/O – enheter?
a)
b)
c)
d)

Avbruddstyrt I/O
Programstyrt I/O
Direct Memory Access (DMA)
Serielle registre

6) Organisasjonen av en prosessor deles ofte i:
a)
b)
c)
d)

Styreenhet og utførende enhet
Register og aritmetisk-logisk enhet (eng: ALU)
Minne og styreenhet
Register og minne

Side 3 av 11

7) Hvilket av disse utsagnene om minne er ikke sant?
a) Dynamisk RAM (DRAM) bruker kondensatorer for å lagre informasjon, og krever
derfor oppfriskning med jevne mellomrom
b) Statisk RAM (SRAM) bruker transistorer for å lagre informasjon, og krever derfor ikke
oppfriskning.
c) Statisk RAM bruker mindre areal enn dynamisk RAM per bit.
d) Dynamisk RAM er som oftest organisert i en matrise med kolonner og rader.
8) Hvilken påstand om three-state buffer er ikke sann?
a) Three-state buffer brukes ofte i busser for å unngå at flere enheter driver bussen
samtidig.
b) Når et three-state buffer kobler en enhet av bussen kalles denne tilstanden for ’Z’.
c) Three-state buffer kan bare brukes på serielle busser.
d) Et three-state buffer har to tilstander: Tilkoblet og høy impedans.
9) Hvilken av disse påstandene er ikke sann om arbitrering?
a)
b)
c)
d)

Arbitrering styrer hvem som kan bruke bussen til enhver tid.
Arbitrering kan være sentral eller desentralisert.
”Daisy chaining” er en form for arbitrering.
Arbitrering er ikke nødvendig dersom bussen er asynkron.

10) Vektorisert avbrudd vil si at:
a)
b)
c)
d)

At man har flere avbruddsrutiner, en for hvert avbrudd som kan komme.
At man bruker vektor-registre for å behandle avbruddet.
At avbruddshåndteringsrutinen får inn en vektor som første parameter.
Flere avbrudd bruker samme avbruddsrutine.

11) Hvilket utsagn om forgreningspredikering (eng: branch prediction) er ikke riktig?
a)
b)
c)
d)

Forgreningspredikering er bare viktig for mikrokontrollere.
Forgreningspredikering prøver å forutse om et hopp blir utført eller ikke.
Forgreningspredigering benytter seg ofte av historiebits.
Moderne forgreningspredikering er svært nøyaktig.

12) Hvilken av disse påstandene er ikke sann om samlebånd?
a)
b)
c)
d)

Man kan benytte høyere klokkefrekvens med samlebånd enn uten.
Samlebånd krever at man tar spesielle hensyn til avhengigheter mellom instruksjoner.
Samlebåndet er bare så raskt som det tregeste steget i samlebåndet.
At en maskin bruker samlebånd må spesifiseres på ISA-nivå.

Side 4 av 11

13) Hva er det ISA ikke spesifiserer?
a)
b)
c)
d)

Hvilke mikroinstruksjoner som finnes
Hvilke registre som er tilgjengelig for programmereren..
Hvilke datatyper som skal støttes av maskinvaren.
Hvilke instruksjoner/opkoder som finnes.

14) Hvilket av disse er ikke en adresseringsmodi?
a)
b)
c)
d)

Direkte adressering
Register adressering
Register-indirekte adressering
Hurtigbuffer (eng: cache) adressering

15) Når man kaller en prosedyre kan man lagre returadressen på flere forskjellige måter.
Hvilken av disse metodene gir størst fleksibilitet?
a)
b)
c)
d)

Å lagre returadressen på stakken.
Å lagre returadressen i et spesielt register.
Å lagre returadressen i et spesielt minneområde.
Å lagre returadressen i et spesielt minneområde, et område for hver funksjon.

Oppgave 2 – Chip Multiprosessor (10% - 5% på a) og 5% på
b)
a) Nevn fire grunner til at flerkjerne prosessorer har blitt mer vanlig de siste årene
b) Hva vil det si at en chip MultiProsessor har heterogene kjerner?

Side 5 av 11

Oppgave 3 – IJVM (30% - a, b og d teller 5% hver, c teller
15%)
Nødvendige detaljer til IJVM finnes bakerst i eksamenssettet. Registrene til IJVM er som
følger (Alle tall er angitt på heksadesimal form):
SP = 0x0100, H = 0x03FF, TOS = 0x0001, OPC = 0xFFFF
a) Hva er den symbolske ekvivalenten til følgende mikroprogram?
Instruksjon 1:
Instruksjon 2:

00 110101 100000000 000 0100
00 111100 001000000 000 0111

b) Hvilke verdier inneholder registrene etter at de to mikroinstruksjonen har kjørt?
c) En ung student ønsker å skrive å legge til en ny instruksjon til IJVM. Instruksjonen heter
IADDINC. IADDINC popper de to øverste elementene av stakken og summerer dem.
Deretter legger den til 1 til svaret og legger svaret på toppen av stakken. De to opprinlige
elementene blir borte.
Han skriver følgende mikroprogram:
iaddinc1 MAR = SP-1;rd
iaddinc2 H = TOS
iaddinc3 MDR = MDR + H + 1; wr: goto main1
Programmet inneholder imidlertid to feil. Hva er de, og hva vil du gjøre for å rette på dem?
d) Denne typen maskin er relativt treg, nevn tre ting man kan gjøre for å øke ytelsen til
maskinen.

Oppgave 4 – Avhengigheter (15% - 5% på a) og 10% på b))
a) Hvilke typer avhengigheter har man mellom instruksjoner ?
b) Gitt følgende kodesnutt:
I1:
I2:
I3:
I4:
I5:

Add
Mul
Sub
Div
Add

R2, R1, R0
R1, R4, R5
R6, R2, R1
R6, R0, R4
R6, R6, R1

Identifiser alle avhengigheter i kodesnutten, og angi typen avhengighet.

Side 6 av 11

Oppgave 5 (15% - 7,5 % på hver)
a) Hva er forskjellen på 3-adresse instruksjoner, 2-adresse instruksjoner, 1-adresse
instruksjoner og 0-adresse instruksjoner? Gi kodeeksempler
b) Nevn fire forskjellige adresseringsmodi, og forklar hvordan de fungerer.

Side 7 av 11

VEDLEGG – IJVM arkitektur

Side 8 av 11

Side 9 av 11

Side 10 av 11

Side 11 av 11

SVARARK – MULTIPLE CHOICE (Sett kryss)
Riv ut dette arket og lever det sammen med besvarelsen.
Oppgave
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

A)

B)

C)

D)

Norwegian University of Science and Technology
Faculty of Information Technology, Mathematics and Electrical Engineering
The Department of Computer and Information Science

TDT4160
D ATAMASKINER GRUNNKURS
E KSAMEN
8. AUGUST, 2007, 09:00–13:00

Kontakt under eksamen:
Marius Grannæs 73590670
Tillatte hjelpemidler:
D.
Ingen trykte eller handskrivne hjelpemiddel er tillat.
Enkel godkjent kalkulator er tillete.
Målform:
Nynorsk
Viss ikkje anna er gitt tel deloppgåver likt.

Page 1 of 16

O PPGÅVE 1: D ATAMASKINER GENERELT (20%)
I Figur 1 er ei maskin med så kalla "Von Neumann architecture” frå
rundt 1945 skissert.
a. Forklar kort kva som var revolusjonerande med denne løysinga.

Figur 1: Von Neumann architecture.
b. Forklar kort kva oppgåve dei ulike delene i blokkskjemet har.
c. Kva skil verkemåten og prinsippa som von Neumann skisserte frå
moderne prosessorar?

O PPGÅVE 2: M IKROARKITEKTUR OG MIKROINSTRUK SJONAR (20% (5% PÅ A OG B ; 10% PÅ C ))
Bruk vedlagte diagram og tabellar for IJVM til å løyse oppgåvene.
a. Forklar funksjonen til Felta Addr og J (JAM) i MIR (MicroInstruction
Register).
b. IJVM sin styreeining nyttar "microprogram”. Ta utgangspunkt i skissa i Figur 4 og forklar kva som er karakteristisk ved denne løysinga.
Kva alternativ løysing eksisterar og kva karakteriserar eit mogleg alternativ?

Page 2 of 16

c. Register H inneheld hex(AA00).
Register TOS innheld hex(5500).
Register OPC innheld hex(A00A).
Register SP innheld hex(7FFF).
Kva ligg i register H, TOS, OPC og SP etter at dei to følgjande mikroinstruksjonane er utført?
Mikroinstruksjon 1: ALU: 010100, C: 100000000, Mem: 0, B: 0111
Mikroinstruksjon 2: ALU: 111100, C: 001000000, Mem: 0, B: 1000
Sjå vekk frå felta Addr og J i mikroinstruksjonsformatet.

O PPGÅVE 3: A UKE YTING (20%)
a. Kva tyder det at ein prosessor er superskalar?
b. Kva meinast med omgrepa instruksjonsnivåparallelitet og prosessornivåparallelitet?
c. Anta at ein prosessor har eit samleband med tre trinn som vist i Figur 2(a). Kvart trinn i samlebandet har ein gitt forsinking. I Figur 2(b)
er eit fem-trinns samleband vist med gitte trinn forsinkelsar. Kva er
maksimal klokkefrekvens for dei to samlebanda?
t = 20ns
t = 5ns

Stage 1

t = 25 ns

t = 5ns

t = 10ns

t = 5ns

t = 2.5ns

t = 5ns

t = 7.5ns

t = 5ns

Stage 2

Stage 3

Stage 1

Stage 2

Stage 3

Stage 4

Stage 5

(a) Samleband med tre
steg.

(b) Samleband med fem steg.

Figur 2: Samleband med gitt forsinking.

Page 3 of 16

O PPGÅVE 4: S UPERSKALARE PROSESSORAR OG C HIP M ULTI PROSESSORER (CMP) (10%)
a. Eit program som utfører fire operasjonar:
1 R3 = R3 * R5
2 R4 = R3 + 1
3 R3 = R5 + 1
4 R7 = R3 * R4
R(nummer) viser til registernummer. Identifiser og forklar dataavhengnadar i programmet skissert over.
b. Ein CMP kan ha heterogene eller homogene kjernar. Kva meinast
med dette?

Page 4 of 16

O PPGÅVE 5: D IVERSE (30% (10% PÅ A ; 4% PÅ B — F ))
I oppgåve b — f skal du ta stilling til om påstandane er korrekte eller ikkje.
Korrekte svar gir 4% utteljing, feil svar gir 2% straff. Veit ikkje (ikkje svar)
gir inga utteljing (eller straff).
a. I Figur 3 er EPROM, RAM og PIO kobla til ein felles buss. Alle einingane har aktivt lågt (logisk ”0”) CS (Chip Select) signal.
A0

A15

CS

CS

2K
EPROM

2K
RAM

CS
PIO

Figur 3: Adressedekoding.
Adresseområde for EPROM, RAM og PIO skal vere:
• EPROM: hex(0000) - hex(07FF)
• RAM: hex(8000) - hex (87FF)
• PIO: hex(C000) - hex(FFFF)
MEN det virkar ikkje som tenkt: Kva er feil i Figur 3 og kva kan gjerast
for at verkemåten skal verte korrekt?

Page 5 of 16

b. IJVM har ein multiplikasjonseining.
c. RISC-prosessorar nyttar ofte "hardwired” styreeining.
d. I eit ”scoreboard” kan ein lese ut antal gonger eit register er brukt
som kilde av instruksjonane som er "aktive” (under utføring).
e. IJVM har meir til felles med CISC enn RISC maskiner.
f. Ein versjon av prosessoren 8051 har multipleksa 8 bit databuss og 16
bit adressebuss. Denne versjonen av 8051 kan adressere 64KB minne.

Page 6 of 16

IJVM vedlegg

Page 7 of 16

Figur 4: Blokkdiagram (IJVM).
Page 8 of 16

Figur 5: Mikroinstruksjonsformat (IJVM).

Page 9 of 16

A NSWER K EY

FOR

Page 1 of 16

T HE E XAM

O PPGÅVE 1: D ATAMASKINER GENERELT (20%)
I Figur 1 er ei maskin med så kalla "Von Neumann architecture” frå
rundt 1945 skissert.
a. Forklar kort kva som var revolusjonerande med denne løysinga.
Answer: Viktigast: Programm er lagra i minne på lik linje med data,
stored program machine",også utførande og kontroll eining osv.
b. Forklar kort kva oppgåve dei ulike delene i blokkskjemet har.
Answer: • ALU gir seg sjølv
• Accumulator
• Input Output brukar/omgivelsar
• Control Unit FSM programm og data styrt
• Memory Data og Programm er lagra her
c. Kva skil verkemåten og prinsippa som von Neumann skisserte frå
moderne prosessorar?
Answer: Svært lite. Kan eventuelt vere data/programm organisering
(Hardward arkitektur)

O PPGÅVE 2: M IKROARKITEKTUR OG MIKROINSTRUK SJONAR (20% (5% PÅ A OG B ; 10% PÅ C ))
Bruk vedlagte diagram og tabellar for IJVM til å løyse oppgåvene.
a. Forklar funksjonen til Felta Addr og J (JAM) i MIR (MicroInstruction
Register).
Answer: • Addr: Addressa til mulig neste mikroinstruksjon.
• J: Bestemer korleis neste instruksjon vert velt (betinga hopp).
b. IJVM sin styreeining nyttar "microprogram”. Ta utgangspunkt i skissa i Figur 4 og forklar kva som er karakteristisk ved denne løysinga.
Kva alternativ løysing eksisterar og kva karakteriserar eit mogleg alternativ?
Answer:

• Microprogram: i prinsippe programmerbar, ein instruksjon bygd opp av microinstruksjonar lagra i eit minne. Instruksjonar innheld kontroll signal og adressa til neste mikroinstruksjon. Ein instruksjon angir adressa til fyrste mikroinstruksjon. OSV. enklare å lage kompliserte lange instruksjonar, ikkje så rask. CISC.
Page 2 of 16

• Hardwired: Maskinvare FSM og/eller kombinatorikk, rask,
logikk i maskinvare, best for enkle instruksjonar, fast implementasjon. RISC.

Page 3 of 16

c. Register H inneheld hex(AA00).
Register TOS innheld hex(5500).
Register OPC innheld hex(A00A).
Register SP innheld hex(7FFF).
Kva ligg i register H, TOS, OPC og SP etter at dei to følgjande mikroinstruksjonane er utført?
Mikroinstruksjon 1: ALU: 010100, C: 100000000, Mem: 0, B: 0111
Mikroinstruksjon 2: ALU: 111100, C: 001000000, Mem: 0, B: 1000
Sjå vekk frå felta Addr og J i mikroinstruksjonsformatet.
Answer: 1: Laste TOS inn i H ALU: 010100, C: 100000000, Mem: 0, B:
0111
2 addere H + OPC skriv til TOS ALU: 111100 (A+B) C: 001000000
(TOS) Mem: 000 (ingen mem opprasjon) B: 1000 (8 OPC)
•
•
•
•

H: hex(5500)
TOS: hex(F50A)
OPC: hex(A00A)
SP: hex(7FFF)

O PPGÅVE 3: A UKE YTING (20%)
(i) Kva tyder det at ein prosessor er superskalar?
Answer: Duplisering av CPU komponentar
(ii) Kva meinast med omgrepa instruksjonsnivåparallelitet og prosessornivåparallelitet?
Answer: Instruksjonsnivåparalelitet: ein prosessor utfører fleire
instruksjonar samstundes. Prosessornivåparalitet: fleire prosessorar utfører instruksjonar samstundes.
(iii) Anta at ein prosessor har eit samleband med tre trinn som vist
i Figur 2(a). Kvart trinn i samlebandet har ein gitt forsinking. I
Figur 2(b) er eit fem-trinns samleband vist med gitte trinn forsinkelsar. Kva er maksimal klokkefrekvens for dei to samlebanda?
Answer: 3 trinn: 1/10ns, 5 trinn: 1/7.5ns.

Page 4 of 16

O PPGÅVE 4: S UPERSKALARE PROSESSORAR OG C HIP
M ULTIPROSESSORER (CMP) (10%)
(i) Eit program som utfører fire operasjonar:
1
2
3
4

R3 = R3 * R5
R4 = R3 + 1
R3 = R5 + 1
R7 = R3 * R4

R(nummer) viser til registernummer. Identifiser og forklar dataavhengnadar i programmet skissert over.
Answer: Avhengighet:
WAR: (Antiavhengighet) Skriv-etter-les, I2 må lese R3 før verdien
blir overskrevet av I3
Problem hvis ein instruksjon skriv resultat før ein tidligare
får lest operandar
Ein CMP kan ha heterogene eller homogene kjernar. Kva meinast
med dette?
(ii) Answer: Ulike eller like kjerner på ein chip.

Page 5 of 16

O PPGÅVE 5: D IVERSE (30% (10% PÅ A ; 4% PÅ B —
F ))
I oppgåve b — f skal du ta stilling til om påstandane er korrekte eller
ikkje. Korrekte svar gir 4% utteljing, feil svar gir 2% straff. Veit ikkje
(ikkje svar) gir inga utteljing (eller straff).
(i) I Figur 3 er EPROM, RAM og PIO kobla til ein felles buss. Alle
einingane har aktivt lågt (logisk ”0”) CS (Chip Select) signal.
Adresseområde for EPROM, RAM og PIO skal vere:
• EPROM: hex(0000) - hex(07FF)
• RAM: hex(8000) - hex (87FF)
• PIO: hex(C000) - hex(FFFF)
MEN det virkar ikkje som tenkt: Kva er feil i Figur 3 og kva kan
gjerast for at verkemåten skal verte korrekt?
Answer: RAM og ROM har overlappande adresseområde. Fjern
2-inngangs OR krets i RAM adr-dekoding og bruk kun invertert A15. Figur ?? viser korleis rett adressedekoding kan sjå
ut.

Page 6 of 16

(ii) IJVM har ein multiplikasjonseining.
Answer: Nei, dette kan dei finne ut ved å sjå på ALU-tabellen i
Figur 6
(iii) RISC-prosessorar nyttar ofte "hardwired” styreeining.
Answer: Ja, i den forenkla verden her er dette svaret. RISC har
like lange enkle instruksjonar som gjer det mogleg å nytte
hardwired styreeining.
(iv) I eit ”scoreboard” kan ein lese ut antal gonger eit register er brukt
som kilde av instruksjonane som er "aktive” (under utføring).
Answer: Ja, ein del av felta i scoreboard skjema som er brukt som
eksempel i buka og forelest.
(v) IJVM har meir til felles med CISC enn RISC maskiner.
Answer: Ja, forskjelig lengde moglegheit, instruksjonar, med forskjelig antal klokke tiks, ikkje typisk RISC adresering.
(vi) Ein versjon av prosessoren 8051 har multipleksa 8 bit databuss og
16 bit adressebuss. Denne versjonen av 8051 kan adressere 64KB
minne.
Answer: Ja, 16 bit adr.buss gir 64kB minne (1 byte i kvar adr).

Page 7 of 16

IJVM vedlegg

Page 8 of 16

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 6: Funksjonstabell for ALU (IJVM).

Page 9 of 16

Figur 7: Timingdiagram (IJVM).

Figur 8: Von Neumann architecture.

Page 10 of 16

t = 20ns
t = 5ns

Stage 1

t = 25 ns

t = 5ns

t = 10ns

t = 5ns

t = 2.5ns

t = 5ns

t = 7.5ns

t = 5ns

Stage 2

Stage 3

Stage 1

Stage 2

Stage 3

Stage 4

Stage 5

(a) Samleband med tre
steg.

(b) Samleband med fem steg.

Figur 9: Samleband med gitt forsinking.

A0

A15

CS
2K
EPROM

CS
2K
RAM

Figur 10: Adressedekoding.

Page 11 of 16

CS
PIO

A0

A15

CS
2K
EPROM

CS
2K
RAM

CS
PIO

Figur 11: Adressedekoding slik som det skal vere utan overlapping. No er
adressedekodingen i samsvar med ønsket område for dei forskjelige einingane.

Page 12 of 16

Figur 12: Blokkdiagram (IJVM).
Page 13 of 16

Figur 13: Mikroinstruksjonsformat (IJVM).

Page 14 of 16

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 14: Funksjonstabell for ALU (IJVM).

Page 15 of 16

Figur 15: Timingdiagram (IJVM).

Page 16 of 16

Norwegian University of Science and Technology
Faculty of Information Technology, Mathematics and Electrical Engineering
The Department of Computer and Information Science

TDT4160
D ATAMASKINER GRUNNKURS
E KSAMEN
8. AUGUST, 2007, 09:00–13:00

Kontakt under eksamen:
Marius Grannæs 73590670
Tillatte hjelpemidler:
D.
Ingen trykte eller handskrivne hjelpemiddel er tillat.
Enkel godkjent kalkulator er tillete.
Målform:
Nynorsk
Viss ikkje anna er gitt tel deloppgåver likt.

Page 1 of 11

O PPGÅVE 1: D ATAMASKINER GENERELT (20%)
I Figur 1 er ei maskin med så kalla "Von Neumann architecture” frå
rundt 1945 skissert.
a. Forklar kort kva som var revolusjonerande med denne løysinga.

Figur 1: Von Neumann architecture.
b. Forklar kort kva oppgåve dei ulike delene i blokkskjemet har.
c. Kva skil verkemåten og prinsippa som von Neumann skisserte frå
moderne prosessorar?

O PPGÅVE 2: M IKROARKITEKTUR OG MIKROINSTRUK SJONAR (20% (5% PÅ A OG B ; 10% PÅ C ))
Bruk vedlagte diagram og tabellar for IJVM til å løyse oppgåvene.
a. Forklar funksjonen til Felta Addr og J (JAM) i MIR (MicroInstruction
Register).
b. IJVM sin styreeining nyttar "microprogram”. Ta utgangspunkt i skissa i Figur 4 og forklar kva som er karakteristisk ved denne løysinga.
Kva alternativ løysing eksisterar og kva karakteriserar eit mogleg alternativ?

Page 2 of 11

c. Register H inneheld hex(AA00).
Register TOS innheld hex(5500).
Register OPC innheld hex(A00A).
Register SP innheld hex(7FFF).
Kva ligg i register H, TOS, OPC og SP etter at dei to følgjande mikroinstruksjonane er utført?
Mikroinstruksjon 1: ALU: 010100, C: 100000000, Mem: 0, B: 0111
Mikroinstruksjon 2: ALU: 111100, C: 001000000, Mem: 0, B: 1000
Sjå vekk frå felta Addr og J i mikroinstruksjonsformatet.

O PPGÅVE 3: A UKE YTING (20%)
a. Kva tyder det at ein prosessor er superskalar?
b. Kva meinast med omgrepa instruksjonsnivåparallelitet og prosessornivåparallelitet?
c. Anta at ein prosessor har eit samleband med tre trinn som vist i Figur 2(a). Kvart trinn i samlebandet har ein gitt forsinking. I Figur 2(b)
er eit fem-trinns samleband vist med gitte trinn forsinkelsar. Kva er
maksimal klokkefrekvens for dei to samlebanda?
t = 20ns
t = 5ns

Stage 1

t = 25 ns

t = 5ns

t = 10ns

t = 5ns

t = 2.5ns

t = 5ns

t = 7.5ns

t = 5ns

Stage 2

Stage 3

Stage 1

Stage 2

Stage 3

Stage 4

Stage 5

(a) Samleband med tre
steg.

(b) Samleband med fem steg.

Figur 2: Samleband med gitt forsinking.

Page 3 of 11

O PPGÅVE 4: S UPERSKALARE PROSESSORAR OG C HIP M ULTI PROSESSORER (CMP) (10%)
a. Eit program som utfører fire operasjonar:
1 R3 = R3 * R5
2 R4 = R3 + 1
3 R3 = R5 + 1
4 R7 = R3 * R4
R(nummer) viser til registernummer. Identifiser og forklar dataavhengnadar i programmet skissert over.
b. Ein CMP kan ha heterogene eller homogene kjernar. Kva meinast
med dette?

Page 4 of 11

O PPGÅVE 5: D IVERSE (30% (10% PÅ A ; 4% PÅ B — F ))
I oppgåve b — f skal du ta stilling til om påstandane er korrekte eller ikkje.
Korrekte svar gir 4% utteljing, feil svar gir 2% straff. Veit ikkje (ikkje svar)
gir inga utteljing (eller straff).
a. I Figur 3 er EPROM, RAM og PIO kobla til ein felles buss. Alle einingane har aktivt lågt (logisk ”0”) CS (Chip Select) signal.
A0

A15

CS

CS

2K
EPROM

2K
RAM

CS
PIO

Figur 3: Adressedekoding.
Adresseområde for EPROM, RAM og PIO skal vere:
• EPROM: hex(0000) - hex(07FF)
• RAM: hex(8000) - hex (87FF)
• PIO: hex(C000) - hex(FFFF)
MEN det virkar ikkje som tenkt: Kva er feil i Figur 3 og kva kan gjerast
for at verkemåten skal verte korrekt?

Page 5 of 11

b. IJVM har ein multiplikasjonseining.
c. RISC-prosessorar nyttar ofte "hardwired” styreeining.
d. I eit ”scoreboard” kan ein lese ut antal gonger eit register er brukt
som kilde av instruksjonane som er "aktive” (under utføring).
e. IJVM har meir til felles med CISC enn RISC maskiner.
f. Ein versjon av prosessoren 8051 har multipleksa 8 bit databuss og 16
bit adressebuss. Denne versjonen av 8051 kan adressere 64KB minne.

Page 6 of 11

IJVM vedlegg

Page 7 of 11

Figur 4: Blokkdiagram (IJVM).
Page 8 of 11

Figur 5: Mikroinstruksjonsformat (IJVM).

Page 9 of 11

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 6: Funksjonstabell for ALU (IJVM).

Page 10 of 11

Figur 7: Timingdiagram (IJVM).

Page 11 of 11

Norwegian University of Science and Technology
Faculty of Information Technology, Mathematics and Electrical Engineering
The Department of Computer and Information Science

TDT4160
D ATAMASKINER GRUNNKURS
E KSAMEN
10. DESEMBER , 2008, 09:00–13:00

Kontakt under eksamen:
Gunnar Tufte 73590356
Tillatte hjelpemidler:
D.
Ingen trykte eller handskrivne hjelpemiddel er tillat.
Enkel godkjent kalkulator er tillete.
Målform:
Nynorsk

Page 1 of 21

O PPGÅVE 1: D IGITALT LOGISK NIVÅ (20% (10% PÅ A ,
5% PÅ B OG C ))
a. I Figur 1 er EPROM, RAM og ein lysdiode (LED) kobla til ein felles
buss. Finn adresseområde for einingane. EPROM og RAM har aktivt
lågt (logisk ”0”) CS (Chip Select) signal.
A0

Adressebuss

Mikrokontroller

A15

R/W
Data[7:0]

CS
R/W
D[7:0]

CS
R/W
D[7:0]

CS
R/W
D[7:0]

EPROM

RAM

RAM

Databuss

8

LED
D[7:0]

Figur 1: Adressedekoding.
b. Er det mogleg å utvide tilgjengeleg RAM med med 16kB (16384 bytes)? Grunngi svaret.
c. Når lyser lysdioden (LED)?

Page 2 of 21

O PPGÅVE 2: M IKROARKITEKTUR OG MIKROINSTRUK SJONAR (20% (5% PÅ A OG B ; 10% PÅ C ))
Bruk vedlagte diagram i figur 5, figur 6, figur 7 og figur 8 for IJVM til å
løyse oppgåvene.
a. Forklar funksjonen til registeret ”MPC”.
b. Lag mikroinstruksjon(ar) for følgjande IJVM-operasjon: last register
”OPC” med innhaldet i register ”H”.
Sjå vekk frå Addr- og J-felta i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 6.
c. Lag mikroinstruksjon(ar) for følgjande IJVM-operasjon:
TOS = LV + (OPC + 1).
Sjå vekk frå Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 6.

Page 3 of 21

O PPGÅVE 3: I NSTRUKSJONS S ETT A RKITEKTUR (ISA)(20%)
I ein tenkt 16 bit arkitektur har ein berre tre typar instruksjonar, last
(load), lagre (store) og flytt/ALU (Move/ALU). Figur 2 viser dei tre instruksjonstypane.
Load:
opCode

Ra

Rn

DC

15

0

Store:
opCode

Ra

Rn

DC

15

0

Move/ ALU:
opCode

Ra

Rb

Rc

4 bit

4 bit

4 bit

4 bit

15

0

Load:
Ra: points to memory location, any user register
Rn: data destination register, any user register
DC: Don’t Care, not in use
Store:
Ra: points to memory location, any user register
Rn: data source register, any user register
DC: Don’t Care, not in use
Move/ ALU::
Ra: destination register, any user register
Rb: source register, any user register
Rc: source register, any user register

Figur 2: Adressedekoding.
a. Utfrå tilgjengeleg informasjon:
i) Kva er det maksimale antal instruksjonar denne maskina kan
ha? grunngi svaret.
ii) Kva er det maksimale antal brukar register (user registers) denne
maskina kan ha?, grunngi svaret.
b. Kva type arkitektur er dette instruksjonsformatet for?
c. Viss ein endrar formatet for load/store til å bruke instruksjonsfeltet
merka DC til å innehalde ein index og brukar Ra som base adresse
har ein endra addreseringsmodi. Har dette nokon innvirknad på ISA
definisjonen for denne tenkte maskina? grunngi svaret.
d. Denne maskina er mest sansynleg ei RISC-maskin, kvifor?

Page 4 of 21

O PPGÅVE 4: D ATAMASKINER (20% (8% PÅ A OG C ; 4%
PÅ B ))
a. Figur 9 og figur 10 i vedlegg viser forskjelige versjonar av IJVMmikroarkitektur. Kva grep er gjort og korleis bidrag dei til auka ytelse
samanlikna med den opprinlege mikroarkitekturen i figur 5?
b. Kva innvirknad har endringane i mikroarkitekturen gitt i spørsmål a
på ISA-nivå?
c. Nytt figur 5, figure 8 og figure 10. Kva kan klokke tida tilnerma reduserast til ved å endre microarkitekturen frå implementasjonen i figur 5 til samlebandsimplementasjonen i figur 10?

O PPGÅVE 5: D IVERSE (20%)
Finn rett svar alternativ for oppgåvene. Korrekte svar gir 4% utteljing, feil
svar gir -2% og veit ikkje (ikkje svar, fleire svar) gir inga utteljing.
a. Kva ligg i Addr felte i MIR?, sjå figur 5
1) Adressa til neste mikroinstruksjon i control store.
2) Inneheld kunn gyldig adresse viss skal gjerast eit betinga hopp,
aktivt J-bit.
3) Til ei kvar tid ein kopi av innhalde i MBR.
4) control store start og slutt adresse, for aktiv mikroinstruksjon.
b. Kva påstand er korrekt for ein ein-brikke mulitiprosessorer (CMP) .
1) Er ein ”Array computer”.
2) Er type SIMD.
3) Er av type homogen eller hetrogen.
4) Er av type MIMD og nyttar alltid ein ”crossbar” for komunikasjon mellom prosessorkjernane.

Page 5 of 21

c. Kva er skisert i figur 3?
Ai Bi

Ci-1

Si

Ci

Figur 3: Mystisk dings.
1) Fulladder.
2) Halvadder.
3) Statisk RAM-celle.
4) Multipleksar.
d. Korleis er einingane i figur 4 prioritert? Nivå 1 (level 1) er prioritert
over nivå 2 (level 2). Rekkefølgja er gitt frå høgaste til lågaste.
Bus Request level 1

Arbiter

Arbiter

Bus Request level 2
GRANT level 2
GRANT level 1

1

2

3

4

1

2

3

4

Figur 4: Sentralisert bussarbitrering.
1) 1, 2, 3, 4
2) 2, 3, 1, 4.
3) 1, 4, 2, 3.
4) 3, 2, 4, 1.

Page 6 of 21

e. Under følgjer ein rekke påstandar om datamaskinkomponentar. Kva
påstand er korrekt?
1) Asynkrone bussoverføring må nytte ei global klokke.
2) Ein ALU som kan utføre addisjon og invertere kan utføre subtraksjon.
3) EPROM og flash-minne har ekvivalent funksjonalitet.
4) EEPROM og flash-minne har ekvivalent funksjonalitet.

Page 7 of 21

IJVM vedlegg

Page 8 of 21

Figur 5: Blokkdiagram (IJVM).
Page 9 of 21

Figur 6: Mikroinstruksjonsformat (IJVM).

Page 10 of 21

A NSWER K EY

FOR

Page 1 of 21

T HE E XAM

O PPGÅVE 1: D IGITALT LOGISK NIVÅ (20% (10% PÅ A ,
5% PÅ B OG C ))
a. I Figur 1 er EPROM, RAM og ein lysdiode (LED) kobla til ein felles
buss. Finn adresseområde for einingane. EPROM og RAM har aktivt
lågt (logisk ”0”) CS (Chip Select) signal.
Answer: Ved å bruke logikken som adresse dekoding finn ein følgjande adresse rom:
EPROM: hex(0000) - hex(3FFF) (16kB med EPROM)
RAM (1): hex(4000) - hex (7FFF) (16kB med RAM i modul 1)
RAM (2): hex(8000) - hex(BFFF) (16kB med RAM i modul 2, 32kB
med RAM totalt)
LED: hex(FFFF) (kunn ein adresse lokasjon er brukt til å adressere LED)
Eit alternativt svar som også vert rekna som korrekt er:
EPROM: hex(0000) - hex(3FFF)
RAM: hex(4000) - hex (BFFF)
LED: hex(FFFF)
Då reknar ein RAM som eit område på 32kB.
b. Er det mogleg å utvide tilgjengeleg RAM med med 16kB (16384 bytes)? Grunngi svaret.
Answer: Her er det to svar som gir korrekt svar:
1: Nei det er ikkje plass til 16kB. Det er kunn ledig plass frå
adresse C000 til FFFE. Dette gir eit ledigt adresseområde på 16383
byte. Dette er ein byte forlite (LED okkuperar siste adresse (FFFF).
2: Ja det er mulig å utvide med 16kB, MEN då vil LED og RAM
adresse overlappe ved adresering av adresse FFFF. Denne overlappinga har ikkje noko å seie for RAM aksess sidan LED-en
ikkje er kobla til databussen. For LED vil dette gjere at han ogs[
lyser når ein skriv til RAM-adresse FFFF
Pass på her, svaret vert ikkje rekna som korrekt viss ikkje ein
forklarar.
c. Når lyser lysdioden (LED)?
Answer: Når ein SKRIV til adresse hex(FFFF). Alle adresse linjene
må vere høge og R/W-signalet må vere høgt, altså W (write)

Page 2 of 21

O PPGÅVE 2: M IKROARKITEKTUR OG MIKROINSTRUK SJONAR (20% (5% PÅ A OG B ; 10% PÅ C ))
Bruk vedlagte diagram i figur 5, figur 6, figur 7 og figur 8 for IJVM til å
løyse oppgåvene.
a. Forklar funksjonen til registeret ”MPC”.
Answer: MicrProgramCounter peikar på microinstruksjon i ”control
store”. Ved start av instruksjonsutføring peikar MPC på fyrste
micro instruksjon i aktiv instruksjon. Updaterast med adressa til
neste micro instruksjon i instruksjonen, til alle micro instruksjonar i instruksjonen er utført (etter siste micro instruksjon set til
micro instruksjon for PC oppdatering.
Ved hoppinstruksjonar vert MPC manipulert for å kunne utføre
betingahopp (det eksisterar to alternativ for kva neste mikroinstruksjon er).
Sjå boka for utfølgjande info. Treng berre kva det er og at MPC
held orden på kva som er neste microinstruksjon i aktiv instruksjon for max utteljing.
b. Lag mikroinstruksjon(ar) for følgjande IJVM-operasjon: last register
”OPC” med innhaldet i register ”H”.
Sjå vekk frå Addr- og J-felta i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 6.
Answer: FIX ALU: 011000 (A) C: 010000000 (OPC) Mem: 000 (ingen
mem opprasjon) B: 1111 (15 (non), men alt går i B sidan ALU er
satt til kunn A inngang)
c. Lag mikroinstruksjon(ar) for følgjande IJVM-operasjon:
TOS = LV + (OPC + 1).
Sjå vekk frå Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 6.
Answer: 1: Laste LV eller OPC (eventuelt med + 1 option viss ikkje i
neste microopp.) inn i H ALU: 010100 (B) C: 100000000 (H) Mem:
000 (ingen mem opprasjon) B: 1000 (8 OPC)
2 addere H + LV + 1 skriv til TOS (A + B viss + 1 i forige)(eller
H + OPC viss LV i forrige). ALU: 111101 (A+B +1) C: 001000000
(TOS) Mem: 000 (ingen mem opprasjon) B: 0101 (5 LV)

Page 3 of 21

O PPGÅVE 3: I NSTRUKSJONS S ETT A RKITEKTUR (ISA)(20%)
I ein tenkt 16 bit arkitektur har ein berre tre typar instruksjonar, last
(load), lagre (store) og flytt/ALU (Move/ALU). Figur 2 viser dei tre instruksjonstypane.
a. Utfrå tilgjengeleg informasjon:
i) Kva er det maksimale antal instruksjonar denne maskina kan
ha? grunngi svaret.
ii) Kva er det maksimale antal brukar register (user registers) denne
maskina kan ha?, grunngi svaret.
Answer: i) Ser her at instruksjonslengden er fast (16 bit). opCode feltet er på 4 bit. Dette gjer at det er mulig å ha 2 4 altså 16 forskjelige
instruksjonar.
ii) Ser at kvart operandfelt også er 4 bit. Dette gjer at det er mogleg å adressera 24 register, altså 16. Sjølv om det er fleire felt for
operandar kan ein ikkje ha fleire register sidan alle operandar
skal kunne peike på ”any user register”.
b. Kva type arkitektur er dette instruksjonsformatet for?
Answer: Dette er ein typisk Load/store arkitektur, sjå boka for detaljar.
c. Viss ein endrar formatet for load/store til å bruke instruksjonsfeltet
merka DC til å innehalde ein index og brukar Ra som base adresse
har ein endra addreseringsmodi. Har dette nokon innvirknad på ISA
definisjonen for denne tenkte maskina? grunngi svaret.
Answer: Ja, nye instruksjonar, ny funksjonalitet. Dette endrar korleis
instruksjonar vert tolka slik at det resulterar i to forskjelige ISA
som ikkje er kompatible.
d. Denne maskina er mest sansynleg ei RISC-maskin, kvifor?
Answer: Load/store arkitektur, få korte, liklengde instruksjonar, mange general purpose register, dei fleste instruksjonar kan mest
sansynleg gjerast i ein klokke periode.

Page 4 of 21

O PPGÅVE 4: D ATAMASKINER (20% (8% PÅ A OG C ; 4%
PÅ B ))
a. Figur 9 og figur 10 i vedlegg viser forskjelige versjonar av IJVMmikroarkitektur. Kva grep er gjort og korleis bidrag dei til auka ytelse
samanlikna med den opprinlege mikroarkitekturen i figur 5?
Answer:Buss må ikkje altid gå gjennom H-reg viss to operandar i instruksjon, ferre microinstruksjonar.
IFU slepp bruke tid (microinst) på å hente instruksjonar.
Pipeline kan minke klokke perioden.
b. Kva innvirknad har endringane i mikroarkitekturen gitt i spørsmål a
på ISA-nivå?
Answer: I prinsippe ingen, men viss ein ser på ytelse så vil antal
klokke periodar for instruksjonar og den globale klokke frekvensen endre seg for dei forskjelige mikroarkitekturane. For pipline
designet kan det også vere nødvendigt å angi kva instruksjonar
som ikkje kan utførast etter kvar andre utan nop eller stalling av
pipline.
Viss ein svarar ingen er det nok for full utteljing.
c. Nytt figur 5, figure 8 og figure 10. Kva kan klokke tida tilnerma reduserast til ved å endre microarkitekturen frå implementasjonen i figur 5 til samlebandsimplementasjonen i figur 10?
Answer: Viss ein ser på kvar det er lagt inn latch-ar og studerar figure 8 ser ein at ALU tiden, dette er det tregaste trinne. Dette gjer
då at ein kan tilnærma setje klokkeperioden til ∆y.
Alternativt kan ein seie at ∆w + ∆x er det tregaste trinne. Kan då
setje dette til klokkeperiodetida.
Viss ein ser litt grovare på det kan ein ut frå figur 10 sjå at no er
operasjonar delt i tre deler der latch-ar står som buffer. Ein kan
då seie at det er mogleg å redusere til 1/3. Alle desse svara gir
full utteljing.

O PPGÅVE 5: D IVERSE (20%)
Finn rett svar alternativ for oppgåvene. Korrekte svar gir 4% utteljing,
feil svar gir -2% og veit ikkje (ikkje svar, fleire svar) gir inga utteljing.
(i) Kva ligg i Addr felte i MIR?, sjå figur 5
1) Adressa til neste mikroinstruksjon i control store.
Page 5 of 21

2) Inneheld kunn gyldig adresse viss skal gjerast eit betinga
hopp, aktivt J-bit.
3) Til ei kvar tid ein kopi av innhalde i MBR.
4) control store start og slutt adresse, for aktiv mikroinstruksjon.
Answer: 1
(ii) Kva påstand er korrekt for ein ein-brikke mulitiprosessorer (CMP)
.
1)
2)
3)
4)

Er ein ”Array computer”.
Er type SIMD.
Er av type homogen eller hetrogen.
Er av type MIMD og nyttar alltid ein ”crossbar” for komunikasjon mellom prosessorkjernane.

Answer: 3

Page 6 of 21

(iii) Kva er skisert i figur 3?
1)
2)
3)
4)

Fulladder.
Halvadder.
Statisk RAM-celle.
Multipleksar.

Answer: 1
(iv) Korleis er einingane i figur 4 prioritert? Nivå 1 (level 1) er prioritert over nivå 2 (level 2). Rekkefølgja er gitt frå høgaste til lågaste.
1) 1, 2, 3, 4
2) 2, 3, 1, 4.
3) 1, 4, 2, 3.
4) 3, 2, 4, 1.
Answer: 2

Page 7 of 21

(v) Under følgjer ein rekke påstandar om datamaskinkomponentar.
Kva påstand er korrekt?
1) Asynkrone bussoverføring må nytte ei global klokke.
2) Ein ALU som kan utføre addisjon og invertere kan utføre
subtraksjon.
3) EPROM og flash-minne har ekvivalent funksjonalitet.
4) EEPROM og flash-minne har ekvivalent funksjonalitet.
Answer: korrekt? 2

Page 8 of 21

IJVM vedlegg

Page 9 of 21

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 7: Funksjonstabell for ALU (IJVM).

Page 10 of 21

Figur 8: Timingdiagram (IJVM).

Page 11 of 21

Figur 9: Alternativ mikroarkitektur I.
Page 12 of 21

Figur 10: Alternativ mikroarkitektur II.
Page 13 of 21

A0

Adressebuss

Mikrokontroller

A15

CS
R/W
D[7:0]

CS
R/W
D[7:0]

CS
R/W
D[7:0]

EPROM

RAM

RAM

R/W
Data[7:0]

Databuss

LED
D[7:0]

8

Figur 11: Adressedekoding.

Load:
opCode

Ra

Rn

DC

15

0

Store:
opCode

Ra

Rn

DC

15

0

Move/ ALU:
opCode

Ra

Rb

Rc

4 bit

4 bit

4 bit

4 bit

15

0

Load:
Ra: points to memory location, any user register
Rn: data destination register, any user register
DC: Don’t Care, not in use
Store:
Ra: points to memory location, any user register
Rn: data source register, any user register
DC: Don’t Care, not in use
Move/ ALU::
Ra: destination register, any user register
Rb: source register, any user register
Rc: source register, any user register

Figur 12: Adressedekoding.

Page 14 of 21

Ai Bi

Ci-1

Si

Ci

Figur 13: Mystisk dings.

Bus Request level 1

Arbiter

Arbiter

Bus Request level 2
GRANT level 2
GRANT level 1

1

2

3

4

1

2

3

4

Figur 14: Sentralisert bussarbitrering.

Page 15 of 21

Figur 15: Blokkdiagram (IJVM).
Page 16 of 21

Figur 16: Mikroinstruksjonsformat (IJVM).

Page 17 of 21

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 17: Funksjonstabell for ALU (IJVM).

Page 18 of 21

Figur 18: Timingdiagram (IJVM).

Page 19 of 21

Figur 19: Alternativ mikroarkitektur I.
Page 20 of 21

Figur 20: Alternativ mikroarkitektur II.
Page 21 of 21

Norwegian University of Science and Technology
Faculty of Information Technology, Mathematics and Electrical Engineering
The Department of Computer and Information Science

TDT4160

D ATAMASKINER GRUNNKURS
E KSAMEN
10. DESEMBER , 2008, 09:00–13:00

Kontakt under eksamen:
Gunnar Tufte 73590356
Tillatne hjelpemidel:
D.
Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillatt.
Målform:
Bokmål

Page 1 of 14

O PPGAVE 1: D IGITALT LOGISK NIVÅ (20% (10% PÅ A ,
5% PÅ B OG C ))
a. I Figur 1 er EPROM, RAM og en lysdiode (LED) koblet til en felles
buss. Finn adresseområdet for enhetene. EPROM og RAM har aktivt
lavt (logisk ”0”) CS-signal (Chip Select).
A0

Adressebuss

Mikrokontroller

A15

R/W
Data[7:0]

CS
R/W
D[7:0]

CS
R/W
D[7:0]

CS
R/W
D[7:0]

EPROM

RAM

RAM

Databuss

8

LED
D[7:0]

Figur 1: Adressedekoding.
b. Er det mulig å utvide systemet med 16kB (16384 bytes) RAM? Begrunn svaret.
c. Når lyser lysdioden (LED)?

Page 2 of 14

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJO NER (20% (5% PÅ A OG B ; 10% PÅ C ))
Bruk vedlagte diagram i figur 5, figur 6, figur 7 og figur 8 for IJVM til å løse
oppgavene.
a. Forklar funksjonen til registeret ”MPC”.
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register
”OPC” med innholdet i register ”H”.
Se vekk fra Addr- og J-felta i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 6.
c. Lag mikroinstruksjon(er) for følgende IJVM-operasjon:
TOS = LV + (OPC + 1).
Se vekk fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 6.

Page 3 of 14

O PPGAVE 3: I NSTRUKSJONSSETT A RKITEKTUR (ISA)(20%)
I en tenkt 16-bit arkitektur har en bare tre typer instruksjoner, last (load),
lagre (store) og flytt/ALU (Move/ALU). Figur 2 viser de tre instruksjonstypene.
Load:
opCode

Ra

Rn

DC

15

0

Store:
opCode

Ra

Rn

DC

15

0

Move/ ALU:
opCode

Ra

Rb

Rc

4 bit

4 bit

4 bit

4 bit

15

0

Load:
Ra: points to memory location, any user register
Rn: data destination register, any user register
DC: Don’t Care, not in use
Store:
Ra: points to memory location, any user register
Rn: data source register, any user register
DC: Don’t Care, not in use
Move/ ALU::
Ra: destination register, any user register
Rb: source register, any user register
Rc: source register, any user register

Figur 2: Mulige instruksjonstyper.
a. Ut fra tilgjengelig informasjon:
i) Hva er det maksimale antall instruksjoner denne maskinen kan
ha? Begrunn svaret.
ii) Hva er det maksimale antall brukerregistere (user registers) denne maskinen kan ha? Begrunn svaret.
b. Hvilken type arkitektur er dette instruksjonsformatet for?
c. Hvis man endrer formatet for load/store til å bruke instruksjonsfeltet
merket DC til å inneholde en indeks og bruker Ra som baseadresse, har man endret adresseringsmodi. Har dette noen innvirkning på
ISA-definisjonen for denne tenkte maskinen? Begrunn svaret.
d. Denne maskinen er mest sannsynlig en RISC-maskin. Hvorfor?

Page 4 of 14

O PPGAVE 4: D ATAMASKINER (20% (8% PÅ A OG C ; 4%
PÅ B ))
a. Figur 9 og figur 10 i vedlegget viser forskjellige versjoner av IJVMmikroarkitekturer. Hvilke grep er gjort og hvordan bidrar de til å øke
ytelsen sammenliknet med den opprinnelige mikroarkitekturen i figur 5?
b. Hvilken innvirkning har endringene i mikroarkitekturen gitt i spørsmål ”a” på ISA-nivå?
c. Bruk figur 5, figur 8 og figur 10: Ca. hvor mye kan klokkeperioden
reduseres ved å endre mikroarkitekturen fra figur 5 til figur 10?

O PPGAVE 5: D IVERSE (20%)
Finn riktig svaralternativ for oppgavene. Korrekte svar gir 4% uttelling, feil
svar gir -2% og vet ikke (ikke svar/flere svar) gir ingen utteling.
a. Hva ligg i Addr-feltet i MIR? Se figur 5
1) Adressen til neste mikroinstruksjon i control store.
2) Inneholder kun gyldig adresse hvis det skal gjøres et betinget
hopp, aktivt J-bit.
3) Til en hver tid en kopi av innholdet i MBR.
4) control store start- og sluttadresse, for aktiv mikroinstruksjon.
b. Hvilken påstand er korrekt for en en-brikke mulitiprosessorer (CMP)
.
1) Er en ”Array computer”.
2) Er type SIMD.
3) Er av type homogen eller heterogen.
4) Er av type MIMD og benytter alltid en ”crossbar” for kommunikasjon mellom prosessorkjernene.

Page 5 of 14

c. Hva er skissert i figur 3?
Ai Bi

Ci-1

Si

Ci

Figur 3: Mystisk dings.
1) Full-adder.
2) Halv-adder.
3) Statisk RAM-celle.
4) Multiplekser.
d. Hvordan er enhetene i figur 4 prioritert? Nivå 1 (level 1) er prioritert
over nivå 2 (level 2). Rekkefølgen er gitt fra høyeste til laveste.
Bus Request level 1

Arbiter

Arbiter

Bus Request level 2
GRANT level 2
GRANT level 1

1

2

3

4

1

2

3

4

Figur 4: Sentralisert bussarbitrering.
1) 1, 2, 3, 4
2) 2, 3, 1, 4.
3) 1, 4, 2, 3.
4) 3, 2, 4, 1.

Page 6 of 14

e. Under følger en rekke påstander om datamaskinkomponenter. Hvilken påstand er korrekt?
1) Asynkron bussoverføring må bruke en global klokke.
2) En ALU som kan utføre addisjon og invertere kan utføre subtraksjon.
3) EPROM og flash-minne har ekvivalent funksjonalitet.
4) EEPROM og flash-minne har ekvivalent funksjonalitet.

Page 7 of 14

IJVM vedlegg

Page 8 of 14

Figur 5: Blokkdiagram (IJVM).
Page 9 of 14

Figur 6: Mikroinstruksjonsformat (IJVM).

Page 10 of 14

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 7: Funksjonstabell for ALU (IJVM).

Page 11 of 14

Figur 8: Timing-diagram (IJVM).

Page 12 of 14

Figur 9: Alternativ mikroarkitektur I.
Page 13 of 14

Figur 10: Alternativ mikroarkitektur II.
Page 14 of 14

Norwegian University of Science and Technology
Faculty of Information Technology, Mathematics and Electrical Engineering
The Department of Computer and Information Science

TDT4160
D ATAMASKINER GRUNNKURS
E KSAMEN
A UGUST, 2008, 09:00–13:00

Kontakt under eksamen:
Morten Hartmann 73593680
Tillatte hjelpemidler:
D.
Ingen trykte eller håndskrevne hjelpemiddel er tillat.
Enkel godkjent kalkulator er tillat.
Målform:
Bokmål

Page 1 of 16

O PPGAVE 1: D ATAMASKINER (30% ( A OG B 2.5%, C OG
D 10% OG E 5%))
Figur 1 viser en skisse av et system bestående av en mikrokontroller, EPROM,
RAM og PIO. Kontroll signalet CS (Chip Select) er aktiv lav (logisk ”0”).
Data leses fra enhetene ved aktiv lav Read/Write (R/W) og skrives til enhetene ved aktivt høyt R/W-signal.
A0

Adressebuss

Mikrokontroller

A15

A[15:0]

R/W
Data[7:0]

CS
R/W
D[7:0]

A[15:0]
CS
R/W
D[7:0]

A[15:0]
CS
R/W
D[7:0]

EPROM

RAM

PIO

Databuss

8

Figur 1: Adressedekoding.
a. Hva vil typisk være funksjonen til EPROM, RAM og PIO i det skisserte mikrokontrollersystemet?
b. Bruker det skisserte systemet dedikert adressebuss og databuss eller
en multiplekset adresse/data buss? Begrunn svaret kort.
c. Finn adresseområde for EPROM, RAM og PIO.
d. Det er ønskelig å doble antall eksterne PIO-enheter. Er dette mulig
uten å endre på adresseringen til EPROM og RAM? Viss mulig, hvordan kan en modifisere systemet for å realisere en slik dobling av antall
PIO-enheter?
Page 2 of 16

Figur 2: Von Neumann arkitektur.
e. I Figur 2 er en maskin med såkalt "Von Neumann arkitektur” fra
rundt 1945 skissert.
Forklar kort hvordan de forskjellige enhetene i Figur 1 forholder seg
til von Neumann sin arkitektur.

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJO NER (30% ( A OG B 2.5%, C 5% OG D OG E 10%))
Bruk vedlagte diagram og tabeller for IJVM til å løse oppgavene.
a. Er det mulig å addere to operander som befinner seg i eksternt minne
i en IJVM-mikroinstruksjon? Begrunn svaret kort.
b. Hva er funksjonen til registrene MAR og MDR?
c. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register
”H” med innholdet i register MDR - 1.
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B (se Figur 5).
d. Lag mikroinstruksjon(er) for følgende IJVM-operasjon:
TOS = TOS + (MDR + 1).
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B (se Figur 5).
e. Kan resultatet av å utføre mikroinstruksjonene i oppgave c og d medføre at N og/eller Z flagg aktiveres? Begrunn svaret kort.
Page 3 of 16

O PPGAVE 3: F ORBEDRE YTELSEN (20%)
a. Gi en kort oppsummering av fordelene med en-brikke mulitiprosessorer (CMP).
b. Gi en kort oppsummering av eventuelle utfordringer med en-brikke
mulitiprosessorer.
c. Anta at en prosessor har et samlebånd med tre trinn som vist i Figur 3(a). I Figur 3(b) er et fem-trinns samlebånd vist. Hva skjer med
ytelsen viss en endrer antall trinn i samlebåndet fra tre til fem? Begrunn svaret kort.
t = 5ns

t = 5ns

t = 10ns

t = 2.5ns

t = 2.5ns

t = 2.5ns

t = 3.5ns

t = 10ns

Stage 1

Stage 2

Stage 3

Stage 1

Stage 2

Stage 3

Stage 4

Stage 5

(a) Samlebånd med tre
trinn.

(b) Samlebånd med fem trinn.

Figur 3: Samlebånd med angitt forsinkelse.

d. Superskalare prosessorer øker ytelsen ved å duplisere CPU-komponenter
(økt instruksjonsnivåparallellitet). Det er en dyr løsning. Hva kan gjøres for å redusere kostnaden og samtidig bevare prinsippet bak superskalare prosessorer?

Page 4 of 16

O PPGAVE 4: D IVERSE (20%)
Ta stilling til påstandene. Korrekte svar gir 4% uttelling, feil svar gir -2% og
vet ikke (ikke svar) gir 0%.
a. Hvilken påstand er korrekt for en prosessor som benytter multiplekset adresse/data buss?
1 Krever mindre I/O-pinner enn en løsning med dedikerte busser.
2 Kan adressere mindre data enn en prosessor med dedikerte busser.
3 Kan ikke benytte samlebånd siden instruksjoner og data benytter felles buss for henting av data og instruksjoner
4 Antall bit til adressering er lik antall bit for instruksjoner/data.
b. Hvilken påstand er korrekt for instruksjoner som benytter "immediate"adressering .
1 Operanden kan kun angir adresse til CPU-en sit nærmeste ("immediate") lagernivå (register).
2 Opperanden kan kun adressere data som ligger i hurtigbufferet.
3 Operanden kan kun brukes til konstanter, verdien er gitt ved
kompilering.
4 Immediate adressering er effektivt for globale variabler.
c. Hvilken påstand hører ikke til i nivået for instruksjonsetarkitektur?
1 Første nivå tilgjengelig for bruker.
2 Opprinnelig det eneste nivået.
3 Inkluderer støtte for flere program og virtuelt minne.
4 Grense mellom maskinvare og programvare.
d. Hvilken påstand om parallelle maskiner er ikke korrekt?
1 Forskjellen på SIMD array-maskiner og MIMD multiprosessormaskiner er kun gitt av hvordan minne er organisert.
2 RISC prosessorer kan være superscalare.
3 CISC prosessorer kan være superscalare.
4 I en MIMD multiprosessormaskin med delt hovedlager er bussen en flaskehals.

Page 5 of 16

e. Under følger en rekke påstander om datamaskinkomponenter. Hvilken påstand er ikke korrekt?
1 Three-state buffer har to tilstander: tilkoplet eller høy impedans.
2 Three-state buffer har tre tilstander: logisk "1", logisk "0” eller
høy impedans (z).
3 I en EPROM må alt innhold slettes for å kunne oppdatere innholde.
4 PCI Express benytter punkt-til-punkt kommunikasjon.

Page 6 of 16

IJVM vedlegg

Page 7 of 16

Figur 4: Blokkdiagram (IJVM).
Page 8 of 16

Figur 5: Mikroinstruksjonsformat (IJVM).

Page 9 of 16

A NSWER K EY

FOR

Page 1 of 16

T HE E XAM

O PPGAVE 1: D ATAMASKINER (30% ( A OG B 2.5%, C OG
D 10% OG E 5%))
Figur 1 viser en skisse av et system bestående av en mikrokontroller, EPROM,
RAM og PIO. Kontroll signalet CS (Chip Select) er aktiv lav (logisk ”0”).
Data leses fra enhetene ved aktiv lav Read/Write (R/W) og skrives til enhetene ved aktivt høyt R/W-signal.
a. Hva vil typisk være funksjonen til EPROM, RAM og PIO i det skisserte mikrokontrollersystemet?
Answer: EPROM: lagre programmet (programminne).
RAM: lagre data (dataminne).
PIO: I/O til eksterne parallelle enheter.
b. Bruker det skisserte systemet dedikert adressebuss og databuss eller
en multiplekset adresse/data buss? Begrunn svaret kort.
Answer: Dedikerte busser, det er ingen adresse/data latch i figuren.
c. Finn adresseområde for EPROM, RAM og PIO.
Answer: EPROM: hex(0000) - hex(07FF)
RAM: hex(8000) - hex (87FF)
PIO: hex(FFFC) - hex(FFFF)
d. Det er ønskelig å doble antall eksterne PIO-enheter. Er dette mulig
uten å endre på adresseringen til EPROM og RAM? Viss mulig, hvordan kan en modifisere systemet for å realisere en slik dobling av antall
PIO-enheter?
Answer: Det er mulig. Det er ubrukt adresserom fra adresse hex(8800)
til hex(FFFB).
Enkleste løsning er å fjerne linjen A2 fra PIO adressedekoding.
Utvider da PIO-adresserom til hex(FFF8) - hex(FFFF). Øker da
fra 4 til 8 PIO-enheter.
e. I Figur 2 er en maskin med såkalt "Von Neumann arkitektur” fra
rundt 1945 skissert.
Forklar kort hvordan de forskjellige enhetene i Figur 1 forholder seg
til von Neumann sin arkitektur.
Answer: Memory: EPROM og RAM.
Input/output: PIO.
CTRL og ALU: mikrokontroller.
Page 2 of 16

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJO NER (30% ( A OG B 2.5%, C 5% OG D OG E 10%))
Bruk vedlagte diagram og tabeller for IJVM til å løse oppgavene.
a. Er det mulig å addere to operander som befinner seg i eksternt minne
i en IJVM-mikroinstruksjon? Begrunn svaret kort.
Answer: Nei. En av operandene må over i H registeret.
b. Hva er funksjonen til registrene MAR og MDR?
Answer: MAR: inneholder adresse til eksternt minne.
MDR: inneholder data til/fra eksternt minne.
c. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register
”H” med innholdet i register MDR - 1.
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B (se Figur 5).
Answer: ALU: 110110 (B - 1) C: 100000000 (H) Mem: 000 (ingen mem
opprasjon) B: 0000 (0 MDR)
d. Lag mikroinstruksjon(er) for følgende IJVM-operasjon:
TOS = TOS + (MDR + 1).
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B (se Figur 5).
Answer: 1: Laste TOS inn i H ALU: 010100 (B) C: 100000000 (H) Mem:
000 (ingen mem opprasjon) B: 0111 (7 TOS)
2: addere H + MDR skriv til TOS ALU: 111101 (A+B+1) C: 001000000
(TOS) Mem: 000 (ingen mem opprasjon) B: 1000 (0 MDR)
eller MDR kan lastast i H i fyrste opperasjon og TOS + H i andre
operasjon.
e. Kan resultatet av å utføre mikroinstruksjonene i oppgave c og d medføre at N og/eller Z flagg aktiveres? Begrunn svaret kort.
Answer: Z flagg aktivert viss resultat er 0.
N flagg aktivert viss resultat er negativt

O PPGAVE 3: F ORBEDRE YTELSEN (20%)
a. Gi en kort oppsummering av fordelene med en-brikke mulitiprosessorer (CMP).
Page 3 of 16

1 Tilgjengeleg ILP (Instruction Level Parallelism) i instruksjonsstraummen er avgrensa
2 Ein-kjerneprosessorar har ofte høgt effektforbruk.
3 Ein moderne ein-kjerneprosessor er svært kompleks og difor dyr å utvikle.

Answer:

b. Gi en kort oppsummering av eventuelle utfordringer med en-brikke
mulitiprosessorer.
Answer: Krever støtte i programmvare som kan utnytte flere prosessor kjerner.
Se forelesings notater for utfyllande informasjon.
c. Anta at en prosessor har et samlebånd med tre trinn som vist i Figur 3(a). I Figur 3(b) er et fem-trinns samlebånd vist. Hva skjer med
ytelsen viss en endrer antall trinn i samlebåndet fra tre til fem? Begrunn svaret kort.
Answer: Klokka bestemes av tregeste trinn (10ns) det er ikkje mulig å
auke ytelsen ved å auke klokke frekvensen. Fem trinn vill bruke
lengre tid på å tommes og fylles.
d. Superskalare prosessorer øker ytelsen ved å duplisere CPU-komponenter
(økt instruksjonsnivåparallellitet). Det er en dyr løsning. Hva kan gjøres for å redusere kostnaden og samtidig bevare prinsippet bak superskalare prosessorer?
Answer: Duplisere kunn mest tidkrevende trinn (feks utførende som
i Pentium II).

Page 4 of 16

O PPGAVE 4: D IVERSE (20%)
Ta stilling til påstandene. Korrekte svar gir 4% uttelling, feil svar gir -2% og
vet ikke (ikke svar) gir 0%.
a. Hvilken påstand er korrekt for en prosessor som benytter multiplekset adresse/data buss?
1 Krever mindre I/O-pinner enn en løsning med dedikerte busser.
2 Kan adressere mindre data enn en prosessor med dedikerte busser.
3 Kan ikke benytte samlebånd siden instruksjoner og data benytter felles buss for henting av data og instruksjoner
4 Antall bit til adressering er lik antall bit for instruksjoner/data.
Answer: 1
b. Hvilken påstand er korrekt for instruksjoner som benytter "immediate"adressering .
1 Operanden kan kun angir adresse til CPU-en sit nærmeste ("immediate") lagernivå (register).
2 Opperanden kan kun adressere data som ligger i hurtigbufferet.
3 Operanden kan kun brukes til konstanter, verdien er gitt ved
kompilering.
4 Immediate adressering er effektivt for globale variabler.
Answer: 3
c. Hvilken påstand hører ikke til i nivået for instruksjonsetarkitektur?
1 Første nivå tilgjengelig for bruker.
2 Opprinnelig det eneste nivået.
3 Inkluderer støtte for flere program og virtuelt minne.
4 Grense mellom maskinvare og programvare.
Answer: 3
d. Hvilken påstand om parallelle maskiner er ikke korrekt?
1 Forskjellen på SIMD array-maskiner og MIMD multiprosessormaskiner er kun gitt av hvordan minne er organisert.
2 RISC prosessorer kan være superscalare.
Page 5 of 16

3 CISC prosessorer kan være superscalare.
4 I en MIMD multiprosessormaskin med delt hovedlager er bussen en flaskehals.
Answer: 1

Page 6 of 16

e. Under følger en rekke påstander om datamaskinkomponenter. Hvilken påstand er ikke korrekt?
1 Three-state buffer har to tilstander: tilkoplet eller høy impedans.
2 Three-state buffer har tre tilstander: logisk "1", logisk "0” eller
høy impedans (z).
3 I en EPROM må alt innhold slettes for å kunne oppdatere innholde.
4 PCI Express benytter punkt-til-punkt kommunikasjon.
Answer: 2

Page 7 of 16

IJVM vedlegg

Page 8 of 16

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 6: Funksjonstabell for ALU (IJVM).

Page 9 of 16

Figur 7: Timingdiagram (IJVM).

Page 10 of 16

A0

Adressebuss

Mikrokontroller

A15

A[15:0]

R/W
Data[7:0]

CS
R/W
D[7:0]

A[15:0]
CS
R/W
D[7:0]

A[15:0]
CS
R/W
D[7:0]

EPROM

RAM

PIO

Databuss

8

Figur 8: Adressedekoding.

Figur 9: Von Neumann arkitektur.

Page 11 of 16

t = 5ns

t = 5ns

t = 10ns

t = 2.5ns

t = 2.5ns

t = 2.5ns

t = 3.5ns

t = 10ns

Stage 1

Stage 2

Stage 3

Stage 1

Stage 2

Stage 3

Stage 4

Stage 5

(a) Samlebånd med tre
trinn.

(b) Samlebånd med fem trinn.

Figur 10: Samlebånd med angitt forsinkelse.

Page 12 of 16

Figur 11: Blokkdiagram (IJVM).
Page 13 of 16

Figur 12: Mikroinstruksjonsformat (IJVM).

Page 14 of 16

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 13: Funksjonstabell for ALU (IJVM).

Page 15 of 16

Figur 14: Timingdiagram (IJVM).

Page 16 of 16

Norwegian University of Science and Technology
Faculty of Information Technology, Mathematics and Electrical Engineering
The Department of Computer and Information Science

TDT4160

D ATAMASKINER GRUNNKURS
E KSAMEN
A UGUST, 2008, 09:00–13:00

Kontakt under eksamen:
Marius Grannæs 97005663
Tillatte hjelpemidler:
D.
Ingen trykte eller håndskrevne hjelpemiddel er tillat.
Enkel godkjent kalkulator er tillat.
Målform:
Bokmål

Page 1 of 11

O PPGAVE 1: D ATAMASKINER (30% ( A OG B 2.5%, C OG
D 10% OG E 5%))
Figur 1 viser en skisse av et system bestående av en mikrokontroller, EPROM,
RAM og PIO. Kontroll signalet CS (Chip Select) er aktiv lav (logisk ”0”).
Data leses fra enhetene ved aktiv lav Read/Write (R/W) og skrives til enhetene ved aktivt høyt R/W-signal.
A0

Adressebuss

Mikrokontroller

A15

A[15:0]

R/W
Data[7:0]

CS
R/W
D[7:0]

A[15:0]
CS
R/W
D[7:0]

A[15:0]
CS
R/W
D[7:0]

EPROM

RAM

PIO

Databuss

8

Figur 1: Adressedekoding.
a. Hva vil typisk være funksjonen til EPROM, RAM og PIO i det skisserte mikrokontrollersystemet?
b. Bruker det skisserte systemet dedikert adressebuss og databuss eller
en multiplekset adresse/data buss? Begrunn svaret kort.
c. Finn adresseområde for EPROM, RAM og PIO.
d. Det er ønskelig å doble antall eksterne PIO-enheter. Er dette mulig
uten å endre på adresseringen til EPROM og RAM? Viss mulig, hvordan kan en modifisere systemet for å realisere en slik dobling av antall
PIO-enheter?
Page 2 of 11

Figur 2: Von Neumann arkitektur.
e. I Figur 2 er en maskin med såkalt "Von Neumann arkitektur” fra
rundt 1945 skissert.
Forklar kort hvordan de forskjellige enhetene i Figur 1 forholder seg
til von Neumann sin arkitektur.

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJO NER (30% ( A OG B 2.5%, C 5% OG D OG E 10%))
Bruk vedlagte diagram og tabeller for IJVM til å løse oppgavene.
a. Er det mulig å addere to operander som befinner seg i eksternt minne
i en IJVM-mikroinstruksjon? Begrunn svaret kort.
b. Hva er funksjonen til registrene MAR og MDR?
c. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register
”H” med innholdet i register MDR - 1.
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B (se Figur 5).
d. Lag mikroinstruksjon(er) for følgende IJVM-operasjon:
TOS = TOS + (MDR + 1).
Se bort fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B (se Figur 5).
e. Kan resultatet av å utføre mikroinstruksjonene i oppgave c og d medføre at N og/eller Z flagg aktiveres? Begrunn svaret kort.
Page 3 of 11

O PPGAVE 3: F ORBEDRE YTELSEN (20%)
a. Gi en kort oppsummering av fordelene med en-brikke mulitiprosessorer (CMP).
b. Gi en kort oppsummering av eventuelle utfordringer med en-brikke
mulitiprosessorer.
c. Anta at en prosessor har et samlebånd med tre trinn som vist i Figur 3(a). I Figur 3(b) er et fem trinns samlebånd vist. Hva skjer med
ytelsen viss en endrer antall trinn i samlebåndet fra tre til fem? Begrunn svaret kort.
t = 5ns

t = 5ns

t = 10ns

t = 2.5ns

t = 2.5ns

t = 2.5ns

t = 3.5ns

t = 10ns

Stage 1

Stage 2

Stage 3

Stage 1

Stage 2

Stage 3

Stage 4

Stage 5

(a) Samlebånd med tre
trinn.

(b) Samlebånd med fem trinn.

Figur 3: Samlebånd med angitt forsinkelse.

d. Superskalare prosessorer øker ytelsen ved å duplisere CPU-komponenter
(økt instruksjonsnivåparallellitet). Det er en dyr løsning. Hva kan gjøres for å redusere kostnaden og samtidig bevare prinsippet bak superskalare prosessorer?

Page 4 of 11

O PPGAVE 4: D IVERSE (20%)
Ta stilling til påstandene. Korrekte svar gir 4% uttelling, feil svar gir -2% og
vet ikke (ikke svar) gir 0%.
a. Hvilken påstand er korrekt for en prosessor som benytter multiplekset adresse/databuss?
1 Krever mindre I/O-pinner enn en løsning med dedikerte busser.
2 Kan adressere mindre data enn en prosessor med dedikerte busser.
3 Kan ikke benytte samlebånd siden instruksjoner og data benytter felles buss for henting av data og instruksjoner
4 Antall bit til adressering er lik antall bit for instruksjoner/data.
b. Hvilken påstand er korrekt for instruksjoner som benytter "immediate"adressering .
1 Operanden kan kun angi adresse til CPU-en sitt nærmeste ("immediate") lagernivå (register).
2 Operanden kan kun adressere data som ligger i hurtigbufferet.
3 Operanden kan kun brukes til konstanter. Verdien til konstanten
er gitt ved kompilering.
4 Immediate adressering er effektivt for globale variabler.
c. Hvilken påstand hører ikke til i nivået for ”instruction set architecture” (instruksjonssetarkitektur)?
1 Første nivå tilgjengelig for bruker.
2 Opprinnelig det eneste nivået.
3 Inkluderer støtte for flere program og virtuelt minne.
4 Grense mellom maskinvare og programvare.
d. Hvilken påstand om parallelle maskiner er ikke korrekt?
1 Forskjellen på SIMD array-maskiner og MIMD multiprosessormaskiner er kun gitt av hvordan minne er organisert.
2 RISC-prosessorer kan være superskalare.
3 CISC-prosessorer kan være superskalare.
4 I en MIMD multiprosessormaskin med delt hovedlager er bussen en flaskehals.
Page 5 of 11

e. Under følger en rekke påstander om datamaskinkomponenter. Hvilken påstand er ikke korrekt?
1 ”Three-state buffer” har to tilstander: tilkoplet eller høy impedans.
2 ”Three-state buffer” har tre tilstander: logisk "1", logisk "0” eller
høy impedans (z).
3 I en EPROM må alt innhold slettes for å kunne oppdatere innholdet.
4 PCI Express benytter punkt-til-punkt kommunikasjon.

Page 6 of 11

IJVM vedlegg

Page 7 of 11

Figur 4: Blokkdiagram (IJVM).
Page 8 of 11

Figur 5: Mikroinstruksjonsformat (IJVM).

Page 9 of 11

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 6: Funksjonstabell for ALU (IJVM).

Page 10 of 11

Figur 7: Timingdiagram (IJVM).

Page 11 of 11

A NSWER K EY

FOR

Page 1 of 19

T HE E XAM

O PPGÅVE 1: D IGITALTLOGISKNIVÅ (25% (10% PÅ A OG
B ; 5% PÅ C ))
a. I figur 1 er EPROM og RAM kopla til ein felles buss. Finn adresseområde for EPROM og RAM og teikn minnekart. Alle einingane har
aktivt lågt (logisk ”0”) CS (Chip Select) signal.
Answer: EPROM2: hex(0000) - hex(3FFF)
EPROM1: hex(4000) - hex(7FFF)
RAM1: hex(8000) - hex (BFFF)
RAM2: hex(C000) - hex (FFFF)
Minnekart, sjå figur 11.
(EPROM2: 00xx xxxx xxxx xxxx, 0000 - 3FFF)
(EPROM1: 01xx xxxx xxxx xxxx, 4000 - 7FFF)
(RAM1: 10xx xxxx xxxx xxxx, 8000 - BFFF)
(RAM2: 11xx xxxx xxxx xxxx, C000 - FFFF)
b. I eit forsøk på optimalisering endrast systemet til å nytte dobbel så
store minnebrikker (EPROM og RAM). Det nye systemet er vist i figure 2. Teikn minnekart for det nye systemet.
Answer: Uendra minnekart, men minne er delt på to brikkar i staden
for fire, sjå figur 13.
c. Har optimaliserings forsøke nokon innverknad på utføring av program som opphavleg var skrevet (og kompilert) for systemet vist i
figur 1? Grunngi svaret.
Answer: Ingen endring. Alle minneadresser i koden er fortsatt gyldige.

Page 2 of 19

O PPGÅVE 2: M IKROARKITEKTUR OG MIKROINSTRUK SJONAR (30% (5% PÅ A OG B ; 10% PÅ C OG D ))
Bruk vedlagte diagram og tabellar for IJVM til å løyse oppgåvene.
a. Register ”PC” har verdien hex(F0F0F00000) og MPC-registeret verdien hex(08). Kva brukast desse registera til? Kva angir verdiane?
Answer: PC (Program Counter) inneheld minne adressa til instruksjon som skal utførast, peikar på instruksjon (opcode) som ligg
på den minnelokasjon som innhaldet peikar på. MPC Micro Program Counter innheld ein opcode som brukast som peikar (adr)
til microinstruksjon i control store.
b. Kva er minimum mengd mikroinstruksjonar ein må bruke for å kopiere verdien i H-registeret til alle desse registera: OPC, TOS, CPP, LV,
SP, PC, MBR og MAR? Grunngi svaret.
Answer: Ein mikroinstruksjon. Det er mogleg å setje alle bita i Cfelte i mikroinst. til ”1” (H-bit er egentlig DC, om H-bit er 1 eller
0 spelar ingen logisk rolle, resultatet er det same). Alle register
kan utføre ”LOAD” frå C-bussen i paralell.
c. Lag mikroinstruksjon(ar) for følgjande IJVM-operasjon:
MAR = MDR + PC.
Sjå vekk frå Addr- og J-felte i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 7.
Answer: 1: Laste MDR inn i H
ALU: 010100 (B) C: 100000000 (H) Mem: 000 (ingen mem opprasjon) B: 0000 (0 MDR)
2 addere H + PC skriv til MAR.
ALU: 111100 (A+B) C: 000000001 (MAR) Mem: 000 (ingen mem
opprasjon) B: 0001 (1 PC)
eller 1: PC -> H
2: MDR + H
d.

1 Lag mikroinstruksjon(ar) som kan teste om innehalde i OPC ≥ MDR.
2 Kva signal i mikroarkitekturen angir resultatet av testen?
Sjå vekk frå Addr- og J-felta i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt i Figur 7.

Page 3 of 19

Answer: Her er det fleire løysingar, men alle krever at ein skjønnar
IJVM godt (eller er flink og klarar å utnytte vedlegg). Huks at
det er lov å oppgi forutsetjingar. Løysingane vist er ikkje dei einaste moglege, men eksempel på korleis det kan gjerast.
Løysing X:
Sidan ein skal sjå vekk frå J feltet er enklaste løysing å forutsetje
positive tal. Løysinga vert då:
1)
Laste MDR inn i H
ALU: 010100 (B) C: 100000000 (H) Mem: 000 (ingen mem opprasjon) B: 0000 (0 MDR)
OPC - H
ALU: 111111 (B - A) C: 000000000 (Ingen) Mem: 000 (ingen mem
opprasjon) B: 1000 (8 OPC)
2)
N-flagg aktivt viss OPC - MDR er negativt, OPC >= MDR.
Kan også løyse det ved å bytte om OPC og MDR for å få N-flagge
til å gi motsatt indikasjon (N = 1 ved MDR >= OPC. Begge vert
rekna som korrekt viss ein angir korleis ein tolkar resultatet.
Løysing Y:
Her er ei anna mogleg løysing, meir komplisert, kan også handtere negative verdiar. Her utnyttar eg at ALU brukar toerskomplement for trekke frå (kan vite det sidan sub i funksjonstabellen består av: B inngang og (INVA og INC A), dette betyr også
at negative tal er lagra på toerskomplimentsform. Merk at det er
mange måtar å få dette til på, dette er eit eksempel på ei mogleg
løysing.
1)
Fyrst utnyttar eg at MSD i IJVM er eit fortegnsbit, seier ikkje
noko om storleiken. Eg brukar dette bite som eit vanleg bit. endrar då talområde frå stort minus tal til stort plusstal til hex(00000000)
- hex(FFFFFFFF) (0 til større plusstal).
Kan då flytte alle tal opp i det konstruerte ”positive” talområde for testen ved å addere (7FFFFFFF) med variablane i OPC og
MDR.

Page 4 of 19

Kan då bruke samme avslutning som i løysing x.
Leggje hex(7FFFFFFF) i H-reg
Kan då gjere følgjande: Fyrst 0 i H
Microinst 1:
ALU: 010000 (0) C: 100000000 (H) Mem: 000 (ingen mem opprasjon) B: 1111 ()
Microinst 2:
hex(0) i H, ALU: invers A, shift 1 bit right, SLR1 =1 gir H =
hex(7FFFFFFF)
ALU: 101100 (Ã) C: 100000000 (H) Mem: 000 (ingen mem opprasjon) B: 1111 () (SLR1: 1, SLL8: 0
Dette kan gjerast på andremåtar også.
Microinst 3:
OPC = OPC + H, justerar verdien i OPC
ALU: 111100 (A+B) C: 010000000 (OPC) Mem: 000 (ingen mem
opprasjon) B: 1000 (8 OPC)
Microinst 4:
H = MDR + H, H = MDR + hex(7FFFFFFF), justerar verdien i
MDR for test, innhald MDR uendra.
ALU: 111100 (A + B) C: 100000000 (H) Mem: 000 (ingen mem
opprasjon) B: 0000 (0 MDR)
Microinst 5:
OPC - H
ALU: 111111 (B - A) C: 000000000 (Ingen) Mem: 000 (ingen mem
opprasjon) B: 1000 (8 OPC)
Kan utvidast med å gjennopprette verdien i OPC, må då ta vare
på resultatet frå microinst 5 før gjennoppretting av OPC slik at
forteikne på resultatet kan testast i siste mikroinstruksjon (N gyldig for testen i siste mikroinstruksjon).

Page 5 of 19

O PPGÅVE 3: ISA- NIVÅ OG AUKE YTING (30% (10% PÅ
A OG C ; 5% PÅ B OG D )))
I ein tenkt arkitektur har ein definert eit format for instruksjonar som
vist i figur 3. Det er definert at det eksisterar 16 brukarregister. Feltet register (figur 3 b) angir kva brukarregister som nyttast.
a. Kva type adressering kan ein utifrå figuren anta at nyttast? Forklar
korleis kvart modi nyttast.
Answer: I denne oppgåva er det diverre ein liten typo, det skal stå:
Feltet register (figur 3 c). Det vart opplyst muntleg på eksamen.
Kan svare:
Direkte adresering. Dette kan seiast heilt sikkert sidan det er einaste plassen det er definert noko adressefelt. Gir full utteljing
Ein eller anna form for Register adresering (register indirect, indexed, etc). Dette kan være mulig, men ikkje gitt at det er brukt.
Ikkje trekk for å nemne dette.
Som er heilt rett. Men med lite trekk godtek eg også instruksjonsformat, dette er ikkje adressering men oppbygjing (definisjon) av instruksjonar:
0-adresse instruksjonar
1-adress instruksjonar
register register instruksjonar
Men dei må forklarast rett.
b. Kva er det maksimale adresserommet for denne arkitekturen? Grunngi svaret.
Answer: 216 . Det 16 bit store ”address” felte er einaste informasjonen
me har som angir noko om addresering.
c. Kan ein seie noko om ordbredda (mengd bit maskina opererar på)?
Grunngi svaret.
Answer: Nei. Det er ingen ting i informasjonen som seier noko om
ordbredda. Mengd bit i register er ikkje oppgitt.

Page 6 of 19

d. I ein versjon av maskina er det ikkje samleband (pipeline) i instruksjonsutføringa (datapath). Tidbruken for å køyre ein instruksjon for
denne maskina er vist i figur 4(a). For å auke ytinga ønskjer ein å innføre samleband. Det vert laga ein versjon med eit samleband med tre
steg. Samlebandet er vist i figur 4(b).
Bruk figur 4(a) og 4(b) til å angi korleis innføring av samlebandet
påverkar klokkefrekvens og ILP (Instruction Level Parallelism).
Answer: Klokka kan setjast til tregaste trinn, og tre instruksjonar i
paralell.

Page 7 of 19

O PPGÅVE 4: D IVERSE (15%)
Finn rett svaralternativ for oppgåvene. Korrekte svar gir 3% utteljing, feil
svar gir -0.5% og veit ikkje (ikkje svar/fleire svar) gir inga utteljing.
a. Er det mogleg å kopiere innehalde i MAR til PC? Sjå figur 6.
1) Ja.
2) Nei.
Answer: 2
b. Kva påstand er ikkje korrekt for ein ein-brikke multiprosessor (CMP)
.
1) Kan ha felles hovudminne.
2) Kan dele cache.
3) Er av type homogen eller heterogen.
4) Kan berre nytte ILP som parallelliserings strategi.
Answer: 4 (Kan nytte prosessor level Parallelism og så)
c. Figur 5(a) har ein funksjon som gitt i sanningstabellen i figur5(b).
1) Korrekt.
2) Ikkje korrekt.
Answer: 1
Jadå det er ein fulladder.

Page 8 of 19

d. Ved å auke mengda samlebandstrinn aukar ILP.
1) Korrekt.
2) Ikkje korrekt.
Answer: 1

Page 9 of 19

e. Under følgjer ein rekke påstandar om datamaskinkomponentar. Kva
påstand er korrekt?
1) Multipleksa adresse/data buss halverar adresserommet samanlikna med system med dedikerte adresse- og databusar.
2) Ein prosessor som har ein ALU som kan utføre NAND-operasjon,
kan programmerast til å utføre alle logiske operasjonar.
3) PROM og flash-minne kan slettast og programmerast fleire gonger.
4) Ein dekodarkrets har fleire inngangar enn utgangar.
Answer: korrekt? 2

Page 10 of 19

IJVM vedlegg

Page 11 of 19

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 8: Funksjonstabell for ALU (IJVM).

Page 12 of 19

Figur 9: Timingdiagram (IJVM).
A0

Address bus

Microcontroller

A15

CS
R/W

CS
R/W
D[7:0]

EPROM
1
R/W
Data[7:0]

CS
R/W

RAM
1

EPROM
2

Data bus

CS
R/W
D[7:0]

D[7:0]

8

Figur 10: Adressedekoding.
Page 13 of 19

D[7:0]
RAM
2
D[7:0]

FFFF

RAM 1
C000
BFFF

RAM 2
8000
7FFF

EPROM 1
4000
3FFF

EPROM 2
0000

Figur 11: Minnekart.
A0

Address bus

Microcontroller

A15

CS
R/W

CS
R/W
D[7:0]

D[7:0]
RAM

EPROM
R/W
Data[7:0]

Data bus

D[7:0]
8

Figur 12: Adressedekoding.
FFFF

RAM

8000
7FFF

EPROM

0000

Figur 13: Minnekart.
Page 14 of 19

a:
opCode
8 bit

b:
opCode

address

8 bit

16 bit

c:
opCode

register

register

register

8 bit

4 bit

4 bit

4 bit

Figur 14: Instruksjonar.
ALU
tALU

register -> bus
tdrive

Timing

ALU -> register
tdrive

CLK
(a) Datapath tidsbruk utan samleband.
Stage 1
register -> bus

Stage 2
ALU

Stage 3
ALU -> register

(b) Samleband med tre steg.

Figur 15:

Ai Bi

Ci-1

Si

Ci

(a) Mystisk dings.

Ai
0
0
0
0
1
1
1
1

Bi
0
0
1
1
0
0
1
1

Ci-1
0
1
0
1
0
1
0
1

Si
0
1
1
0
1
0
0
1

Ci
0
0
0
1
0
1
1
1

(b) Sanningstabell for mystisk dings

Figur 16:

Page 15 of 19

Figur 17: Blokkdiagram (IJVM).
Page 16 of 19

Figur 18: Mikroinstruksjonsformat (IJVM).

Page 17 of 19

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 19: Funksjonstabell for ALU (IJVM).

Page 18 of 19

Figur 20: Timingdiagram (IJVM).

Page 19 of 19

Norwegian University of Science and Technology
Faculty of Information Technology, Mathematics and Electrical Engineering
The Department of Computer and Information Science

TDT4160

D ATAMASKINER GRUNNKURS
E KSAMEN
9. DESEMBER , 2009, 09:00–13:00

Kontakt under eksamen:
Gunnar Tufte 73590356
Tillatne hjelpemidler:
D.
Ingen trykte eller handskrivne hjelpemiddel er tillat.
Enkel godkjent kalkulator er tillete.
Målform:
Nynorsk

Side 1 av 11

O PPGÅVE 1: D IGITALTLOGISKNIVÅ (25% (10% PÅ A OG C ; 5% PÅ B ))
a. I figur 1 er EPROM og RAM kopla til ein felles buss. Finn adresseområde for EPROM og
RAM og teikn minnekart. Alle einingane har aktivt lågt (logisk ”0”) CS (Chip Select) signal.
A0

Address bus

Microcontroller

A15

CS
R/W

CS
R/W
D[7:0]

CS
R/W

EPROM
1

Data bus

D[7:0]

RAM
1

EPROM
2

R/W
Data[7:0]

CS
R/W
D[7:0]

D[7:0]

RAM
2
D[7:0]

8

Figur 1: Adressedekoding.
b. I eit forsøk på optimalisering endrast systemet til å nytte dobbelt så store minnebrikker
(EPROM og RAM). Det nye systemet er vist i figur 2. Teikn minnekart for det nye systemet.
A0

Address bus

Microcontroller

A15

CS
R/W

CS
R/W
D[7:0]

D[7:0]
RAM

EPROM
R/W
Data[7:0]

Data bus

D[7:0]
8

Figur 2: Adressedekoding.
c. Har optimaliseringsforsøket nokon innverknad på utføring av program som opphavleg var
skrevet (og kompilert) for systemet vist i figur 1? Grunngi svaret.

Side 2 av 11

O PPGÅVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJONAR (30% (5%
PÅ A OG C ; 10% PÅ B OG D ))
Bruk vedlagte diagram og tabellar for IJVM til å løyse oppgåvene.
a. Register PC har verdien hex(F0F0F00000) og MPC-registeret verdien hex(08). Kva brukast
desse registera til? Kva angir verdiane?
b. Kva er minimum mengd mikroinstruksjonar ein må bruke for å kopiere verdien i H-registeret
til alle desse registera: OPC, TOS, CPP, LV, SP, PC, MDR og MAR? Grunngi svaret.
c. Lag mikroinstruksjon(ar) for følgjande IJVM-operasjon:
MAR = MDR + PC.
Sjå vekk frå Addr- og J-felte i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem
og B gitt i Figur 7.
d.

1 Lag mikroinstruksjon(ar) som kan teste om innehaldet i OPC ≥ MDR.
2 Kva signal i mikroarkitekturen angir resultatet av testen?
Sjå vekk frå Addr- og J-felta i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem
og B gitt i Figur 7.

Side 3 av 11

O PPGÅVE 3: ISA- NIVÅ OG AUKE YTING (30% (10% PÅ A OG C ; 5% PÅ B
OG D )))
I ein tenkt arkitektur har ein definert eit format for instruksjonar som vist i figur 3. Det er
definert at det eksisterar 16 brukarregister. Feltet register (figur 3 b) angir kva brukarregister som
nyttast.
a:
opCode
8 bit

b:
opCode

address

8 bit

16 bit

c:
opCode

register

register

register

8 bit

4 bit

4 bit

4 bit

Figur 3: Instruksjonar.
a. Kva type adressering kan ein utifrå figuren anta at nyttast? Forklar korleis adresseringen
nyttast.
b. Kva er det maksimale adresserommet for denne arkitekturen? Grunngi svaret.
c. Kan ein seie noko om ordbredda (mengd bit maskina opererar på)? Grunngi svaret.
d. I ein versjon av maskina er det ikkje samleband (pipeline) i instruksjonsutføringa (datapath).
Tidsbruken for å køyre ein instruksjon i denne maskina er vist i figur 4(a). For å auke ytinga
ønskjer ein å innføre samleband. Det vert laga ein versjon med eit samleband med tre steg.
Samlebandet er vist i figur 4(b).

Timing

register -> bus
tdrive

ALU
tALU

ALU -> register
tdrive

CLK
(a) Datapath tidsbruk utan samleband.
Stage 1
register -> bus

Stage 2
ALU

Stage 3
ALU -> register

(b) Samleband med tre steg.

Figur 4:
Bruk figur 4(a) og 4(b) til å forklare korleis innføring av samlebandet påverkar klokkefrekvens og ILP (Instruction Level Parallelism).

Side 4 av 11

O PPGÅVE 4: D IVERSE (15%)
Finn rett svaralternativ for oppgåvene. Korrekte svar gir 3% utteljing, feil svar gir -0.5% og veit
ikkje (ikkje svar/fleire svar) gir inga utteljing.
a. Er det mogleg å kopiere innehaldet i MAR til PC? Sjå figur 6.
1) Ja.
2) Nei.
b. Kva påstand er ikkje korrekt for ein ein-brikke multiprosessor (CMP) .
1) Kan ha felles hovudminne.
2) Kan dele cache.
3) Er av type homogen eller heterogen.
4) Kan berre nytte ILP som parallelliserings strategi.
c. Figur 5(a) har ein funksjon som gitt i sanningstabellen i figur 5(b).
Ai Bi

Ci-1

Si

Ci

(a) Mystisk dings.

Ai
0
0
0
0
1
1
1
1

Bi
0
0
1
1
0
0
1
1

Ci-1
0
1
0
1
0
1
0
1

Si
0
1
1
0
1
0
0
1

Ci
0
0
0
1
0
1
1
1

(b) Sanningstabell for mystisk dings

Figur 5:

1) Korrekt.
2) Ikkje korrekt.

Side 5 av 11

d. Ved å auke mengda samlebandstrinn aukar ILP.
1) Korrekt.
2) Ikkje korrekt.
e. Under følgjer ein rekke påstandar om datamaskinkomponentar. Kva påstand er korrekt?
1) Multipleksa adresse/data buss halverar adresserommet samanlikna med system med
dedikerte adresse- og databusar.
2) Ein prosessor som har ein ALU som kan utføre NAND-operasjon, kan programmerast
til å utføre alle logiske operasjonar.
3) PROM og flash-minne kan slettast og programmerast fleire gonger.
4) Ein dekodarkrets har fleire inngangar enn utgangar.

Side 6 av 11

IJVM vedlegg

Side 7 av 11

Figur 6: Blokkdiagram (IJVM).

Side 8 av 11

Figur 7: Mikroinstruksjonsformat (IJVM).

Side 9 av 11

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 8: Funksjonstabell for ALU (IJVM).

Side 10 av 11

Figur 9: Timingdiagram (IJVM).

Side 11 av 11

Norwegian University of Science and Technology
Faculty of Information Technology, Mathematics and Electrical Engineering
The Department of Computer and Information Science

TDT4160

D ATAMASKINER GRUNNKURS
E KSAMEN
8. AUGUST, 2009, 09:00–13:00

Kontakt under eksamen:
Marius Grannæs 97005663
Tillate hjelpemidler:
D.
Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillatt.
Målform:
Bokmål

Page 1 of 20

O PPGAVE 1: D IGITALT LOGISK NIVÅ (20%)
I Figur 1 er EPROM, RAM og en bryter (SW 1) koblet til en felles buss. Systemet er programmert
til å starte når SW 1 aktiveres. EPROM og RAM har aktivt lavt (logisk ”0”) CS (Chip Select)-signal.
A0

Address bus

CS
R/W
D[7:0]

CS
R/W
D[7:0]

EPROM

RAM

+5V
SW 1
Start
ENB

Microcontroller

A15

R/W
Data[7:0]

D[0]

Data bus

D[7:0]

8

Figur 1: Adressedekoding.
a. Er adresseområdet for enhetene i systemet korrekt angitt i minnekartet vist i Figur 2? Eventuelt, hva er korrekt adresseområde for enhetene i systemet?
FFFF

SW 1

FFFE

Ledig
C000
BFFF

RAM
8000
7FFF

Ledig
4000
3FFF

EPROM
0000

Figur 2: Minnekart for systemet vist i Figur 1.
b. Hvor mye RAM kan systemet utvides til (alle eksisterende enheter beholdes)? Begrunn svaret.
Page 2 of 20

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (20% (5% PÅ
A OG B ; 10% PÅ C ))
Bruk vedlagte diagram i figur 6, figur 7, figur 8 og figur 9 for IJVM til å løse oppgavene.
a. Forklar funksjonen til boksen ”4-to-16 Decoder”.
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register ”OPC” med innholdet i
register ”H” + 1.
Se vekk fra Addr- og J-felta i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem
og B gitt i Figur 7.
c. Følgende innhold i registrene er gitt:
”SP” innholder: hex(0FF1),
”LV” inneholder: hex(0FF2),
”CPP” innholder: hex(0FF3),
”TOS” inneholder: hex(0FF4),
”OPC” inneholder: hex(0FF5),
”H” inneholder: hex(0FF6).
Hva innholder TOS etter at de to oppgitte mikroinstruksjoner er utført? Se vekk fra bit i
mikroinstruksjonsformatet som ikke er oppgitt. Gi svaret i hex format.
1: ALU: 010100, C: 100000000, Mem: 000 og B: 1000
2: ALU: 111101, C: 001000000, Mem: 000 og B: 0101

Page 3 of 20

O PPGAVE 3: I NSTRUKSJONSSETT A RKITEKTUR (ISA)(20%)
For en tenkt maskin er noen av de mulige instruksjonsformatene vist i Figur 3.
a:
opCode
8 bit

b:
opCode

address

8 bit

16 bit

c:
opCode

address x

address y

address z

8 bit

4 bit

4 bit

4 bit

Figur 3: Mulige instruksjonsformat.
a. Hvilket adresseformat er gitt i de tre instruksjonene i Figur 3?
b. Er det mest sannsynlig at dette er instruksjonsformatet til en RISC-maskin eller CISC-maskin?
Begrunn svaret.
c. Hvilken av de tre instruksjonsformatene i Figur 3 er best egnet for register-register operasjoner? Begrunn svaret.
d. Hva er ”indexed addressing”?

Page 4 of 20

O PPGAVE 4: D ATAMASKINER (20% (8% PÅ A OG B ; 4% PÅ C ))
a. Figur 10 og Figur 11 i vedleggene viser forskjellige versjoner av IJVM-mikroarkitekturer.
Hvilken påvirkning har forandringene på ”Instruction-Level-Parallelism” (ILP)?
b. Hvilken endringer i Figur 9 er det sannsynlig å anta at en får hvis en bytter fra mikroarkitekturen gitt i Figur 11 til mikroarkitekturen gitt i Figur 10.
c. Kan en øke ILP uten å endre ”Instruction Set Architecture” (ISA)? Begrunn svaret.

O PPGAVE 5: D IVERSE (20%)
Finn rett svaralternativ for oppgavene. Korrekte svar gir 4% uttelling, feil svar gir -2% og vet ikke
(ikke svar, flere svar) gir ingen utteling.
a. Hvor mange mikroinstruksjoner kan ”control store” inneholde, se figur 6
1) 512.
2) 36.
3) 18432.
4) 9.
b. Hvilken påstand er ikke korrekt for Instruksjonssetarkitektur (ISA).
1) Første nivå tilgjengelig for (ekspert-)brukere.
2) Grense mellom maskinvare og programvare.
3) Grense mellom mikroarkitekturnivå og digitaltlogisknivå.
4) Opprinnelig det eneste nivået.

Page 5 of 20

c. Hva er skissert i Figur 4?

Figur 4: Mystisk dings.
1) Dynamisk RAM-celle.
2) Halvadder.
3) Statisk RAM-celle.
4) Multiplekser.
d. Hvilken påstand for mikrokontrollersystemet i Figur 5 er korrekt?

Figur 5: Mikrokontrollersystem.
1) Prosessoren adresserer 28 minnelokasjoner.
2) Systemet har multiplekset adresse- og databuss.
3) Det er et system uten databuss.
4) Det er et system med kun seriebuss.
Page 6 of 20

e. Under følger en rekke påstander om datamaskinkomponenter. Hvilken påstand er korrekt?
1) Superscalare prosessorer må være RISC-maskiner.
2) Ved å innføre Superscalaritet øker ILP.
3) PROM er en type dynamisk minne.
4) EEPROM er en type dynamisk minne.

Page 7 of 20

IJVM vedlegg

Page 8 of 20

Figur 6: Blokkdiagram (IJVM).

Page 9 of 20

Figur 7: Mikroinstruksjonsformat (IJVM).

Page 10 of 20

A NSWER K EY

FOR

T HE E XAM

Page 1 of 20

O PPGAVE 1: D IGITALT LOGISK NIVÅ (20%)
I Figur 1 er EPROM, RAM og en bryter (SW 1) koblet til en felles buss. Systemet er programmert
til å starte når SW 1 aktiveres. EPROM og RAM har aktivt lavt (logisk ”0”) CS (Chip Select)-signal.
a. Er adresseområdet for enhetene i systemet korrekt angitt i minnekartet vist i Figur 2? Eventuelt, hva er korrekt adresseområde for enhetene i systemet?
Answer: EPROM: hex(0000) - hex(3FFF) RAM : hex(8000) - hex(BFFF) SW 1: hex(FFFF)
JA
b. Hvor mye RAM kan systemet utvides til (alle eksisterende enheter beholdes)? Begrunn svaret.
Answer: Maks ved RAM i område hex(4000) - hex(7FFF) og hex(C000)- hex(FFFE).

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (20% (5% PÅ
A OG B ; 10% PÅ C ))
Bruk vedlagte diagram i figur 6, figur 7, figur 8 og figur 9 for IJVM til å løse oppgavene.
a. Forklar funksjonen til boksen ”4-to-16 Decoder”.
Answer: Decode 4 bit styresignal til 16 unike register enable for å legje register innhold ut
på B-bussen (kunn eit register omgongen kan legjast ut på B-bussen
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register ”OPC” med innholdet i
register ”H” + 1.
Se vekk fra Addr- og J-felta i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem
og B gitt i Figur 7.
Answer: ALU: 111001 (A) C: 010000000 (OPC) Mem: 000 (ingen mem opprasjon) B: 1111 (15
non alt går sidan ALU er satt til kunn A inngang)
c. Følgende innhold i registrene er gitt:
”SP” innholder: hex(0FF1),
”LV” inneholder: hex(0FF2),
”CPP” innholder: hex(0FF3),
”TOS” inneholder: hex(0FF4),
”OPC” inneholder: hex(0FF5),
”H” inneholder: hex(0FF6).
Hva innholder TOS etter at de to oppgitte mikroinstruksjoner er utført? Se vekk fra bit i
mikroinstruksjonsformatet som ikke er oppgitt. Gi svaret i hex format.
1: ALU: 010100, C: 100000000, Mem: 000 og B: 1000
2: ALU: 111101, C: 001000000, Mem: 000 og B: 0101
Page 2 of 20

Answer: 1: Laste LV eller OPC (eventuelt med + 1 option viss ikkje i neste micro opp) inn i
H
ALU: 010100 (B) C: 100000000 (H) Mem: 000 (ingen mem opprasjon) B: 1000 (8 OPC)
2 addere H + LV + 1 skriv til TOS.
ALU: 111101 (A+B +1) C: 001000000 (TOS) Mem: 000 (ingen mem opprasjon) B: 0101 (5
LV)
TOS = LV + (OPC + 1) (TOS = 1FE8

Page 3 of 20

O PPGAVE 3: I NSTRUKSJONSSETT A RKITEKTUR (ISA)(20%)
For en tenkt maskin er noen av de mulige instruksjonsformatene vist i Figur 3.
a. Hvilket adresseformat er gitt i de tre instruksjonene i Figur 3?
Answer: a: zero-address
b: one-sddress
c: three-address
b. Er det mest sannsynlig at dette er instruksjonsformatet til en RISC-maskin eller CISC-maskin?
Begrunn svaret.
Answer: CISC, forskjelig lengde, mange addreseringsmodi.
c. Hvilken av de tre instruksjonsformatene i Figur 3 er best egnet for register-register operasjoner? Begrunn svaret.
Answer: c. (tre regs kan gis).
d. Hva er ”indexed addressing”?
Answer: register innholder offset til gitt adresse (adr. gitt annastad).

Page 4 of 20

O PPGAVE 4: D ATAMASKINER (20% (8% PÅ A OG B ; 4% PÅ C ))
a. Figur 10 og Figur 11 i vedleggene viser forskjellige versjoner av IJVM-mikroarkitekturer.
Hvilken påvirkning har forandringene på ”Instruction-Level-Parallelism” (ILP)?
Answer: • Pipeline, fleire instruksjoner utføres samtidig.
IFU slepp bruke tid (microinst) på å hente instruksjonar i paralell
b. Hvilken endringer i Figur 9 er det sannsynlig å anta at en får hvis en bytter fra mikroarkitekturen gitt i Figur 11 til mikroarkitekturen gitt i Figur 10.
Answer: kortere klokkeperiode, no er det eit pipelina system der klokkeperioden er gitt av
tregaste enhet i piplina, e.g. ALU. Samnt fleire inst. er under utføres samtidig.
c. Kan en øke ILP uten å endre ”Instruction Set Architecture” (ISA)? Begrunn svaret.
Answer: Ja, ved samlebånd aukar ILP.

O PPGAVE 5: D IVERSE (20%)
Finn rett svaralternativ for oppgavene. Korrekte svar gir 4% uttelling, feil svar gir -2% og vet
ikke (ikke svar, flere svar) gir ingen utteling.
(i) Hvor mange mikroinstruksjoner kan ”control store” inneholde, se figur 6
1)
2)
3)
4)

512.
36.
18432.
9.

Answer: 1
(ii) Hvilken påstand er ikke korrekt for Instruksjonssetarkitektur (ISA).
1)
2)
3)
4)

Første nivå tilgjengelig for (ekspert-)brukere.
Grense mellom maskinvare og programvare.
Grense mellom mikroarkitekturnivå og digitaltlogisknivå.
Opprinnelig det eneste nivået.

Answer: 3

Page 5 of 20

(iii) Hva er skissert i Figur 4?
1)
2)
3)
4)

Dynamisk RAM-celle.
Halvadder.
Statisk RAM-celle.
Multiplekser.

Answer: 3
(iv) Hvilken påstand for mikrokontrollersystemet i Figur 5 er korrekt?
1) Prosessoren adresserer 28 minnelokasjoner.
2) Systemet har multiplekset adresse- og databuss.
3) Det er et system uten databuss.
4) Det er et system med kun seriebuss.
Answer: 2

Page 6 of 20

(v) Under følger en rekke påstander om datamaskinkomponenter. Hvilken påstand er korrekt?
1)
2)
3)
4)

Superscalare prosessorer må være RISC-maskiner.
Ved å innføre Superscalaritet øker ILP.
PROM er en type dynamisk minne.
EEPROM er en type dynamisk minne.

Answer: korrekt? 2

Page 7 of 20

IJVM vedlegg

Page 8 of 20

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 8: Funksjonstabell for ALU (IJVM).

Page 9 of 20

Figur 9: Timingdiagram (IJVM).

Page 10 of 20

Figur 10: Alternativ mikroarkitektur I.

Page 11 of 20

Figur 11: Alternativ mikroarkitektur II.

Page 12 of 20

A0

Address bus

CS
R/W
D[7:0]

CS
R/W
D[7:0]

EPROM

RAM

+5V
SW 1
Start
ENB

Microcontroller

A15

R/W
Data[7:0]

D[0]

Data bus

D[7:0]

8

Figur 12: Adressedekoding.
FFFF

SW 1

FFFE

Ledig
C000
BFFF

RAM
8000
7FFF

Ledig
4000
3FFF

EPROM
0000

Figur 13: Minnekart for systemet vist i Figur 1.
a:
opCode
8 bit

b:
opCode

address

8 bit

16 bit

c:
opCode

address x

address y

address z

8 bit

4 bit

4 bit

4 bit

Figur 14: Mulige instruksjonsformat.
Page 13 of 20

Figur 15: Mystisk dings.

Figur 16: Mikrokontrollersystem.

Page 14 of 20

Figur 17: Blokkdiagram (IJVM).

Page 15 of 20

Figur 18: Mikroinstruksjonsformat (IJVM).

Page 16 of 20

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 19: Funksjonstabell for ALU (IJVM).

Page 17 of 20

Figur 20: Timingdiagram (IJVM).

Page 18 of 20

Figur 21: Alternativ mikroarkitektur I.

Page 19 of 20

Figur 22: Alternativ mikroarkitektur II.

Page 20 of 20

Norges teknisk–naturvitenskapelige universitet
Institutt for datateknikk og informasjonsvitenskap

Side 1 av 18

Faglig kontakt under eksamen:
Magnus Jahre
(952 22 309)

EKSAMEN I TDT4160 DATAMASKINER GRUNNKURS
Tirsdag 7. Desember
Tid: 09:00 – 13:00
BOKMÅL
Hjelpemidler:
D.
Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillatt.
Bruk den angitte plassen til å svare på oppgavene. Hvis du trenger mer plass, er det satt av ekstra
plass på den siste siden i oppgavesettet. Eksamen teller 100% av karakteren i faget, og de oppgitte
prosenttallene angir det maksimale antall poeng man kan oppnå på hver oppgave. Les oppgavene
grundig.

Kandidatnummer:

Side 2 av 18
Oppgave 1

Multiple Choice (30%)

Svar ved å ringe rundt ønsket svaralternativ. Du får 3 poeng for riktig svar og 0 poeng hvis du avstår
fra å svare. Hvis du svarer feil eller ringer rundt mer enn ett alternativ, får du -1 poeng.
a) (3%) Hvilken påstand om en prosessor er ikke riktig?
1. En generell prosessor trenger bare instruksjoner for aritmetiske operasjoner og betingede
hopp
2. En prosessor er ofte delt inn i en utførende enhet og en kontrollenhet
3. Hovedoperasjonen til en prosessor kan beskrives som en fetch-decode-execute løkke
4. Prosessorer bruker ofte parallellitet for å øke ytelsen
Riktig svar: Alternativ 1
b) (3%) Hvilken av disse påstandene om RISC-maskiner er ikke korrekt?
1. RISC-maskiner har mange generelle registre
2. RISC-maskiner har få og enkle instruksjonsformater
3. RISC-maskiner aksesserer kun minne gjennom Load- og Store-instruksjoner
4. RISC-maskiner ble oppfunnet for å tette gapet mellom høynivåspråk og maskinkode
Riktig svar: Alternativ 4
c) (3%) Hva er det viktigste kjennetegnet ved en Von Neumann-arkitektur?
1. Arkitekturen mangler flyttallsenhet fordi programmereren bør kunne holde styr på komma
2. Arkitekturen har et hurtigbuffer til data og et til instruksjoner
3. Både program og data er lagret i samme minne
4. Von Neumann-maskiner er alltid CISC
Riktig svar: Alternativ 3

Kandidatnummer:

Side 3 av 18
d) (3%) Hvilken av disse påstandene er ikke en grunn til at man har begynt å bygge flerkjerneprosessorer (eng: Chip Multiprocessor, multi-core architecture)?
1. Det er vanskelig å øke ytelsen ytterligere ved hjelp av teknikker som utnytter ILP
2. Avanserte enkjerneprosessorer er så kompliserte at det å designe og verifisere dem utgjør
en betydelig kostnad
3. Det er vanskelig å designe enkjerneprosessorer med høy ytelse og et akseptabelt effektforbruk
4. Når man plasserer flere prosessorer på samme brikke, senker man behovet for minnebåndbredde
Riktig svar: Alternativ 4
e) (3%) Hvilken av disse påstandene om flerkjerneprosessorgenerasjoner (eng: Chip Multiprocessor generations) er ikke korrekt?
1. Første generasjon med flerkjerneprosessorer er det beste valget hvis du trenger rask kommunikasjon mellom prosessorkjernene
2. Andre generasjon med flerkjerneprosessorer deler hurtigbuffer mellom prosessorkjernene
3. Tredje generasjon med flerkjerneprosessorer prioriterer throughput fremfor høy ytelse per
tråd
4. Tredje generasjon med flerkjerneprosessorer benytter multithreading i prosessorkjernene
Riktig svar: Alternativ 1
f) (3%) Hvilken påstand om et set-assosiativt hurtigbuffer (eng: cache) er riktig?
1. Et dataelement kan lagres på kun en lokasjon i hurtigbufferet
2. Et dataelement kan lagres på alle lokasjoner i hurtigbufferet
3. Et dataelement kan lagres på noen bestemte lokasjoner i hurtigbufferet
4. Set-assosiative hurtigbuffere er lite brukt i moderne prosessorer
Riktig svar: Alternativ 3

Kandidatnummer:

Side 4 av 18
g) (3%) Anta en prosessor med ett nivå hurtigbuffer (eng: cache), en hurtigbufferaksesstid på 3
klokkesykler og en minnelatens på 400 klokkesykler. Hva blir den gjennomsnittlige minneaksesstiden når 95% av forespørslene treffer i hurtigbufferet?
1. 3 klokkesykler
2. 23 klokkesykler
3. 380 klokkesykler
4. 400 klokkesykler
Riktig svar: Alternativ 2
Løsning: a = 0.95 · 3 + 0.05 · (3 + 400) = 23
Mystisk Dark stakkmaskinkode:
push 4
a: dup
push 2
lt
jtrue e
push 1
sub
jmp a
e:

Husk at:
• lt: resultat ← nest øverst < øverst
• sub: resultat ← nest øverst − øverst
h) (3%) Dark stakkmaskinprogrammet over kjøres på en tom stakk. Hvilken verdi ligger igjen på
stakken når programmet har kjørt ferdig?
1. 1
2. 2
3. 3
4. 4
Kandidatnummer:

Side 5 av 18
Riktig svar: Alternativ 1
Mystisk mikrokode:
MAR
MAR
H =
MDR
MAR
TOS

= SP - 1; rd
= SP
MDR; wr
= TOS
= SP - 1; wr
= H; goto Main1

i) (3%) Koden over implementerer en IJVM-instruksjon for Mic-1. Hvilken?
1. Invokevirtual
2. Swap
3. Bipush
4. Istore
Riktig svar: Alternativ 2
Flyttall på formen n = f · 2e er kodet med følgende flyttallsformat:
Sign (1 bit)

e (Exponent, 4 bit)

f (Fraction, 4 bit)

I dette formatet er exponent kodet som “excess 8”, og alle bit i fraction er kodet eksplisitt.
j) (3%) Hva er verdien til flyttallet 001101100 i 10-tallsystemet?
1. 0.09375
2. 0.1875
3. 0.375
4. 0.75
Riktig svar: Alternativ 2
Løsning: n = ( 12 + 14 ) · 26−8 =

Kandidatnummer:

3
4

· 2−2 =

3
16

= 0.1875

Side 6 av 18

A0

Adressebuss

A15
A B
RAM 3 Active
C

CS

CS

R/W

CS

R/W
Data [7:0]

CS

R/W
Data [7:0]

EPROM

RAM 1

R/W
Data [7:0]

RAM 2

Data [7:0]
RAM 3

R/W
Data [7:0]

Figur 1: Adressedekoding
Oppgave 2

Digitalteknikk (15%)

Figur 1 viser et blokkdiagram av et system der en EPROM enhet og tre RAM enheter er koblet til
en felles adresse- og databuss. EPROM og RAM enhetene har et aktivt lavt (logisk “0”) CS (Chip
Select) signal.
a) (5%) Angi adresserommet der EPROM har kontroll over databussen. Svaret skal oppgis heksadesimalt.
Løsning: EPROM har kontroll over bussen for adresse a hvis 0x0000 ≤ a < 0x4000
b) (5%) Angi adresserommet der RAM 1 har kontroll over databussen. Svaret skal oppgis heksadesimalt.
Løsning: RAM 1 har kontroll over bussen for adresse a hvis 0x4000 ≤ a < 0x8000

Kandidatnummer:

Side 7 av 18

A0

Adressebuss

A15

CS

CS

CS

R/W

R/W

R/W

Data [7:0]
EPROM

Data [7:0]
RAM 1

CS
R/W
Data [7:0]
RAM 2

Data [7:0]
RAM 3

R/W
Data [7:0]

Figur 2: Løsningsforslag for adressedekoding
c) (5%) Systemet i figur 1 er ikke helt ferdig da logikk for å aktivere RAM 3 mangler. Denne
logikken skal inn i komponenten “RAM 3 Active” i figuren. Tegn kombinatorisk logikk for
“RAM 3 Active”. Systemet skal benytte hele adresserommet.
Løsning: Det ferdige systemet er beskrevet i figur 2. Vi trekker 1p per slurvefeil (f.eks. AND
i steden for NAND).

Kandidatnummer:

Side 8 av 18
Oppgave 3

Mikroarkitektur (10%)

Dr. Tufte har sluttet med fotball og ønsker å slå seg opp som mikroprogrammerer for IJVM og Mic-1
(se figur 7). Hans første forsøk er å implementere IJVM ISA-instruksjonen Pop. Pop skal i følge
spesifikasjonen fjerne det øverste elementet på stakken og oppdatere TOS registeret. Dr. Tufte har
foreslått følgende mikrokode:
1. MAR = SP = SP - 1; rd
2. TOS = MDR; goto Main1

Figur 4, 5, 6 og 7 i vedlegget kan være nyttige for å løse denne oppgaven.
a) (5%) Fyll ut tabellen under med styreordet for instruksjon nummer 1 i Dr. Tuftes kode. Du
trenger ikke å fylle ut NEXT_ADDRESS og JAM feltene.
Løsning:
Next Address
–

JAM
–

ALU
00 110110

C
000001001

Mem
010

B
0100

Her gir vi 1p for riktige shifter bits (to mest signifikante ALU bit), 1p for riktig resten av ALU,
1p for riktig C, 1p for riktig MEM og 1p for riktig B
b) (5%) Koden til Dr. Tufte inneholder en feil. Hva er feilen, og hvordan kan man rette den?
Løsning: Minneoperasjoner tar en ekstra klokkesykel i Mic-1. Derfor er ikke minneaksessen i
instruksjon 1 ferdig før instruksjon 2 kjører. Løsningen er å sette inn en NOP mellom instruksjon 1 og 2. Alternativt kan man dele instruksjon 1 opp i to: MAR = SP-1; rd og så SP = SP-1.
Begge løsningene gir full pott.

Kandidatnummer:

Side 9 av 18
Oppgave 4

Instruksjonsnivåparallelitet (10%)

Anta et instruksjonssett med 3-adresseinstruksjoner der den første operanden angir destinasjonsregister og de to andre angir inputregistre. For eksempel vil instruksjonen ADD R1, R2, R3 utføre
operasjonen R1 = R2 + R3.
1.
2.
3.
4.

MUL
ADD
ADD
SUB

R3,
R4,
R3,
R4,

R0,
R3,
R0,
R5,

R1
R2
R4
R6

a) (5%) Hvilke avhengigheter finnes i assemblykodesnutten over, og hva er navnet på disse avhengighetene?
Løsning: Koden inneholder følgende avhengigheter:
Instruksjon 1 –> 2: R3: Sann dataavhengighet (RAW)
Instruksjon 1 –> 3: R3: Ut-dataavhengighet (WAW)
Instruksjon 2 –> 3: R4: Sann dataavhengighet (RAW)
Instruksjon 2 –> 3: R3: Anti-avhengighet (WAR)
Instruksjon 2 –> 4: R4: Ut-avhengighet (WAW)
Instruksjon 3 –> 4: R4: Anti-avhengighet (WAR)
Vi godkjenner også de tilsvarende hazards WAR, WAW og RAW som riktige svar siden skillet
mellom avhengighet og hazard ikke er tydelig i læreboka. Vi gir 1p for hver avhengighet som er
korrekt navngitt, men maks 5 poeng (det er 6 avhengigheter). Vi gir inntil 3p for å identifisere
avhengigheter men ikke navngi disse korrekt.

Kandidatnummer:

Side 10 av 18
b) (5%) Fjern så mange som mulig av avhengighetene ved hjelp av teknikken “register renaming”.
Løsning: Ut- og anti-avhengigheter kan fjernes med register renaming. Koden blir da:
1. MUL R3, R0, R1
2. ADD R4, R3, R2
3. ADD S1, R0, R4
4. SUB S2, R5, R6

Oppgave 5

Instruksjonssett (10%)

a) (5%) Hva er forskjellen på en trap og et avbrudd (eng: interrupt)?
Løsning: En trap skyldes en hendelse som er forårsaket av programmet, mens et avbrudd
forårsakes av en hendelse utenfor programmet. 2.5 poeng for hver korrekte forklaring, mindre
poengsummer kan deles ut etter skjønn.

Kandidatnummer:

Side 11 av 18
b) (5%) Forklar baseindeksert adressering (eng: based-indexed addressing). Tegn gjerne en figur.
Løsning: Baseindeksert adressering oppgir to registre og bruker summen av innholdet i disse
registrene til å generere minneadressen. Det er også mulig å bruke spesifisere en immediate
offset, men vi gir full pott uavhengig av om studenten har tatt med dette eller ikke. Mange har
kommet med en flott forklaring av indeksert adressering, men dette gir 0 poeng da det ikke er
det vi spør etter.
Oppgave 6

Minnesystemer (15%)

a) (5%) Forklar begrepene “lokalitet i tid“ (eng: temporal locality) og ”lokalitet i rom” (eng:
spatial locality)
Løsning: Se læreboka s. 294. Maks 2.5p per begrep, tildeles etter skjønn.
b) (5%) Anta et system med 256 MB byteadresserbart hovedminne og 4 KB sidestørrelse. Hvor
mange sider (eng: pages) er det plass til i hovedminnet?
Løsning:

256·210 KB
4 KB

= 64 · 210 sider. Vi godkjenner også utregning med tierpotenser.

c) (5%) Blokkdiagrammet under viser hvordan en TLB (Translation Lookaside Buffer) kan brukes til å øke hastigheten på oversettelsen fra virtuelle til fysiske adresser. Fullfør tegningen
med å velge riktig format på fysisk og virtuell adresse samt rute deladressene til riktige porter.
Anta 32 bit fysiske og virtuelle adresser, 4 KB sidestørrelse og byteadresserbart lager.
Løsning: 4KB = 4 · 210 B = 212 B. Følgelig er page offset 12 bit og fysisk og virtuell page 20
bit. Figur 3 viser det ferdige blokkdiagrammet.
Virtual Address

Address

Hit?

Translation Lookaside
Buffer (TLB)

Data

Physical Address

Kandidatnummer:

Side 12 av 18

Virtual Address
Virtual Page (20 bit)

Offset (12 bit)

Address

Hit?

Translation Lookaside
Buffer (TLB)

Data

Physical Page (20 bit)

Offset (12 bit)

Physical Address

Figur 3: Løsningsforslag for TLB-oppgaven

Kandidatnummer:

Side 13 av 18
Oppgave 7

Multiprosessorer (10%)

a) (5%) Hvilke kategorier inngår i Flynns taksonomi for parallelle datamaskiner?
Løsning: SISD, SIMD, MISD, MIMD. Se læreboka s. 587.
b) (5%) Fire prosessorer utfører minneoperasjoner og ser operasjonene i følgende rekkefølge:
t
1
2
3
4

CPU 0
Write A
Write B
Read A
Read B

CPU 1
Write A
Write B
Read B
Read A

CPU 2
Write A
Write B
Read B
Read A

CPU 3
Write A
Write B
Read A
Read B

Er maskinvaren “sequentially consistent”? Begrunn svaret.
Løsning: Denne oppgaven ble litt mer finurlig enn det som var planen. Følgelig gir vi full pott
for to forskjellige svar:
Løsning 1 (mest riktig): Utføringen er “sequentially consistent” fordi alle prosessorene ser
skriveoperasjonene til adresse A og B i samme rekkefølge. Følgelig vil resultatet av utføringen
være den samme selv om CPUene ser leseoperasjonene til A og B i forskjellig rekkefølge.
Løsning 2 (riktig ut fra forenklet forklaring gitt i forelesning): Utføringen er ikke “sequentially consistent” fordi CPU 0 og CPU 3 ser leseoperasjonen til A før leseoperasjonen til
B mens CPU 1 og CPU 2 ser leseoperasjonen til B før leseoperasjonen til A.
Hvis ikke konklusjonen følger naturlig fra begrunnelsen, gir vi ingen poeng.

Kandidatnummer:

Side 14 av 18
Ekstra svarplass

Kandidatnummer:

Side 15 av 18

Vedlegg

Kandidatnummer:

Side 16 av 18

Figur 4: Funksjonstabell for ALU (Mic-1)

Figur 5: Mikroinstruksjonsformat (Mic-1)

Kandidatnummer:

Side 17 av 18

Figur 6: Utførende enhet (Mic-1)
Kandidatnummer:

Side 18 av 18

Figur 7: IJVM mikroarkitektur (Mic-1)

Kandidatnummer:

Norges teknisk–naturvitenskapelige universitet
Institutt for datateknikk og informasjonsvitenskap

Side 1 av 18

Faglig kontakt under eksamen:
Magnus Jahre
(952 22 309)

EKSAMEN I TDT4160 DATAMASKINER GRUNNKURS
Tirsdag 7. Desember
Tid: 09:00 – 13:00
BOKMÅL
Hjelpemidler:
D.
Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillatt.
Bruk den angitte plassen til å svare på oppgavene. Hvis du trenger mer plass, er det satt av ekstra
plass på den siste siden i oppgavesettet. Eksamen teller 100% av karakteren i faget, og de oppgitte
prosenttallene angir det maksimale antall poeng man kan oppnå på hver oppgave. Les oppgavene
grundig.

Kandidatnummer:

Side 2 av 18
Oppgave 1

Multiple Choice (30%)

Svar ved å ringe rundt ønsket svaralternativ. Du får 3 poeng for riktig svar og 0 poeng hvis du avstår
fra å svare. Hvis du svarer feil eller ringer rundt mer enn ett alternativ, får du -1 poeng.
a) (3%) Hvilken påstand om en prosessor er ikke riktig?
1. En generell prosessor trenger bare instruksjoner for aritmetiske operasjoner og betingede
hopp
2. En prosessor er ofte delt inn i en utførende enhet og en kontrollenhet
3. Hovedoperasjonen til en prosessor kan beskrives som en fetch-decode-execute løkke
4. Prosessorer bruker ofte parallellitet for å øke ytelsen
Svar:

1

2

3

4

b) (3%) Hvilken av disse påstandene om RISC-maskiner er ikke korrekt?
1. RISC-maskiner har mange generelle registre
2. RISC-maskiner har få og enkle instruksjonsformater
3. RISC-maskiner aksesserer kun minne gjennom Load- og Store-instruksjoner
4. RISC-maskiner ble oppfunnet for å tette gapet mellom høynivåspråk og maskinkode
Svar:

1

2

3

4

c) (3%) Hva er det viktigste kjennetegnet ved en Von Neumann-arkitektur?
1. Arkitekturen mangler flyttallsenhet fordi programmereren bør kunne holde styr på komma
2. Arkitekturen har et hurtigbuffer til data og et til instruksjoner
3. Både program og data er lagret i samme minne
4. Von Neumann-maskiner er alltid CISC
Svar:

Kandidatnummer:

1

2

3

4

Side 3 av 18
d) (3%) Hvilken av disse påstandene er ikke en grunn til at man har begynt å bygge flerkjerneprosessorer (eng: Chip Multiprocessor, multi-core architecture)?
1. Det er vanskelig å øke ytelsen ytterligere ved hjelp av teknikker som utnytter ILP
2. Avanserte enkjerneprosessorer er så kompliserte at det å designe og verifisere dem utgjør
en betydelig kostnad
3. Det er vanskelig å designe enkjerneprosessorer med høy ytelse og et akseptabelt effektforbruk
4. Når man plasserer flere prosessorer på samme brikke, senker man behovet for minnebåndbredde
Svar:

1

2

3

4

e) (3%) Hvilken av disse påstandene om flerkjerneprosessorgenerasjoner (eng: Chip Multiprocessor generations) er ikke korrekt?
1. Første generasjon med flerkjerneprosessorer er det beste valget hvis du trenger rask kommunikasjon mellom prosessorkjernene
2. Andre generasjon med flerkjerneprosessorer deler hurtigbuffer mellom prosessorkjernene
3. Tredje generasjon med flerkjerneprosessorer prioriterer throughput fremfor høy ytelse per
tråd
4. Tredje generasjon med flerkjerneprosessorer benytter multithreading i prosessorkjernene
Svar:

1

2

3

4

f) (3%) Hvilken påstand om et set-assosiativt hurtigbuffer (eng: cache) er riktig?
1. Et dataelement kan lagres på kun en lokasjon i hurtigbufferet
2. Et dataelement kan lagres på alle lokasjoner i hurtigbufferet
3. Et dataelement kan lagres på noen bestemte lokasjoner i hurtigbufferet
4. Set-assosiative hurtigbuffere er lite brukt i moderne prosessorer
Svar:

Kandidatnummer:

1

2

3

4

Side 4 av 18
g) (3%) Anta en prosessor med ett nivå hurtigbuffer (eng: cache), en hurtigbufferaksesstid på 3
klokkesykler og en minnelatens på 400 klokkesykler. Hva blir den gjennomsnittlige minneaksesstiden når 95% av forespørslene treffer i hurtigbufferet?
1. 3 klokkesykler
2. 23 klokkesykler
3. 380 klokkesykler
4. 400 klokkesykler
Svar:

1

2

3

4

Mystisk Dark stakkmaskinkode:
push 4
a: dup
push 2
lt
jtrue e
push 1
sub
jmp a
e:

Husk at:
• lt: resultat ← nest øverst < øverst
• sub: resultat ← nest øverst − øverst
h) (3%) Dark stakkmaskinprogrammet over kjøres på en tom stakk. Hvilken verdi ligger igjen på
stakken når programmet har kjørt ferdig?
1. 1
2. 2
3. 3
4. 4
Svar:

Kandidatnummer:

1

2

3

4

Side 5 av 18
Mystisk mikrokode:
MAR
MAR
H =
MDR
MAR
TOS

= SP - 1; rd
= SP
MDR; wr
= TOS
= SP - 1; wr
= H; goto Main1

i) (3%) Koden over implementerer en IJVM-instruksjon for Mic-1. Hvilken?
1. Invokevirtual
2. Swap
3. Bipush
4. Istore
Svar:

1

2

3

4

Flyttall på formen n = f · 2e er kodet med følgende flyttallsformat:
Sign (1 bit)

e (Exponent, 4 bit)

f (Fraction, 4 bit)

I dette formatet er exponent kodet som “excess 8”, og alle bit i fraction er kodet eksplisitt.
j) (3%) Hva er verdien til flyttallet 001101100 i 10-tallsystemet?
1. 0.09375
2. 0.1875
3. 0.375
4. 0.75
Svar:

Kandidatnummer:

1

2

3

4

Side 6 av 18

A0

Adressebuss

A15
A B
RAM 3 Active
C

CS

CS

R/W

CS

R/W
Data [7:0]

CS

R/W
Data [7:0]

EPROM

RAM 1

R/W
Data [7:0]

RAM 2

Data [7:0]
RAM 3

R/W
Data [7:0]

Figur 1: Adressedekoding
Oppgave 2

Digitalteknikk (15%)

Figur 1 viser et blokkdiagram av et system der en EPROM enhet og tre RAM enheter er koblet til
en felles adresse- og databuss. EPROM og RAM enhetene har et aktivt lavt (logisk “0”) CS (Chip
Select) signal.
a) (5%) Angi adresserommet der EPROM har kontroll over databussen. Svaret skal oppgis heksadesimalt.
Svar:

Kandidatnummer:

Side 7 av 18
b) (5%) Angi adresserommet der RAM 1 har kontroll over databussen. Svaret skal oppgis heksadesimalt.
Svar:

c) (5%) Systemet i figur 1 er ikke helt ferdig da logikk for å aktivere RAM 3 mangler. Denne
logikken skal inn i komponenten “RAM 3 Active” i figuren. Tegn kombinatorisk logikk for
“RAM 3 Active”. Systemet skal benytte hele adresserommet.
Svar:

Kandidatnummer:

Side 8 av 18
Oppgave 3

Mikroarkitektur (10%)

Dr. Tufte har sluttet med fotball og ønsker å slå seg opp som mikroprogrammerer for IJVM og Mic-1
(se figur 5). Hans første forsøk er å implementere IJVM ISA-instruksjonen Pop. Pop skal i følge
spesifikasjonen fjerne det øverste elementet på stakken og oppdatere TOS registeret. Dr. Tufte har
foreslått følgende mikrokode:
1. MAR = SP = SP - 1; rd
2. TOS = MDR; goto Main1

Figur 2, 3, 4 og 5 i vedlegget kan være nyttige for å løse denne oppgaven.
a) (5%) Fyll ut tabellen under med styreordet for instruksjon nummer 1 i Dr. Tuftes kode. Du
trenger ikke å fylle ut NEXT_ADDRESS og JAM feltene.
Svar:
NEXT_ADDRESS

JAM

–

–

ALU

C

Mem

B

b) (5%) Koden til Dr. Tufte inneholder en feil. Hva er feilen, og hvordan kan man rette den?
Svar:

Kandidatnummer:

Side 9 av 18
Oppgave 4

Instruksjonsnivåparallelitet (10%)

Anta et instruksjonssett med 3-adresseinstruksjoner der den første operanden angir destinasjonsregister og de to andre angir inputregistre. For eksempel vil instruksjonen ADD R1, R2, R3 utføre
operasjonen R1 = R2 + R3.
1.
2.
3.
4.

MUL
ADD
ADD
SUB

R3,
R4,
R3,
R4,

R0,
R3,
R0,
R5,

R1
R2
R4
R6

a) (5%) Hvilke avhengigheter finnes i assemblykodesnutten over, og hva er navnet på disse avhengighetene?
Svar:

Kandidatnummer:

Side 10 av 18
b) (5%) Fjern så mange som mulig av avhengighetene ved hjelp av teknikken “register renaming”.
Svar:

Oppgave 5

Instruksjonssett (10%)

a) (5%) Hva er forskjellen på en trap og et avbrudd (eng: interrupt)?
Svar:

Kandidatnummer:

Side 11 av 18
b) (5%) Forklar baseindeksert adressering (eng: based-indexed addressing). Tegn gjerne en figur.
Svar:

Oppgave 6

Minnesystemer (15%)

a) (5%) Forklar begrepene “lokalitet i tid“ (eng: temporal locality) og ”lokalitet i rom” (eng:
spatial locality)
Svar:

b) (5%) Anta et system med 256 MB byteadresserbart hovedminne og 4 KB sidestørrelse. Hvor
mange sider (eng: pages) er det plass til i hovedminnet?
Svar:

Kandidatnummer:

Side 12 av 18
c) (5%) Blokkdiagrammet under viser hvordan en TLB (Translation Lookaside Buffer) kan brukes til å øke hastigheten på oversettelsen fra virtuelle til fysiske adresser. Fullfør tegningen
med å velge riktig format på fysisk og virtuell adresse samt rute deladressene til riktige porter.
Anta 32 bit fysiske og virtuelle adresser, 4 KB sidestørrelse og byteadresserbart lager.

Virtual Address

Address

Hit?

Translation Lookaside
Buffer (TLB)

Data

Physical Address
Svar:

Kandidatnummer:

Side 13 av 18
Oppgave 7

Multiprosessorer (10%)

a) (5%) Hvilke kategorier inngår i Flynns taksonomi for parallelle datamaskiner?
Svar:

b) (5%) Fire prosessorer utfører minneoperasjoner og ser operasjonene i følgende rekkefølge:
t
1
2
3
4

CPU 0
Write A
Write B
Read A
Read B

CPU 1
Write A
Write B
Read B
Read A

CPU 2
Write A
Write B
Read B
Read A

CPU 3
Write A
Write B
Read A
Read B

Er maskinvaren “sequentially consistent”? Begrunn svaret.
Svar:

Kandidatnummer:

Side 14 av 18
Ekstra svarplass
Svar:

Kandidatnummer:

Side 15 av 18

Vedlegg

Kandidatnummer:

Side 16 av 18

Figur 2: Funksjonstabell for ALU (Mic-1)

Figur 3: Mikroinstruksjonsformat (Mic-1)

Kandidatnummer:

Side 17 av 18

Figur 4: Utførende enhet (Mic-1)
Kandidatnummer:

Side 18 av 18

Figur 5: IJVM mikroarkitektur (Mic-1)

Kandidatnummer:

Norges teknisk–naturvitenskapelige universitet
Institutt for datateknikk og informasjonsvitenskap

Side 1 av 12

Faglig kontakt under eksamen:
Magnus Jahre
(952 22 309)

EKSAMEN I TDT4160 DATAMASKINER GRUNNKURS
Onsdag 11. august
Tid: 09:00 – 13:00
Hjelpemidler:
D.
Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillatt.
Vi anbefaler å svare kort og presist for å få tid til å svare på alle oppgavene. Eksamen teller 100% av
karakteren i faget, og de oppgitte prosenttallene angir det maksimale antall poeng man kan oppnå
på hver oppgave. Les oppgavene grundig.

Oppgave 1

Digital logikk (20%)

Figur 1 på side 2 viser et blokkdiagram av et system der en EPROM enhet og to RAM enheter er
koblet til en felles adresse- og databuss. EPROM og RAM enhetene har et aktivt lavt (logisk “0”) CS
(Chip Select) signal.
a) (10%) Tegn et minnekart for systemet i figur 1.
Løsning: Figur 2 viser minneområdet for systemet.
b) (5%) Hvor mye RAM kan systemet utvides med hvis alle eksisterende enheter beholdes? Begrunn svaret.
Løsning: Systemet kan utvides med 214 = 16384 bytes (eller 16KB)

Side 2 av 12

A0

Adressebuss

A15

CS

CS

R/W

CS

R/W
Data [7:0]

EPROM

R/W
Data [7:0]

RAM 1

Data [7:0]
RAM 2

R/W
Data [7:0]

Figur 1: Adressedekoding
c) (5%) Tegn et blokkdiagram som inkluderer den nye RAM-enheten og nødvendig adresseringslogikk.
Løsning: Figur 3 viser den nye RAM-enheten og nødvendig adresselogikk. De nye elementene i
figuren er vist i grått.
Oppgave 2

Mikroarkitektur og mikroinstruksjoner (20%)

a) (10%) Forklar funksjonen til SP registeret. Hvilke operasjoner brukes SP i?
Løsning: SP peker alltid til toppen av “operand stack”. SP brukes i hovedsak når man kaller en
metode og når man returnerer fra den. Se side 250–255 i læreboka for flere detaljer.
b) (5%) Lag mikroinstruksjon(er) for følgende IJVM-operasjon: SP = SP + 1

Side 3 av 12

0x0000

EPROM
0x4000

RAM 1
0x8000

Ikke i bruk
0xB000

RAM 2
0xFFFF

Figur 2: Minnekart for Oppgave 1a
Angi korrekte bit for ALU, C, Mem og B for instruksjonsformatet gitt i figur 6. Du kan se bort
fra Addr og J-feltene. Mikroinstruksjon(ene) skal være tilpasset Mic-1 (se figur 7).
Løsning: ALU: 110101 (B+1), C: 000001000 (Skriv SP), Mem: 000 (ingen minneoperasjon), B:
0100 (Desimalverdi: 4, Les SP)
c) (5%) Lag mikroinstruksjon(er) for følgende IJVM-operasjon: TOS = TOS + OPC
Angi korrekte bit for ALU, C, Mem og B for instruksjonsformatet gitt i Figur 6. Du kan se bort
fra Addr og J-feltene. Mikroinstruksjon(ene) skal være tilpasset Mic-1 (se figur 7).
Løsning: Siden TOS og OPC deler B bussen i Mic-1, må vi bruke H som mellomlager. Vi velger å
flytte TOS til H først og så legge sammen. En annen riktig løsning er å flytte TOS til H og så legge
sammen.
Mikroinstruksjon 1 (H = OPC)
ALU: 010100 (B), C: 100000000 (Skriv H), Mem: 000 (ingen minneoperasjon), B: 1000 (Desimalverdi: 8, les OPC)
Mikroinstruksjon 2 (TOS = H + TOS)
ALU: 111100 (A+B), C: 001000000 (Skriv TOS), Mem: 000 (ingen minneoperasjon), B: 0111 (Desimalverdi: 7, les TOS)

Side 4 av 12

A0

Adressebuss

A15

CS

CS

R/W

CS

R/W
Data [7:0]

EPROM

CS

R/W
Data [7:0]

RAM 1

R/W
Data [7:0]

RAM 2

R/W
Data [7:0]

Figur 3: Blokkdiagram med ny RAM enhet (Oppgave 1c)

Data [7:0]
RAM 3

Side 5 av 12
Oppgave 3

Instruksjonssett (20%)

a) (10%) Du har fått i oppgave å lage et instruksjonsformat til en enkel 8-bitsarkitektur. Formatet
skal støtte 4 forskjellige instruksjoner, 8 registre og 2 operander. Foreslå et mulig instruksjonsformat og forklar hvorfor det oppfyller kravene gitt i denne oppgaven.
Løsning: Vi setter av 2 bit til opcode to registerfelt av 3 bit. De to opcodebitene gir 22 = 4 mulige
opcoder mens registerfeltene kan adressere 23 = 8 registre.
b) (10%) Forklar forskjellen på register adressering (Engelsk: register addressing) og registerindirekte adressering (Engelsk: register indirect addressing).
Løsning: Med register adressering peker tallet man oppgir i instruksjonen til et register. I registerindirekte adressering peker verdien i instruksjonen også til et register, men her inneholder registeret
en minneadresse som man så bruker til å hente de ønskede dataene.
Oppgave 4

Datamaskiner (20%)

a) (10%) Figur 9 viser Mic-3 som er forbedring av mikroarkitekturen Mic-1 vist i figur 7. Nevn
de to viktigste forbedringene og forklar på hvilken måte de bidrar til økt ytelse.
Løsning: Forbedring 1: Mikroarkitekturen har tre busser og dette gjør at man slipper å bruke instruksjoner på å mellomlagre verdier hvis man skal legge sammen verdier fra to registere.
Forbedring 2: Det er lagt til latcher på alle bussene. Dette åpner for pipelining som gjør at prosessoren kan jobbe med flere instruksjoner samtidig.
b) (10%) Diskuter kort fordeler og ulemper med å implementere ut-av-rekkefølge instruksjonsutføring (Engelsk: out-of-order execution) i en prosessor.
Løsning: Se læreboka s. 304 – 309. Dette er en typisk “tenke selv” oppgave der man får poeng for
alle fornuftige forslag.
Oppgave 5

Diverse (20%)

a) (10%) Forklar forskjellen(e) mellom 1., 2. og 3. generasjons Chip Multiprocessor (CMP). Tegn
gjerne en figur.

Side 6 av 12

Figur 4: Chip Multiprocessor generasjoner (Hentet fra Olukotun og Hammond, 2005)
Løsning: Figur 4 viser en konvensjonell prosessor og tre generasjoner med CMPer. En første generasjons CMP er to enkjernearkitekturer plassert på samme brikke. Andregenerasjon har prosessorkjerner designet for bruk i en CMP og deler hurtigbuffer på brikken. Tredjegenerasjon har utvidet
kjernene med multi-threading.
b) (5%) Forklar forskjellen på en write-through og en write-back strategi for hurtigbuffere (Engelsk: caches).
Løsning: Med en write-through strategi blir alle hovedminnet oppdatert på alle skriveoperasjoner til
hurtigbufferet. Med write-back skriver man tilbake dataene når hurtigbufferblokken blir kastet ut av
hurtigbufferet. (Se læreboka s. 298)
c) (5%) Forklar forskjellen på statisk og dynamisk hopp-prediksjon (Engelsk: branch prediction).

Side 7 av 12
Løsning: Dynamisk hopp-prediksjon gjøres mens programmet kjører, krever ekstra maskinvare og
er usynlig for programmet. Statisk hopp-prediksjon gjøres av kompilatoren ved å sette inn spesielle
instruksjoner som forteller prosessoren om kompilatoren tror programmet vil hoppe eller ikke. (Se
læreboka s. 301-304)

Side 8 av 12

Vedlegg

Side 9 av 12

Figur 5: Funksjonstabell for ALU (Mic-1)

Figur 6: Mikroinstruksjonsformat (Mic-1)

Side 10 av 12

Figur 7: IJVM mikroarkitektur (Mic-1)

Side 11 av 12

Figur 8: Blokkdiagram (Mic-1)

Side 12 av 12

Figur 9: Alternativ IJVM mikroarkitektur (Mic-3)

Norwegian University of Science and Technology
Faculty of Information Technology, Mathematics and Electrical Engineering
The Department of Computer and Information Science

TDT4160

D ATAMASKINER GRUNNKURS
E KSAMEN
15. AUGUST, 2011, 09:00–13:00

Kontakt under eksamen:
Gunnar Tufte 97402478
Tillate hjelpemidler:
D.
Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillatt.
Målform:
Bokmål

Page 1 of 17

O PPGAVE 1: D IGITALT LOGISK NIVÅ (25%)
I Figur 1 er EPROM, RAM og en bryter (SW 1) koblet til en felles buss. Programmet (ZX81) starter
når SW 1 aktiveres. EPROM og RAM har aktivt lavt (logisk ”0”) CS (Chip Select)-signal.
A0

Address bus

CS
R/W
D[7:0]

CS
R/W
D[7:0]

EPROM

RAM

+5V
SW 1
Start
ENB

Microcontroller

A15

R/W
Data[7:0]

D[0]

Data bus

8

D[7:0]

Figur 1: Adressedekoding.
a. Hvilken enhet addreseres viss følgende adresser legges ut på adressebussen?
i) hex(2AAA)
ii) hex(4F00)
iii) hex(9000)
b. Ut fra innformasjonen i figur 1, benytter systemet avbrudd (interrupt) eller polling for å starte programmet (ZX81)? Begrunn svaret.
c. Angi alle adresseområder som ikke er i bruk.

Page 2 of 17

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (25%)
Bruk vedlagte diagram i figur 4, figur 5, figur 6, figur 7, figur 8 og figur 9 for IJVM til å løse oppgavene.
a. Forklar funksjonen til boksen ”MPC” i figur 4.
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register ”TOS” med innholdet i register
”H” + 1.
Se vekk fra Addr- og J-felta i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt
i Figur 5.
c. Følgende innhold i registrene er gitt:
”SP” innholder: hex(0001),
”LV” inneholder: hex(FF05),
”CPP” innholder: hex(0003),
”TOS” inneholder: hex(0004),
”OPC” inneholder: hex(0005),
”H” inneholder: hex(FF0A).
Hva innholder TOS etter at de to oppgitte mikroinstruksjoner er utført? Se vekk fra bit i mikroinstruksjonsformatet som ikke er oppgitt. Gi svaret i hex format.
1: ALU: 010100, C: 100000000, Mem: 000 og B: 1000
2: ALU: 111101, C: 001000000, Mem: 000 og B: 0101
d. Er det mulig å utvide antall ALU-funksjoner med eksisterende MIR? Begrunn svaret.

Page 3 of 17

O PPGAVE 3: I NSTRUKSJONSSETT A RKITEKTUR (ISA)(25%)
For en tenkt maskin er noen av de mulige instruksjonsformatene vist i Figur 2.
a:
opCode
8 bit

b:
opCode

address

8 bit

16 bit

c:
opCode

address x

address y

address z

8 bit

4 bit

4 bit

4 bit

Figur 2: Mulige instruksjonsformat.
Instruksjonsformatene for en annen tenkt maskin er vist i Figur 3.
Load:
opCode

Ra

Rn

DC

15

0

Store:
opCode

Ra

Rn

DC

15

0

Move/ ALU:
opCode

Ra

Rb

Rc

4 bit

4 bit

4 bit

4 bit

15

0

Ra: register
Rb: register
Rc: register, any user register

Figur 3: Mulige instruksjonsformat.
a. Hvordan relaterer de to maskinene i Figur 2 og 3 til RISC og CISC?
b. Er det noen av maskinene som benytter instruksjonsformat av type:
i) null adresse (zero-address) instruksjoner.
ii) register-register operasjoner.
Begrunn svaret.
c. Er det en av de to maskinene i Figur 2 eller 3 som er mer generell enn den andre (tips: general
computation)? Begrunn svaret.
d. Hva er er ”offset” i samenheng med ”indexed addressing”?

Page 4 of 17

O PPGAVE 4: D ATAMASKINER (25%)
a. Figur 8 og Figur 9 i vedleggene viser forskjellige versjoner av IJVM-mikroarkitekturer. Er ”Instruction Set Architecture” (ISA) påvirket av hvilken versjon av IJVM-mikroarkitektur som velges? Begrunn svaret.
b. Hvordan påvirkes maksimal klokkefrekvens av å endre IJVM-mikroarkitektur fra Figur 8 til Figur 9?
c. Hva er ”ILP” og hvordan påvirker et bytte fra Figur 8 ti Figur 9 ”ILP”.
d. Hvilken innvirkning har en reduksjon i ∆w (Figur 7) på maksimal klokkefrekvens for maskinene i
Figur 8 og Figur 9?

Page 5 of 17

IJVM vedlegg

Page 6 of 17

Figur 4: Blokkdiagram (IJVM).

Page 7 of 17

Figur 5: Mikroinstruksjonsformat (IJVM).

Page 8 of 17

A NSWER K EY

FOR

T HE E XAM

Page 1 of 17

O PPGAVE 1: D IGITALT LOGISK NIVÅ (25%)
I Figur 1 er EPROM, RAM og en bryter (SW 1) koblet til en felles buss. Programmet (ZX81) starter når
SW 1 aktiveres. EPROM og RAM har aktivt lavt (logisk ”0”) CS (Chip Select)-signal.
a. Hvilken enhet addreseres viss følgende adresser legges ut på adressebussen?
i) hex(2AAA)
ii) hex(4F00)
iii) hex(9000)
Answer: EPROM: hex(0000) - hex(3FFF)
RAM : hex(8000) - hex(BFFF)
SW 1: hex(FFFF)
JA
b. Ut fra innformasjonen i figur 1, benytter systemet avbrudd (interrupt) eller polling for å starte programmet (ZX81)? Begrunn svaret.
Answer: Polling, SW1 er kunn koplet til en datalinje på databussen. Systeme må overvåke (lese) adr
hex(FFFF) for å få innformasjon om SW1 sin tilstand.
c. Angi alle adresseområder som ikke er i bruk.
Answer: hex(4000) - hex(7FFF)
hex(A000) - hex(FFFE)

Page 2 of 17

O PPGAVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (25%)
Bruk vedlagte diagram i figur 4, figur 5, figur 6, figur 7, figur 8 og figur 9 for IJVM til å løse oppgavene.
a. Forklar funksjonen til boksen ”MPC” i figur 4.
Answer: Mikro Program Counter: Peikar på adresse til mikroinstruksjon i instruksjon. Innhald gitt
av instruksjon og flagg, flagg brukast viss det er betinga hopp i mikroinstruksjonane til instruksjonen. Ved start av ny instruksjon peikar MPC på fyrste mikroinstruksjon i instruksjonsn.
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: last register ”TOS” med innholdet i register
”H” + 1.
Se vekk fra Addr- og J-felta i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem og B gitt
i Figur 5.
Answer: ALU: 111001 (A) C: 001000000 (TOS) Mem: 000 (ingen mem opprasjon) B: 1111 (15 alt
går sidan ALU er satt til kunn A inngang)
c. Følgende innhold i registrene er gitt:
”SP” innholder: hex(0001),
”LV” inneholder: hex(FF05),
”CPP” innholder: hex(0003),
”TOS” inneholder: hex(0004),
”OPC” inneholder: hex(0005),
”H” inneholder: hex(FF0A).
Hva innholder TOS etter at de to oppgitte mikroinstruksjoner er utført? Se vekk fra bit i mikroinstruksjonsformatet som ikke er oppgitt. Gi svaret i hex format.
1: ALU: 010100, C: 100000000, Mem: 000 og B: 1000
2: ALU: 111101, C: 001000000, Mem: 000 og B: 0101
Answer: 1:
ALU: 010100 (B) C: 100000000 (H) Mem: 000 (ingen mem opprasjon) B: 1000 (8 OPC)
2
ALU: 111101 (A+B +1) C: 001000000 (TOS) Mem: 000 (ingen mem opprasjon) B: 0101 (5 LV)
(TOS = FF0B)
d. Er det mulig å utvide antall ALU-funksjoner med eksisterende MIR? Begrunn svaret.
Answer: Ja, 26 muligemed6kontrollinjer.

Page 3 of 17

O PPGAVE 3: I NSTRUKSJONSSETT A RKITEKTUR (ISA)(25%)
For en tenkt maskin er noen av de mulige instruksjonsformatene vist i Figur 2.
Instruksjonsformatene for en annen tenkt maskin er vist i Figur 3.
a. Hvordan relaterer de to maskinene i Figur 2 og 3 til RISC og CISC?
Answer: Figur 2 CISC: mange adr. modus/inst typar. Variable operandar
Figur 3 RISC: liklengde instruksjonar med uniform oppbygjing. Register-register operasjonar.
b. Er det noen av maskinene som benytter instruksjonsformat av type:
i) null adresse (zero-address) instruksjoner.
ii) register-register operasjoner.
Begrunn svaret.
Answer: i) Figur 2 a, er ein null adresse instruksjon. ii) Figur 3 er alle instruksjonstypane angitt
register-register.
c. Er det en av de to maskinene i Figur 2 eller 3 som er mer generell enn den andre (tips: general
computation)? Begrunn svaret.
Answer: Nei, begge er generelle datamaskiner, dei kan gjere akkurat det samme (bergne alle beregnbare funksjonar). Men forskjellen kan føre til at ein av instruksjonssetta (og underliggande
arkitektur) er meir effektiv til enkelte oppgåver. Vidare kan det gi seg utslag i at ein ISA er lettare
å lage programm til.
d. Hva er er ”offset” i samenheng med ”indexed addressing”?
Answer: register innholder offset til gitt adresse (adr. gitt annastad).

Page 4 of 17

O PPGAVE 4: D ATAMASKINER (25%)
a. Figur 8 og Figur 9 i vedleggene viser forskjellige versjoner av IJVM-mikroarkitekturer. Er ”Instruction Set Architecture” (ISA) påvirket av hvilken versjon av IJVM-mikroarkitektur som velges? Begrunn svaret.
Answer: Nei, begge er ein mikroarkitektue implementert for IJVM-ISA.
b. Hvordan påvirkes maksimal klokkefrekvens av å endre IJVM-mikroarkitektur fra Figur 8 til Figur 9?
Answer: kortere klokkeperiode, no er det eit pipelina system der klokkeperioden er gitt av tregaste
enhet i piplina, e.g. ALU (Samnt fleire inst. er under utføres samtidig).
c. Hva er ”ILP” og hvordan påvirker et bytte fra Figur 8 ti Figur 9 ”ILP”.
Answer: Instruction Level Paralellism: Paralelitet på ein kjerne. Fleire instruksjonar er under utførelse samtidigt. Utnyttar at instruksjonar brukar forskjellige einingar i forskjelige fasar av
utførelse, f.eks. kan ha fetch, decode og execute. Ja, ved samlebånd aukar ILP.
d. Hvilken innvirkning har en reduksjon i ∆w (Figur 7) på maksimal klokkefrekvens for maskinene i
Figur 8 og Figur 9?
Answer: Ingen, det er δy som angir klokka.

Page 5 of 17

IJVM vedlegg

Page 6 of 17

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 6: Funksjonstabell for ALU (IJVM).

Page 7 of 17

Figur 7: Timingdiagram (IJVM).

Page 8 of 17

Figur 8: Alternativ mikroarkitektur I.

Page 9 of 17

Figur 9: Alternativ mikroarkitektur II.

Page 10 of 17

A0

Address bus

CS
R/W
D[7:0]

CS
R/W
D[7:0]

EPROM

RAM

+5V
SW 1
Start
ENB

Microcontroller

A15

R/W
Data[7:0]

D[0]

Data bus

D[7:0]

8

Figur 10: Adressedekoding.

a:
opCode
8 bit

b:
opCode

address

8 bit

16 bit

c:
opCode

address x

address y

address z

8 bit

4 bit

4 bit

4 bit

Figur 11: Mulige instruksjonsformat.

Load:
opCode

Ra

Rn

DC

15

0

Store:
opCode

Ra

Rn

DC

15

0

Move/ ALU:
opCode

Ra

Rb

Rc

4 bit

4 bit

4 bit

4 bit

15

0

Ra: register
Rb: register
Rc: register, any user register

Figur 12: Mulige instruksjonsformat.

Page 11 of 17

Figur 13: Blokkdiagram (IJVM).

Page 12 of 17

Figur 14: Mikroinstruksjonsformat (IJVM).

Page 13 of 17

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 15: Funksjonstabell for ALU (IJVM).

Page 14 of 17

Figur 16: Timingdiagram (IJVM).

Page 15 of 17

Figur 17: Alternativ mikroarkitektur I.

Page 16 of 17

Figur 18: Alternativ mikroarkitektur II.

Page 17 of 17

Norwegian University of Science and Technology
Engineering
The Department of Computer and Information Science

TDT4160
D ATAMASKINER GRUNNKURS
E KSAMEN
17. DESEMBER , 2012, 09:00–13:00

Kontakt under eksamen:
Gunnar Tufte 73590356/97402478
Tillatte hjelpemidler:
D.
Ingen trykte eller handskrivne hjelpemiddel er tillete.
Enkel godkjent kalkulator er tillete.
Målform:
Nynorsk

Page 1 of ??

O PPGÅVE 1: D IGITAL L OGISK N IVÅ (25% (5% ON A , 10% ON B AND C ))
I figur ?? er det eksterne bussgrensesnittet for ein mikrokontroller vist. Det er brukt to RAMbrikker på 32kB og ein ROM-brikke på 1kB. Adressedekodingen er bygd opp av OR-portar og
inverterportar. Alle einingane har eit aktivt lågt (logisk ”0”) CS (Chip Select)-signal.
A0

Address bus

Microcontroller

A15

CS
R/W

R

RAM 1
R/W
Data[7:0]

CS
R/W

CS
D[7:0]

D[7:0]

ROM

Data bus

8

D[7:0]

RAM 2
D[7:0]

Figur 1: Address decoding.
a. Kva er det maksimale eksterne minneområdet mikrokontrolleren kan adressere?
b. Kva er adresseområdet for RAM 1-, RAM 2- og ROM-brikken? Teikn minnekart for systemet.

Page 2 of ??

c.
A0

Address bus

Microcontroller

A15

CS
R/W

CS
R

D[7:0]

RAM 1
R/W
Data[7:0]

D[7:0]

ROM

Data bus

8

Figur 2: New address decoding.
d. For å få ned produksjonskostnaden for systemet, er det foreslått eit nytt maskinvaredesign,
sjå figur ??. I det nye designet er dei to RAM-brikkane erstatta av ein RAM-brikke som er
dobbelt så stor.
i) Er minnekartet for systema i figur ?? og figur ?? identiske?
ii) Er det mogleg å behalde programvare utvikla for systemet i figur ?? utan endringar på
det nye maskinvaredesignet? Forklar.

Page 3 of ??

O PPGÅVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJONAR (15%)
Bruk vedlagte diagram i figur ??, figur ??, figur ?? og figur ?? for IJVM til å løyse oppgåvene.
(i) Komponenten 4-to-16 Decoder i figur ?? er brukt til å kontrollere kva som skal liggje
på B-bus. For C-Busen er separate bit brukt til å kontrollere kvart register. Kvifor?
(ii) Lag mikroinstruksjon(ar) for følgjande IJVM-operasjon: OPC = TOS - LV + 1.
Sjå vekk frå Addr- og J-felta i mikroinstruksjonsformatet. Angi korrekte bit for ALU,
C, Mem og B gitt i figur ??.

Page 4 of ??

O PPGÅVE 3: I NSTRUKSJONSSETT A RKITEKTUR (ISA)(25%)
Ein særs enkel prosessor har ein ”load”, ein ”store”, 8 ALU-instruksjonar og nokre spesialinstruksjonar, inkludert NOP-instruksjonen. Instruksjonsformatet for instruksjonane er vist
i figur ??. Alle register og bussar er 32-bit. Prosessoren er av typen "Harvard architecture".
Load/store:
Load:
opCode

Rn

Rn

DC
0

32

Store:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

opCode

Rn

Rn

Rn

opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

DC

DC

DC

8 bit

8 bit

32

0

ALU:
32

0

32

0

8 bit

Spesial:
NOP:
opCode
32

0

8 bit

8 bit

MOVC:
opCode

Rn

Constant

32

0

8 bit

8 bit

8 bit

CP:
opCode

Rn

Rn

8 bit

8 bit

DC

32

0

8 bit

8 bit

LDM/SDM:
opCode

Rn

Adr

8 bit

16 bit

32

0

8 bit

Rn: any user register, R0 - R15
DC: Don’t care: any data memory location
Constant: Constant number
Adr: 16 bit address, 0000 0000 - 0000 FFFF

Figur 3: Instruksjonsformat.

Page 5 of ??

Instructions set:
LOAD: Load data from memory.
load Rn, Rn Load register Rn from memory location in Rn.
STORE: Store data in memory.
store Rn, Rn Store register Rn in memory location in Rn.
ALU: Data manipulation, register–register operations.
ADD Rn, Rn, Rn ADD, Rn = Rn + Rn.
NAND Rn, Rn, Rn Bitwise NAND, Rn = Rn · Rn.
OR Rn, Rn, Rn Bitwice OR, Rn = Rn + Rn.
INV Rn, Rn Bitwice invert, Rn = Rn.
INC Rn, Rn Increment, Rn = Rn + 1.
DEC Rn, Rn Decrement, Rn = Rn − 1.
MUL Rn, Rn, Rn Multiplication, Rn = Rn ∗ Rn.
CMP, Rn, Rn Compare, Z-flag = 1 if Rn = Rn, else Z-flag = 0.
Special: Misc.
CP Rn, Rn Copy, Rn < − Rn.
NOP Waste of time, 1 clk cycle.
MOVC Rn, constant Put a constant in register, Rn = C.
LDM Rn, Adr Load Rn with content of memory Address.
SDM Rn, Adr Store content of Rn in memory Address.
Rn: Any user register.
DC: Don’t care.
C: Constant.
Adr: 16 bit address space, 0000 0000 - 0000 FFFF.

Page 6 of ??

(i) Basert på tilgjengeleg informasjon kan ein ikkje definera denne prosessoren til å være
generell.
i) Kvifor?
ii) Kva må til for at prosessoren skal være generell? Gi eit døme.
(ii) NOP-instruksjonen er ei 0-adresseinstruksjon (Zero-address instruction). Kva andre
adresseringar (addressing) er brukt i instruksjonssettet?
(iii) MOVC-instruksjonen flytter ein konstant verdi inn i eit register.
i) Kva adresseringsmodus (addressing mode) er brukt i MOVC-instruksjonen?
ii) Når kan verdien til konstanten definerast?
(iv) Er det mogleg å bestemme om denne prosessoren nyttar samleband (pipelining) utfrå
tilgjengeleg informasjon? Forklar kvifor/kvifor ikkje.
(v) Kva er det totale minneområdet prosessoren kan adressera?

Page 7 of ??

O PPGÅVE
B ))

4: D ATAMASKINER OG YTING (25% (10% ON A ; 15% ON

(i) Figure ?? and Figure ?? i appendix viser ulike versjonar av IJVM-mikroarkitekturen.
Den orginale mikroarkitekturen er vist i figur ??.

i) Vil endringen i mikroarkitektur frå figur ?? til figur ?? kreve endringar i MIR?
Forklar.
ii) I figur ?? er samleband innført. Er superscalarity ein eigenskap som er tilstades i
mikroarkitekturen vist i figur ???
iii) Mikroarkitekturane vist i figur ?? og figur ?? krever også endringar i mikroinstruksjonane. Vil ISA-nivået bli påverka av at ein endrar korleis instruksjonar vert
utført på mikroarkitekturnivå?
(ii) I ein tenkt prosessorfamilie, iBeast, eksisterar det to versjonar: iAardvark og iArmadillo. iAardvark er eit trestegs samlebanddesign. iArmadillo er eit femstegs samlebanddesign. Figur ?? viser dei to samlebanda med trinnforsinking.
Stage 1
5ns

Stage 2

Stage 3

5ns

20ns

Ardvark Pipeline, 3 stages

Stage 1

Stage 2

Stage 3

Stage 4

Stage 5

5ns

5ns

7.5ns

7.5ns

5ns

Armadillo Pipeline Y, 5 stages

Figur 4: Samlebandtidsbruk for iArmadillo- og iAardvark-versionane av iBeast.
i) Estimer maksimal klokkefrekvens for iArmadillo og iAardvark.
ii) Estimer klokkefrekvens for ein iBeast-prosessorversjon utan samleband.
iii) Prosessorfamilien er produsert i ein 22nm-prosess. Korleis vil mest truleg ein nedskalering til ein 18nm-produksjonsprosess påverke trinnforsinkelsen?
iv) Lat oss si at du vil lage ein Chip Multi Processor (CMP)-version av iBeast-prosessoren.
Kva prosessorkjerne, iArmadillo eller iAardvark, vil være det beste valget viss
høg ILP er målet? Forklar.
v) Vil CMP-versionen av iBeast-prosessoren være av type "homogeneous” eller "heterogeneous”?

Page 8 of ??

O PPGÅVE 5: D IVERSE BINÆR - QUIZ (10%)
Vel rett svar, sant eller usant. Korrekt svar gir 2 %, feil -1 %, blank eller fleire svar på ei
oppgåve gir 0 %.
(i) Ein EPROM kan slettast og reprogramerast. Sant eller usant?
(ii) Figur ?? viser eit system med multiplexa adressebuss og databuss. Sant eller usant?

Figur 5: Bus interface.
(iii) SRAM er raskare enn DRAM. Sant eller usant?
(iv) Figur ?? er eit døme på synkron bussoverføring. Sant eller usant?

Figur 6: Bus transfer.
(v) Innføring av hurtigbuffer (cache) i minnehirarkiet er ein måte å auke den totale mengda eksternt minne som kan adresserast. Sant eller usant?

Page 9 of ??

IJVM appendix

Page 10 of ??

Figur 7: Block diagram (IJVM).

Page 11 of ??

Figur 8: Microinstruction format (IJVM).

Page 12 of ??

A NSWER K EY

FOR

Page 1 of ??

T HE E XAM

O PPGÅVE
C ))

1: D IGITAL L OGISK N IVÅ (25% (5% ON A , 10% ON B AND

I figur ?? er det eksterne bussgrensesnittet for ein mikrokontroller vist. Det er brukt to RAMbrikker på 32kB og ein ROM-brikke på 1kB. Adressedekodingen er bygd opp av OR-portar
og inverterportar. Alle einingane har eit aktivt lågt (logisk ”0”) CS (Chip Select)-signal.
(i) Kva er det maksimale eksterne minneområdet mikrokontrolleren kan adressere?
Answer: 64kB (216 )
(ii) Kva er adresseområdet for RAM 1-, RAM 2- og ROM-brikken? Teikn minnekart for
systemet.
Answer: ROM 0000 - 00FF
RAM1 0100 - 7FFF
RAM2 8000 - FFFF

Page 2 of ??

(iii)
(iv) For å få ned produksjonskostnaden for systemet, er det foreslått eit nytt maskinvaredesign, sjå figur ??. I det nye designet er dei to RAM-brikkane erstatta av ein RAM-brikke
som er dobbelt så stor.
i) Er minnekartet for systema i figur ?? og figur ?? identiske?
ii) Er det mogleg å behalde programvare utvikla for systemet i figur ?? utan endringar på det nye maskinvaredesignet? Forklar.
Answer: i) Ja dei to minnekarta er identiske.
ii) Ja det er mulig mikrokontrolleren har dei samme minneadressene tilgjengeleg. Det einaste som er forskjelig er at dekodinga er for ein brikke. Det gjer
ingen forskjell for programm som er utvikla for systemet i fig. 1. sidan systemet sin minnemodell er lik.

Page 3 of ??

O PPGÅVE 2: M IKROARKITEKTUR OG MIKROINSTRUKSJONAR (15%)
Bruk vedlagte diagram i figur ??, figur ??, figur ?? og figur ?? for IJVM til å løyse
oppgåvene.
i. Komponenten 4-to-16 Decoder i figur ?? er brukt til å kontrollere kva som skal
liggje på B-bus. For C-Busen er separate bit brukt til å kontrollere kvart register.
Kvifor?
Answer: Ikkje mulig å legge ut fleire register på felles buss (B-Buss), vil skape
konflikt, derfor er kontroll av B-Buss koda med 4 bit i MIR, sparar også
plass i control store. C-buss verdien er mulig å lagre i fleire register, derfor
seperate bit for kontroll av kvart register.
Lag mikroinstruksjon(ar) for følgjande IJVM-operasjon: OPC = TOS - LV + 1.
Sjå vekk frå Addr- og J-felta i mikroinstruksjonsformatet. Angi korrekte bit for
ALU, C, Mem og B gitt i figur ??.
ii. Answer: Her er det mange løysingar, alt etter kva valg ein gjer for kvar microinstruksjon, viktigt at ein ser at det må være fleire sidan ein må bruke
H-register til mellom lagring og at ein stokkar rett når ein brukar B - A ALUfunksjon
Eksempel løysing 1:
LV -> H: ALU: 010100 (B) C: 100000000 (H) Mem: 000 B: 0101 (5)
TOS - H -> H: ALU: 111111 (B - A) C: 100000000 (H) Mem: 000 B: 0111 (7)
H + 1 -> OPC: ALU: 010100 (A + 1) C: 010000000 (OPC) Mem: 000 B: 1001
(none)
Har då gjort OPC = (TOS - LV) + 1 med 3 mikroinstruksjonar.
Eksempel løysing 2:
LV + 1 -> H: ALU: 110111 (B + 1) C: 100000000 (H) Mem: 000 B: 0101 (5)
TOS - H -> OPC: ALU: 111111 (B - A) C: 010000000 (OPC) Mem: 000 B: 0111
(7)
Har då gjort OPC = TOS - (LV + 1) med 2 mikroinstruksjonar.
Det er fleire løysingar, men som vist i eksempel må TOS og LV mellomlagrast rett for å nytte B - A ALU-funksjon.

Page 4 of ??

O PPGÅVE 3: I NSTRUKSJONSSETT A RKITEKTUR (ISA)(25%)
Ein særs enkel prosessor har ein ”load”, ein ”store”, 8 ALU-instruksjonar og nokre spesialinstruksjonar, inkludert NOP-instruksjonen. Instruksjonsformatet for instruksjonane er vist i figur ??. Alle register og bussar er 32-bit. Prosessoren er av typen "Harvard
architecture".

Page 5 of ??

Instructions set:
LOAD: Load data from memory.
load Rn, Rn Load register Rn from memory location in Rn.
STORE: Store data in memory.
store Rn, Rn Store register Rn in memory location in Rn.
ALU: Data manipulation, register–register operations.
ADD Rn, Rn, Rn ADD, Rn = Rn + Rn.
NAND Rn, Rn, Rn Bitwise NAND, Rn = Rn · Rn.
OR Rn, Rn, Rn Bitwice OR, Rn = Rn + Rn.
INV Rn, Rn Bitwice invert, Rn = Rn.
INC Rn, Rn Increment, Rn = Rn + 1.
DEC Rn, Rn Decrement, Rn = Rn − 1.
MUL Rn, Rn, Rn Multiplication, Rn = Rn ∗ Rn.
CMP, Rn, Rn Compare, Z-flag = 1 if Rn = Rn, else Z-flag = 0.
Special: Misc.
CP Rn, Rn Copy, Rn < − Rn.
NOP Waste of time, 1 clk cycle.
MOVC Rn, constant Put a constant in register, Rn = C.
LDM Rn, Adr Load Rn with content of memory Address.
SDM Rn, Adr Store content of Rn in memory Address.
Rn: Any user register.
DC: Don’t care.
C: Constant.
Adr: 16 bit address space, 0000 0000 - 0000 FFFF.

Page 6 of ??

i. Basert på tilgjengeleg informasjon kan ein ikkje definera denne prosessoren til å
være generell.
i) Kvifor?
ii) Kva må til for at prosessoren skal være generell? Gi eit døme.
i) Manglar instruksjon for conditional branch (flow control, betinga
hopp).
ii) Legg til conditional Branch. Har oppgitt at det er eit Z-flagg tilgjengeleg
(CMP-instruksjon). Kan då bruke CMP til å utføre test. Legg då til ein
branch instruksjon, f.eks. branch on zero; BZ Rn, hopp til adr gitt i Rn
viss Z = 1. (PC = Rn), viss Z = 0 utfør neste instruksjon. (Her er det
mange mulige eksempel løysingar, men må få til betinga hopp.

Answer:

ii. NOP-instruksjonen er ei 0-adresseinstruksjon (Zero-address instruction). Kva andre adresseringar (addressing) er brukt i instruksjonssettet?
Answer: Denne møten å klasifisere instruksjonar på (Zero-address instruction)
angir operandar som er i bruk, 0 til n. For denne maskina er det i tillegg til
Zero-address:
Two-address: e.g. CMP
Three-address: e.g. Add
iii. MOVC-instruksjonen flytter ein konstant verdi inn i eit register.
i) Kva adresseringsmodus (addressing mode) er brukt i MOVC-instruksjonen?
ii) Når kan verdien til konstanten definerast?
i) Immidiate Addressing modi. konstanten er ein immidiate operand.
Operanden blir henta frå programminne som ein del av instruksjonen.
ii) Immidiate operandar må då definerast i koden (Compile time) altså
når programme blir laga. (Sidan prosessoren er ein Harvard prosessor er det heller ikkje mulig å endre verdien på konstanten med ”selfmodifying code").

Answer:

iv. Er det mogleg å bestemme om denne prosessoren nyttar samleband (pipelining)
utfrå tilgjengeleg informasjon? Forklar kvifor/kvifor ikkje.
Answer: Nei, ingen detaljar om korleis implemantasjonen er gjort prosessoren
er skissert på ISA-nivå.
v. Kva er det totale minneområdet prosessoren kan adressera?
Answer: 232 . dette er område som Load og Store instruksjonane kan adressere.
232 sidan alle register og bussar er 32 bit (LDM og SDM er instruksjonar nyttar eit Direkte Addresing modi, men kan kunn nå 2 16 lokasjonar frå 0x0000
0000 - 0x0000 FFFF. Så desse instruksjonane kan kunn nå eit sub-sett av det
totale minneområde (det er ein F formykje i oppgåvesette for oppgit Adr
felt, ingen innvirking på total adr. minneområde).

Page 7 of ??

O PPGÅVE 4: D ATAMASKINER OG YTING (25% (10% ON A ; 15%
ON B ))
i. Figure ?? and Figure ?? i appendix viser ulike versjonar av IJVM-mikroarkitekturen.
Den orginale mikroarkitekturen er vist i figur ??.

i) Vil endringen i mikroarkitektur frå figur ?? til figur ?? kreve endringar i
MIR? Forklar.
ii) I figur ?? er samleband innført. Er superscalarity ein eigenskap som er tilstades i mikroarkitekturen vist i figur ???
iii) Mikroarkitekturane vist i figur ?? og figur ?? krever også endringar i mikroinstruksjonane. Vil ISA-nivået bli påverka av at ein endrar korleis instruksjonar vert utført på mikroarkitekturnivå?
i) Må no også ha kontroll signal for å legje register innhald ut på ABuss (kan då gjere som for B-Buss 4 bit og 4-to-16 dekoder).
ii) Har lagt til pipelining, men dupliserar ingen utførande einingar, ingen
sann parallellitet. Så MIC 3 er ikkje ein superscalar prosessor.
iii) Nei, ISA vil ikkje bli påvirka, instruksjonsett og minnemodell er heilt
lik.

Answer:

ii. I ein tenkt prosessorfamilie, iBeast, eksisterar det to versjonar: iAardvark og iArmadillo. iAardvark er eit trestegs samlebanddesign. iArmadillo er eit femstegs
samlebanddesign. Figur ?? viser dei to samlebanda med trinnforsinking.
i) Estimer maksimal klokkefrekvens for iArmadillo og iAardvark.
ii) Estimer klokkefrekvens for ein iBeast-prosessorversjon utan samleband.
iii) Prosessorfamilien er produsert i ein 22nm-prosess. Korleis vil mest truleg
ein nedskalering til ein 18nm-produksjonsprosess påverke trinnforsinkelsen?
iv) Lat oss si at du vil lage ein Chip Multi Processor (CMP)-version av iBeastprosessoren. Kva prosessorkjerne, iArmadillo eller iAardvark, vil være det
beste valget viss høg ILP er målet? Forklar.
v) Vil CMP-versionen av iBeast-prosessoren være av type "homogeneous” eller "heterogeneous”?
i) f = 1/t (t lengste trinn). f = 1/20ns for iAardvark og f = 1/7.5ns
for iArmadillo.
ii) Viss alle samlebandstega fjernast må alle trinn fortsatt utførast. Får då
eit estimat på f = 1/30ns
iii) Trinnforsinkelsen vil gå ned. (dette er henta rett ut frå kvifor Moores lov
virkar på ytelse (hastigheit) også. Når ein skalerar ned vil transistorar
kunne toggle raskare (mindre kapasitans)).

Answer:

Page 8 of ??

iv) iAardvark proseserar 3 inst. samstundes og iArmadillo proseserar 5 inst
samstundes (5 trinn (5 mot 3)) så iArmadillo er best viss høg Instruction
Level Paralellism (ILP) er målet.
v) Homogeneous (kunn like kjerner).

Page 9 of ??

O PPGÅVE 5: D IVERSE BINÆR - QUIZ (10%)
Vel rett svar, sant eller usant. Korrekt svar gir 2 %, feil -1 %, blank eller fleire svar
på ei oppgåve gir 0 %.
A. Ein EPROM kan slettast og reprogramerast. Sant eller usant?
Answer: Sant.
B. Figur ?? viser eit system med multiplexa adressebuss og databuss. Sant eller
usant?
Answer: Sant.
C. SRAM er raskare enn DRAM. Sant eller usant?
Answer: Sant.
D. Figur ?? er eit døme på synkron bussoverføring. Sant eller usant?
Answer: Usant, det er ingen klokke.
E. Innføring av hurtigbuffer (cache) i minnehirarkiet er ein måte å auke den
totale mengda eksternt minne som kan adresserast. Sant eller usant?
Answer: Usant (cache er kunn ein avbilding (buffer)).

Page 10 of ??

IJVM appendix

Page 11 of ??

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 9: ALU functions (IJVM).

Page 12 of ??

Figur 10: Timing diagram (IJVM).

Page 13 of ??

Figur 11: Alternative microarchitecture I.

Page 14 of ??

Figur 12: Alternative microarchitecture II.

Page 15 of ??

A0

Address bus

Microcontroller

A15

CS
R/W

R

RAM 1
R/W
Data[7:0]

CS
R/W

CS
D[7:0]

D[7:0]

ROM

Data bus

D[7:0]

RAM 2
D[7:0]

8

Figur 13: Address decoding.

0xFFFF

RAM

0x0100
0x00FF
ROM
0x0000

Figur 14: Memmory map for fig. 1.

Page 16 of ??

A0

Address bus

Microcontroller

A15

CS
R/W

CS
R

D[7:0]

RAM 1
R/W
Data[7:0]

D[7:0]

ROM

Data bus

8

Figur 15: New address decoding.

0xFFFF

RAM

0x0100
0x00FF
ROM
0x0000

Figur 16: Memmory map for fig. 2.

Page 17 of ??

Load/store:
Load:
opCode

Rn

Rn

DC
0

32

Store:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

opCode

Rn

Rn

Rn

opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

DC

DC

DC

8 bit

8 bit

32

0

ALU:
32

0

32

0

8 bit

Spesial:
NOP:
opCode
32

0

8 bit

8 bit

MOVC:
opCode

Rn

Constant

32

0

8 bit

8 bit

8 bit

CP:
opCode

Rn

Rn

8 bit

8 bit

DC

32

0

8 bit

8 bit

LDM/SDM:
opCode

Rn

Adr

8 bit

16 bit

32

0

8 bit

Rn: any user register, R0 - R15
DC: Don’t care: any data memory location
Constant: Constant number
Adr: 16 bit address, 0000 0000 - 0000 FFFF

Figur 17: Instruksjonsformat.

Stage 1
5ns

Stage 2

Stage 3

5ns

20ns

Ardvark Pipeline, 3 stages

Stage 1

Stage 2

Stage 3

Stage 4

Stage 5

5ns

5ns

7.5ns

7.5ns

5ns

Armadillo Pipeline Y, 5 stages

Figur 18: Samlebandtidsbruk for iArmadillo- og iAardvark-versionane av iBeast.

Page 18 of ??

Figur 19: Bus interface.

Figur 20: Bus transfer.

Page 19 of ??

Figur 21: Block diagram (IJVM).

Page 20 of ??

Figur 22: Microinstruction format (IJVM).

Page 21 of ??

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 23: ALU functions (IJVM).

Page 22 of ??

Figur 24: Timing diagram (IJVM).

Page 23 of ??

Figur 25: Alternative microarchitecture I.

Page 24 of ??

Figur 26: Alternative microarchitecture II.

Page 25 of ??

Norwegian University of Science and Technology
Engineering
The Department of Computer and Information Science

TDT4160

D ATAMASKINER GRUNNKURS
E KSAMEN
16. DESEMBER , 2013, 09:00–13:00

Kontakt under eksamen:
Gunnar Tufte 73590356/97402478
Tillatte hjelpemidler:
D.
Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillatt.
Målform:
Bokmål

Page 1 of 20

O PPGAVE 1: O PPSTART, L ITT AV HVERT (25 %)
a. Unrer konstruksjon av et datamaskinsystem er det krav til minnesystemet om en gjennomsnittlig minneaksesstid (memory access time) på minimum 4.5ns. To forskjellige løsninger
er tilgjengelig.
Minnesystem-A har et nivå med hurtigbuffer (cache) med en aksesstid på 2ns og med et
trefforholdstall (hit ratio) på 90 %. Hovedminnet har en aksesstid på 20ns.
Minnesystem-B har et nivå med hurtigbuffer (cache) med en aksesstid på 1ns og med et trefforholdstall (hit ratio) på 60 %. Hovedminnet har en aksesstid på 15ns.
Tilfredstiller noen av de to minnesystemene kravet om 4.5ns gjennomsnittlig minneaksesstid? I så fall hvilket?
b. Ut fra informasjonen i figur 1, er dette en asynkron eller synkron bussoverføring? Begrunn
svaret kort.

Figur 1: Address decoding.
c. Hva kjennetegner superskalareprosessorer?
d. Memory wall (minne veggen) er et begrep som blant annet skaper problemer innen skalering. Hvilke egenskaper ved prosessorer og minne ligger i begrepet?
e. Hvordan påvirkes Instruksjonsnivåparallellitet (Instruction Level parallellism (ILP)) av antall trinn i samlebånd (pipeeline)? Forklar kort.

Page 2 of 20

O PPGAVE 2: D IGITALT L OGISK N IVÅ (25 % (15 % PÅ A , 10 % PÅ B ))
I figur 2 er det eksterne bussgrensesnittet for en mikrokontroller vist. Alle enhetene har et aktivt
lavt (logisk ”0”) CS (Chip Select)-signal.
A0

Address bus

A[23:0]

NAND

OR

Microcontroller

A23

R/W
Data[15:0]

CS
R/W
D[15:0]

CS
R/W
D[15:0]

RAM 1

RAM 2

Data bus D[15:0]

?
CS
R

CS
R/W
D[15:0]

RAM 3

D[15:0]

ROM

16

Figur 2: Address decoding.
a.

i) Hva er adresseområde for RAM 1, RAM 2 og RAM 3?
ii) Tegn minnekart (memory map) for systemets RAM-brikker.
iii) Er det overlapp/konflikter i RAM-adresserommet?

b. i) Hva er det maksimale antall addresser som kan utnyttest til ROM-brikken? Angi antall
adresser (ord) eller tegn et adresse kart.
ii) Angi maksimal størrelse på ROM-brikke i bytes.

Page 3 of 20

O PPGAVE 3: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (25 % (5 %
PÅ A , 10 % PÅ B OG C ))
Bruk vedlagte diagram i figur 4, figur 5, figur 6, figur 7, figur 8 og figur 9 for IJVM til å løse
oppgavene.
a. Hva brukes registerne MAR og MDR i figur 4 til?
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: OPC = MDR + LV + CPP + 2. Bruk
mikroarkitekturen i figur 4.
Du trenger ikke ta hensyn til Addr- og J-feltene. Oppgi korrekt bit-verdi for ALU-, C-, Memog B-feltene. – Se figur 5.
c. i) For å få bedre ytelse blir mikroarkitekturen endret til å bruke datapath som er vist i figur 8.Hvordan vil dette påvirke mikroinstruksjonene for instruksjonen: OPC = MDR + LV +
CPP + 2? Gi eksempel på hvordan den nye mikroarkitekturen kan øke ytelsen.
ii) For ytterliger øking av ytelse skiftest det til mikroarkitekturen vist i figur 9. Hvilke ytelseforbedrings tiltak er gjort i figur 9?

Page 4 of 20

O PPGAVE 4: I NSTRUKSJONSSETT ARKITEKTUR (ISA)(25 % (10 % PÅ A OG
B , 5 % PÅ B ))
En svært enkel prosessor har to laste- og lagre-instruksjon (load and store instruction), 8 ALUinstruksjoner, noen spesielle instruksjoner som inkluderer NOP-instruksjonen og to flytkontrollinstruksjoner (flow control instructions). Instruksjonsformatet er vist i figur 3. Alle registre og
busser er 32-bit. Prosessoren har en Harvard-arkitektur.
Load/store:
Load:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

0

32

8 bit

LoadDI:
opCode

Adr

8 bit

24 bit

32

0

Store:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

32

0

StoreDI:
opCode

Adr

8 bit

24 bit

32

0

ALU:
opCode

Rn

Rn

Rn

32

0

opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

opCode

DC

DC

DC

8 bit

8 bit

8 bit

32

0

Spesial:
NOP:
32

0

8 bit

MOVC:
opCode

Rn

Constant

32

0

8 bit

8 bit

16 bit

CP:
opCode

Rn

Rn

8 bit

8 bit

DC

32

0

8 bit

8 bit

Flow control:
BZ
opCode

Rn

DC

8 bit

8 bit

16 bit

opCode

DC

DC

8 bit

8 bit

32

0

RT
DC

32

0

8 bit

Rn: any user register, R0 - R15
DC: Don’t care. Adr: any data memory location within range.

Figur 3: Instruction formats.

Page 5 of 20

8 bit

Instructions set:
LOAD: Load data from memory.
load Rn, Rn Load register Rn from memory location in Rn.
LOADDI: Load data from memory.
load Adr Load register R0 from memory location Adr.
STORE: Store data in memory.
store Rn, Rn Store register Rn in memory location in Rn.
STOREDI: Store data in memory.
store Adr Store register R0 in memory Adr.
ALU: Data manipulation, register–register operations.
ADD Rn, Rn, Rn ADD, Rn = Rn + Rn. Set Z-flag if result =0.
NAND Rn, Rn, Rn Bitwise NAND, Rn = Rn · Rn. Set Z-flag if result =0.
OR Rn, Rn, Rn Bitwice OR, Rn = Rn + Rn. Set Z-flag if result =0.
INV Rn, Rn Bitwice invert, Rn = Rn. Set Z-flag if result =0.
INC Rn, Rn Increment, Rn = Rn + 1. Set Z-flag if result =0.
DEC Rn, Rn Decrement, Rn = Rn − 1. Set Z-flag if result =0.
MUL Rn, Rn, Rn Multiplication, Rn = Rn ∗ Rn. Set Z-flag if result =0.
CMP, Rn, Rn Compare, Set Z-flag if Rn = Rn
Special: Misc.
CP Rn, Rn Copy, Rn < − Rn
NOP Waste of time, 1 clk cycle.
MOVC Rn, constant Put a constant in register Rn = C.
Flow control: Branch.
BZ, Rn Conditional branch on zero, PC = Rn.
RT Return, return from branch.
Rn: Any user register. Target register to the left, i.e. ADD R1, R1 , R3: R1 = R1 + R3.
DC: Don’t care.

Page 6 of 20

a. En tenkt kodesnutt leser to verdier fra to minneadresser. Hvordan kan PC (Program Counter) avhenge av innholdet i disse minneadressene for den oppgitte sudokoden (Hvilke mulige verdier kan PC ha etter at koden har kjørt)?
• LOADDI 0x00 FF FF 00;
• CP R1, R0;
• LOADDI 0x00 FF FF 04;
• OR R0, R0, R1;
• BZ R0
b. 1) Angi hvilke adresseringsmodi (addressing modes) som brukes i følgende instruksjoner:
i) LOADDI
ii) LOAD
ii) MOVEC
2) Ut fra gitt instruksjonssett gi eksempel på instruksjonstype (instruction format):
i) Null adresse instruksjon (Zero-address instruction).
ii) Tre adresse instruksjon (Three-address instruction).
c. Er det mulig å utvide instruksjonsettet med fleire instruksjonar, f.eks. med shift instruksjonar, utan å endre på ISA? Begrunn svaret.

Page 7 of 20

IJVM appendix

Page 8 of 20

Figur 4: Block diagram (IJVM).

Page 9 of 20

Figur 5: Microinstruction format (IJVM).

Page 10 of 20

A NSWER K EY

FOR

T HE E XAM

Page 1 of 20

O PPGAVE 1: O PPSTART, L ITT AV HVERT (25 %)
a. Unrer konstruksjon av et datamaskinsystem er det krav til minnesystemet om en gjennomsnittlig minneaksesstid (memory access time) på minimum 4.5ns. To forskjellige løsninger
er tilgjengelig.
Minnesystem-A har et nivå med hurtigbuffer (cache) med en aksesstid på 2ns og med et
trefforholdstall (hit ratio) på 90 %. Hovedminnet har en aksesstid på 20ns.
Minnesystem-B har et nivå med hurtigbuffer (cache) med en aksesstid på 1ns og med et trefforholdstall (hit ratio) på 60 %. Hovedminnet har en aksesstid på 15ns.
Tilfredstiller noen av de to minnesystemene kravet om 4.5ns gjennomsnittlig minneaksesstid? I så fall hvilket?
Answer: Går ut frå at all minneaksess går via cache:
mean access time = c + ((1 − h) ∗ m);
Minnesystem-A: 2 + (1 − 0.9) ∗ 20) = 4ns
Minnesystem-B: 1 + (1 − 0.6) ∗ 15) = 7ns
Viss ein går ut frå at ein kan aksessere minne direkte også får ein noko slikt: mean access
time = h ∗ c + ((1 − h) ∗ m);
Minnesystem-A: 2 ∗ 0.9 + (1 − 0.9) ∗ 20) = 3.8ns
Minnesystem-B: 1 ∗ 0.6 + (1 − 0.6) ∗ 15) = 6.6ns
Ikkje heilt korrekt men gir rett konklusjon.
b. Ut fra informasjonen i figur 1, er dette en asynkron eller synkron bussoverføring? Begrunn
svaret kort.
Answer: Ingen klokke = asynk.
c. Hva kjennetegner superskalareprosessorer?
Answer: Duplisering av utførende enheter i datapath", samlebånd kan då innholde dupliserte einingar, f.eks. duplisere ALU trinn. (Høg ILP).
d. Memory wall (minne veggen) er et begrep som blant annet skaper problemer innen skalering. Hvilke egenskaper ved prosessorer og minne ligger i begrepet?
Answer: Prosessor ytelsen aukar fortare enn minne ytelsen. Prossesor ytelse, klokke og prosesseringskapasitet (throughput), aukar mykje fortare enn minne aksesstid minkar.
e. Hvordan påvirkes Instruksjonsnivåparallellitet (Instruction Level parallellism (ILP)) av antall trinn i samlebånd (pipeeline)? Forklar kort.
Answer: ILP aukar ved auke i samlebandsteg. Fordi antall instruksjoner som samlebandet
behandlar aukar.

Page 2 of 20

O PPGAVE 2: D IGITALT L OGISK N IVÅ (25 % (15 % PÅ A , 10 % PÅ B ))
I figur 2 er det eksterne bussgrensesnittet for en mikrokontroller vist. Alle enhetene har et aktivt
lavt (logisk ”0”) CS (Chip Select)-signal.
a.

i) Hva er adresseområde for RAM 1, RAM 2 og RAM 3?
ii) Tegn minnekart (memory map) for systemets RAM-brikker.
iii) Er det overlapp/konflikter i RAM-adresserommet?
Answer: i) RAM 1: 0x00 00 00 - 0x00 FF FF
RAM 2: 0x0E 00 00 - 0x0F FF FF
RAM 3: 0x80 00 00 - 0xCF FF FF
ii) Tegning der alle tre RAM-brikker er med.
iii) Nei, ser lett ut frå adr. kartet.

b. i) Hva er det maksimale antall addresser som kan utnyttest til ROM-brikken? Angi antall
adresser (ord) eller tegn et adresse kart.
ii) Angi maksimal størrelse på ROM-brikke i bytes.
Answer: i) Adresse tilgjengelig: 0x01 00 00 - 0x0D FF FF , 0x10 00 00 - 0x7F FF FF og 0xD0
00 00 - 0xFF FF FFF. Eller tegn kart. Eller angi ledige adresser.
ii) dobbelt av i). Sidan databussen er på 16 bit.

Page 3 of 20

O PPGAVE 3: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (25 % (5 %
PÅ A , 10 % PÅ B OG C ))
Bruk vedlagte diagram i figur 4, figur 5, figur 6, figur 7, figur 8 og figur 9 for IJVM til å løse
oppgavene.
a. Hva brukes registerne MAR og MDR i figur 4 til?
Answer: Grensesnitt mot eksterntminne. MAR: peikar til minne adresse i eksternt minne.
MDR data som skal skrivast til minne adresse gitt i MAR ved skriveoperasjon, eller
innhold i minneadresse peika på av MAR ved leseopperasjon.
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: OPC = MDR + LV + CPP + 2. Bruk
mikroarkitekturen i figur 4.
Du trenger ikke ta hensyn til Addr- og J-feltene. Oppgi korrekt bit-verdi for ALU-, C-, Memog B-feltene. – Se figur 5.
Answer: Ein mulig løysing:
1: ALU: B-function, B-bus: MDR, C-bus: H [010100][0 (0000)][100000000]
2: ALU: A + B + 1, B-Bus: LV, C-bus: H [111101][5 (0101)][100000000]
3: ALU: A + B + 1, B-bus: CPP, C-bus: OPC [111101][6 (0110)][010000000]
Alle løysingar som gir OPC = MDR + LV + CPP + 2 er like rett.
c. i) For å få bedre ytelse blir mikroarkitekturen endret til å bruke datapath som er vist i figur 8.Hvordan vil dette påvirke mikroinstruksjonene for instruksjonen: OPC = MDR + LV +
CPP + 2? Gi eksempel på hvordan den nye mikroarkitekturen kan øke ytelsen.
ii) For ytterliger øking av ytelse skiftest det til mikroarkitekturen vist i figur 9. Hvilke ytelseforbedrings tiltak er gjort i figur 9?
Answer: i):
Kan nå utnytte den nye bussen for å slippe å bruke H-registeret for alle to-operand
ALU-funksjoner. F.eks. for OPC = MDR + LV + CPP + 2:
1 : ALU: A + B + 1, A-Bus: MDR, B-Bus: LV, C-bus: OPC
2 : ALU: A + B + 1, A-Bus: OPC, B-Bus: CPP, C-bus: OPC
ii):
Pipelining som gir økt ILP samt muligheit for høgare klokkefrekvens. (det er også lagt
til ein IFU men ikkje nødvendigt for korrekt svar).

Page 4 of 20

O PPGAVE 4: I NSTRUKSJONSSETT ARKITEKTUR (ISA)(25 % (10 % PÅ A OG
B , 5 % PÅ B ))
En svært enkel prosessor har to laste- og lagre-instruksjon (load and store instruction), 8 ALUinstruksjoner, noen spesielle instruksjoner som inkluderer NOP-instruksjonen og to flytkontrollinstruksjoner (flow control instructions). Instruksjonsformatet er vist i figur 3. Alle registre og
busser er 32-bit. Prosessoren har en Harvard-arkitektur.

Page 5 of 20

Instructions set:
LOAD: Load data from memory.
load Rn, Rn Load register Rn from memory location in Rn.
LOADDI: Load data from memory.
load Adr Load register R0 from memory location Adr.
STORE: Store data in memory.
store Rn, Rn Store register Rn in memory location in Rn.
STOREDI: Store data in memory.
store Adr Store register R0 in memory Adr.
ALU: Data manipulation, register–register operations.
ADD Rn, Rn, Rn ADD, Rn = Rn + Rn. Set Z-flag if result =0.
NAND Rn, Rn, Rn Bitwise NAND, Rn = Rn · Rn. Set Z-flag if result =0.
OR Rn, Rn, Rn Bitwice OR, Rn = Rn + Rn. Set Z-flag if result =0.
INV Rn, Rn Bitwice invert, Rn = Rn. Set Z-flag if result =0.
INC Rn, Rn Increment, Rn = Rn + 1. Set Z-flag if result =0.
DEC Rn, Rn Decrement, Rn = Rn − 1. Set Z-flag if result =0.
MUL Rn, Rn, Rn Multiplication, Rn = Rn ∗ Rn. Set Z-flag if result =0.
CMP, Rn, Rn Compare, Set Z-flag if Rn = Rn
Special: Misc.
CP Rn, Rn Copy, Rn < − Rn
NOP Waste of time, 1 clk cycle.
MOVC Rn, constant Put a constant in register Rn = C.
Flow control: Branch.
BZ, Rn Conditional branch on zero, PC = Rn.
RT Return, return from branch.
Rn: Any user register. Target register to the left, i.e. ADD R1, R1 , R3: R1 = R1 + R3.
DC: Don’t care.

Page 6 of 20

a. En tenkt kodesnutt leser to verdier fra to minneadresser. Hvordan kan PC (Program Counter) avhenge av innholdet i disse minneadressene for den oppgitte sudokoden (Hvilke mulige verdier kan PC ha etter at koden har kjørt)?
• LOADDI 0x00 FF FF 00;
• CP R1, R0;
• LOADDI 0x00 FF FF 04;
• OR R0, R0, R1;
• BZ R0
Answer: PC vil være = 0 viss begge minne lokasjonene 0x00 FF FF 00 og 0x00 FF FF 04 er 0
(resultatet av OR = 0). Ellers vil PC peke på neste instruksjon, i.e. Pc = PC + 1. Gir litt
slakk her viss dei skjønnar kva som skjer.
b. 1) Angi hvilke adresseringsmodi (addressing modes) som brukes i følgende instruksjoner:
i) LOADDI
ii) LOAD
ii) MOVEC
2) Ut fra gitt instruksjonssett gi eksempel på instruksjonstype (instruction format):
i) Null adresse instruksjon (Zero-address instruction).
ii) Tre adresse instruksjon (Three-address instruction).
Answer: 1)
i) Direct Addressing.
ii) Register Addresing.
ii) Imidiate Addressing
. 2)
i) f.eks. NOP og/eller RT er rett svar
ii) Dei flestr ALU, alle med oppCode Rn, Rn, Rn
c. Er det mulig å utvide instruksjonsettet med fleire instruksjonar, f.eks. med shift instruksjonar, utan å endre på ISA? Begrunn svaret.
Answer: Nei, viss ein endrar instruksjonssette endrast ISA.

Page 7 of 20

IJVM appendix

Page 8 of 20

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 6: ALU functions (IJVM).

Page 9 of 20

Figur 7: Timing diagram (IJVM).

Page 10 of 20

Figur 8: Alternative microarchitecture I.

Page 11 of 20

Figur 9: Alternative microarchitecture II.

Page 12 of 20

Figur 10: Address decoding.

A0

Address bus

NAND

R/W
Data[15:0]

A[23:0]

OR

Microcontroller

A23

CS
R/W
D[15:0]

CS
R/W
D[15:0]

RAM 1

RAM 2

Data bus D[15:0]

?
D[15:0]

RAM 3

16

Figur 11: Address decoding.

Page 13 of 20

CS
R

CS
R/W

D[15:0]

ROM

Load/store:
Load:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

0

32

8 bit

LoadDI:
opCode

Adr

8 bit

24 bit

32

0

Store:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

32

0

StoreDI:
opCode

Adr

8 bit

24 bit

32

0

ALU:
opCode

Rn

Rn

Rn

opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

opCode

DC

DC

DC

8 bit

8 bit

8 bit

32

0

32

0

Spesial:
NOP:
32

0

8 bit

MOVC:
opCode

Rn

Constant

32

0

8 bit

8 bit

16 bit

CP:
opCode

Rn

Rn

8 bit

8 bit

DC

32

0

8 bit

8 bit

Flow control:
BZ
opCode

Rn

DC

8 bit

8 bit

16 bit

opCode

DC

DC

8 bit

8 bit

32

0

RT
DC

32

0

8 bit

Rn: any user register, R0 - R15
DC: Don’t care. Adr: any data memory location within range.

Figur 12: Instruction formats.

Page 14 of 20

8 bit

Figur 13: Block diagram (IJVM).

Page 15 of 20

Figur 14: Microinstruction format (IJVM).

Page 16 of 20

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 15: ALU functions (IJVM).

Page 17 of 20

Figur 16: Timing diagram (IJVM).

Page 18 of 20

Figur 17: Alternative microarchitecture I.

Page 19 of 20

Figur 18: Alternative microarchitecture II.

Page 20 of 20

Norwegian University of Science and Technology
Engineering
The Department of Computer and Information Science

TDT4160

D ATAMASKINER GRUNNKURS
E KSAMEN
4. DESEMBER , 2014, 09:00–13:00

Kontakt under eksamen:
Gunnar Tufte 73590356/97402478
Tillatte hjelpemidler:
D.
Ingen trykte eller handskrivne hjelpemiddel er tillete.
Enkel godkjent kalkulator er tillete.
Målform:
Nynorsk

Page 1 of 16

O PPGÅVE 1: O PPSTART, L ITT AV KVART (25 %)
a. Eit minnesystem med eit nivå hurtigbuffer (cache) der hovudminnet har en aksesstid på 1µs
og hurtigbuffer har ein aksesstid på 0, 05µs med et trefforholdstal (hit ratio) på 80 %.
Du har to valg for å auke ytelsen:
1 Endre designet på hurtigbufferet til å ha eit trefforholdstal på 95 %.
2 Bytte til eit hovudminne med aksesstid på 0.5µs
Kva alternativ vil gi det raskaste minnesystemet? Kva er ytelseforbedringen?
b. Kvifor blir dynamisk minne som oftast brukt som teknologi i hovudminne?
c. Forklar kort ”Moore’s law” (Moore sin lov).
d. Er felles ISA nødvendigt i eit ”Heterogeneous” Chip Multiprocessor (CMP) system?
e. Figur 1 viser tidsforbruket i tre ulike samleband (pipelines). Alle er ulike implementasjonar
av den samme ISA. Estimer maksimal klokkefrekvens for dei tre samlebanda. Kva samleband har høgast ILP?

Stage 1

Stage 2

Stage 3

5ns

10ns

16ns

Pipeline 1, 3 stages

Stage 1

Stage 2

Stage 3

Stage 4

5ns

10ns

8ns

8ns

Pipeline 2, 4 stages

Stage 1

Stage 2

Stage 3

Stage 4

Stage 5

5ns

5ns

8ns

8ns

5ns

Pipeline 3, 5 stages

Figur 1: Samlebandtidsforbruk.

Page 2 of 16

O PPGÅVE 2: D IGITALT L OGISK N IVÅ (25 % (15 % PÅ A , 5 % PÅ B OG C ))
I figur 2 er det eksterne bussgrensesnittet for ein mikrokontroller vist. Det er brukt ein RAMbrikke for data og ein ROM-brikke for program. Ein termostat overvakar temperaturen. Eit display
angir temperatur. Alle einingane nyttar eit aktivt lågt (logisk ”0”) CS (Chip Select)-signal.
A0

Address bus

AND

AND

AND

AND

AND

AND

AND

NAND

NAND

CS
R/W

CS
R
D[7:0]

RAM

NAND

OR

Microcontroller

A15

Hi world

D[7:0]
CS
R Termostat

ROM

D

CS
W

D
Display

R/W
Data[7:0]
Data bus

D[7:0]

8

Figur 2: Address decoding.
a.

i) Tegn minnekart for systemet.
ii) Kva er det største programmet (i byte) som får plass i ROM.

b.

i) Angi antal addresser som er tilgjengelig for diplayeiningen.
ii) Er det overlapp i minnesystemet? I så fall, korleis påverkar det funksjonaliteten?

c. Ut i frå den informasjonen du har tilgjengeleg:
i) Er det mogleg å utvide systemet med fleire einingar? Forklar.
ii) Er påstanden om at systemet er programert til å bruke programstyrt I/O (polling/bussy
wait) sansynlig? Forklar.

Page 3 of 16

O PPGÅVE 3: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (25 % (5 %
PÅ A , 10 % PÅ B OG C ))
Bruk vedlagte diagram i figur 4, figur 5, figur 6 og figur 7 for IJVM til å løyse oppgåvene.
a. MBR-registeret er på 8 bit, men MPC-registeret er på 9 bit. Kva type instruksjonar nyttar
dette niende bitet? Forklar kort.
b. Lag mikroinstruksjon(ar) for følgjande IJVM-operasjon: TOS = TOS + LV + OPC.
Du trenger ikkje ta omsyn til Addr- og J-feltene. Oppgi korrekt bit-verdi for ALU-, C-, Memog B-feltene. – Sjå figur 5.
c. IJVM-registera i figur 4 er sett til følgjande verdiar:
”SP”: hex(AAAA),
”LV”: hex(0505),
”CPP”: hex(5555),
”TOS”: hex(0004),
”OPC”: hex(0005),
”H”: hex(FF0A).
Kva er innhaldet i TOS-registeret etter at dei to følgjande mikroinstruksjonane har blitt utført? Oppgi svaret i hex-format.
1: ALU: 010100, C: 100000000, Mem: 000 og B: 0110
2: ALU: 001100, C: 001000000, Mem: 000 og B: 0100
Kva vil N- og Z-bita være etter utføringa av mikroinstruksjonane?

Page 4 of 16

O PPGÅVE 4: I NSTRUKSJONSSETT ARKITEKTUR (ISA)(25 % (5 % PÅ A , B ,
C OG 10 % PÅ D ))
Ein særs enkel prosessor har ein load, ein store, 8 ALU-instruksjonar og nokre spesialinstruksjonar,
inkludert NOP-instruksjonen og to flytkontrollinstruksjoner (flow control instructions). Prosessoren har 16 generelle register som er tilgjengeleg. Instruksjonsformatet for instruksjonane er vist i
figur 3. Alle register og bussar er 32-bit. Prosessoren har ein Harvard arkitektur.
Load/store:
Load:
opCode

Rn

Rn

DC
0

32

Store:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

opCode

Rn

Rn

Rn

opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

DC

DC

DC

8 bit

8 bit

32

0

ALU:
32

0

32

0

8 bit

Spesial:
NOP:
opCode
32

0

8 bit

8 bit

MOVC:
opCode

Rn

Constant

32

0

8 bit

8 bit

16 bit

CP:
opCode

Rn

Rn

8 bit

8 bit

DC

32

0

8 bit

8 bit

Flow control:
BZ
opCode

Rn

DC

8 bit

8 bit

16 bit

opCode

DC

DC

8 bit

8 bit

32

0

RT
DC

32

0

8 bit

Rn: any user register, R0 - R15
DC: Don’t care: any data memory location

Figur 3: Instruction formats.

Page 5 of 16

8 bit

Instructions set:
LOAD: Load data from memory.
load Rn, Rn Load register Rn from memory location in Rn.
STORE: Store data in memory.
store Rn, Rn Store register Rn in memory location in Rn.
ALU: Data manipulation, register–register operations.
ADD Rn, Rn, Rn ADD, Rn = Rn + Rn. Set Z-flag if result =0.
NAND Rn, Rn, Rn Bitwise NAND, Rn = Rn · Rn. Set Z-flag if result =0.
OR Rn, Rn, Rn Bitwice OR, Rn = Rn or Rn. Set Z-flag if result =0.
INV Rn, Rn Bitwice invert, Rn = Rn. Set Z-flag if result =0.
INC Rn, Rn Increment, Rn = Rn + 1. Set Z-flag if result =0.
DEC Rn, Rn Decrement, Rn = Rn − 1. Set Z-flag if result =0.
MUL Rn, Rn, Rn Multiplication, Rn = Rn ∗ Rn. Set Z-flag if result =0.
CMP, Rn, Rn Compare, Set Z-flag if Rn = Rn
Special: Misc.
CP Rn, Rn Copy, Rn <- Rn
NOP Waste of time, 1 clk cycle.
MOVC Rn, constant Put a constant in register Rn = C.
Flow control: Branch.
BZ, Rn Conditional branch on zero, PC = Rn.
RT Return, return from branch.
Rn: Any user register.
DC: Don’t care.

Page 6 of 16

a. Dette er ein RISC-prosessor. Kvifor?
b.

i) Kva type (instruction format) instruksjon er MOVC?
ii) Kva type adresseringsmodi (addressing modes) brukar MOVC?
iii Kva type adresseringsmodi (addressing modes) brukar CP?

c.

i) Er det mogleg å utvide med fleire register enn 32 utan å endre instruksjonslengda?
Forklar kort.
ii) Er denne prosessoren generell? Forklar kort.

d. Følgjande register har gitt innhald:
R1 = 0x0000 AAAA,
R2 = 0x0000 5555,
R3 = 0xAAAA AAAA,
R4 = 0x5555 5555.
Følgjande sudo kode køyrer:
• :
• STORE R1, R3;
• STORE R2, R4;
• INV R3, R3;
• INV R4, R4;
• LOAD R1, R3;
• LOAD R2, R4;
i) Kva er innhaldet i R1 og R2 etter at koden er køyrt?
ii) I eit forsøk på å optimalisere endrast koden til:
• :
• STORE R1, R3;
• STORE R2, R4;
• CP R1, R2;
• CP R2, R1;
Er resultatet det samme eller ikkje? Kort forklaring.

Page 7 of 16

IJVM appendix

Page 8 of 16

Figur 4: Block diagram (IJVM).

Page 9 of 16

Figur 5: Microinstruction format (IJVM).

Page 10 of 16

A NSWER K EY

FOR

T HE E XAM

Page 1 of 16

O PPGÅVE 1: O PPSTART, L ITT AV KVART (25 %)
a. Eit minnesystem med eit nivå hurtigbuffer (cache) der hovudminnet har en aksesstid på 1µs
og hurtigbuffer har ein aksesstid på 0, 05µs med et trefforholdstal (hit ratio) på 80 %.
Du har to valg for å auke ytelsen:
1 Endre designet på hurtigbufferet til å ha eit trefforholdstal på 95 %.
2 Bytte til eit hovudminne med aksesstid på 0.5µs
Kva alternativ vil gi det raskaste minnesystemet? Kva er ytelseforbedringen?
Answer: mean access time orginalt: c + (1 − h) ∗ m); 0.05 + (1 − 0.8) ∗ 1 = 0.25µs
For 1: 0.05 + (1 − 0.95) ∗ 1 = 0.1µs
For 2: 0.05 + (1 − 0.8) ∗ 0.5 = 0.15µs
også med c*h OK (c ∗ h + (1 − h) ∗ m);), men får andre verdiar:
Orginal: 0, 24µs, 1: 0, 0975µs og 2: 0, 1475µs.
Alternativ 1 er raskast med ein forbedring i gjennomsnitleg akesstid på 0.15µs (eller 2.5
x ytelse forbedring). 0.1425µs viss c ∗ h + (1 − h) ∗ m brukt.
b. Kvifor blir dynamisk minne som oftast brukt som teknologi i hovudminne?
Answer: Dynamisk:
Ikkje så rask som statisk MEN:
Liten minnecelle (areal)
Lite effektforbruk
+ andre fornuftige grunnar.
c. Forklar kort ”Moore’s law” (Moore sin lov).
Answer: Exponensiell vekst av antall gates det er plass til på ein brikke. (ca dobbling kvar
18 månad).
d. Er felles ISA nødvendigt i eit ”Heterogeneous” Chip Multiprocessor (CMP) system?
Answer: Nei, prossesorar kan være forkjellige. F.eks. Generelle og GPGPU blanda.
e. Figur 1 viser tidsforbruket i tre ulike samleband (pipelines). Alle er ulike implementasjonar
av den samme ISA. Estimer maksimal klokkefrekvens for dei tre samlebanda. Kva samleband har høgast ILP?
Answer: Treigastetrinn bestemmer max klokke.
Pipeline klokkehastigheit: 1/t. 3 har høgast ILP (5 mot 4 og 3 inst. inne på brikke).

Page 2 of 16

O PPGÅVE 2: D IGITALT L OGISK N IVÅ (25 % (15 % PÅ A , 5 % PÅ B OG C ))
I figur 2 er det eksterne bussgrensesnittet for ein mikrokontroller vist. Det er brukt ein RAMbrikke for data og ein ROM-brikke for program. Ein termostat overvakar temperaturen. Eit display
angir temperatur. Alle einingane nyttar eit aktivt lågt (logisk ”0”) CS (Chip Select)-signal.
a.

i) Tegn minnekart for systemet.
ii) Kva er det største programmet (i byte) som får plass i ROM.
Answer: i) Minnekart med adresser trengs.
ROM:0000 - 1FFF,
RAM: 2000 - FFEF,
Termostat: FFFF,
Display: FFF0 - FFFE
ii) hex: 2000 (des: 8192) bytes.

b.

i) Angi antal addresser som er tilgjengelig for diplayeiningen.
ii) Er det overlapp i minnesystemet? I så fall, korleis påverkar det funksjonaliteten?
Answer: i) det er 15 adresser avsatt til displayet.
ii) Det er ingen overlapp.

c. Ut i frå den informasjonen du har tilgjengeleg:
i) Er det mogleg å utvide systemet med fleire einingar? Forklar.
ii) Er påstanden om at systemet er programert til å bruke programstyrt I/O (polling/bussy
wait) sansynlig? Forklar.
Answer: i) Nei. Alle minneadresser er brukt.
ii) Det er sansynlig sidan det ikkje er nokon IRQ-linje. Einaste måten å få oppdatert
temperaturdata på er å lese med jevne mellomrom.

Page 3 of 16

O PPGÅVE 3: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (25 % (5 %
PÅ A , 10 % PÅ B OG C ))
Bruk vedlagte diagram i figur 4, figur 5, figur 6 og figur 7 for IJVM til å løyse oppgåvene.
a. MBR-registeret er på 8 bit, men MPC-registeret er på 9 bit. Kva type instruksjonar nyttar
dette niende bitet? Forklar kort.
Answer: Betingahopp instruksjonar utnyttar bit 9. Brukar det niende bite til å kunne velge to mikroprogram stiar. Ved hopp bit 9 = 1. Då vil mikroinstruksjonane ligge i adr
1xxxxxxxx i control store. Viss betingelse for hopp ikkje er oppfylgt vil bit 9 vere 0; og
neste microinstruksjon vil ligge i 0xxxxxxxx i control store. N og Z status frå ALU er
tilgjengeleg som betingelsar.
b. Lag mikroinstruksjon(ar) for følgjande IJVM-operasjon: TOS = TOS + LV + OPC.
Du trenger ikkje ta omsyn til Addr- og J-feltene. Oppgi korrekt bit-verdi for ALU-, C-, Memog B-feltene. – Sjå figur 5.
Answer: 1: ALU: B, C: h, B: TOS. i bit: ALU: 010100, C: 100000000, MEM: 0, B: 7 (0111)
2: ALU: A + B, C: h, B: LV. i bit: ALU: 111100, C: 100000000, MEM: 0, B: 5 (0101)
3: ALU: A + B, C: TOS, B: OPC. i bit: ALU: 111100, C: 001000000, MEM: 0, B: 8 (1000)
Og alle andre omstokkingar av rekkefølgje av addisjon av register som gir rett svar
resultat i TOS.
c. IJVM-registera i figur 4 er sett til følgjande verdiar:
”SP”: hex(AAAA),
”LV”: hex(0505),
”CPP”: hex(5555),
”TOS”: hex(0004),
”OPC”: hex(0005),
”H”: hex(FF0A).
Kva er innhaldet i TOS-registeret etter at dei to følgjande mikroinstruksjonane har blitt utført? Oppgi svaret i hex-format.
1: ALU: 010100, C: 100000000, Mem: 000 og B: 0110
2: ALU: 001100, C: 001000000, Mem: 000 og B: 0100
Kva vil N- og Z-bita være etter utføringa av mikroinstruksjonane?
Answer: 1: ALU: 010100 (B) C: 100000000 (H) Mem: 000 (ingen mem opprasjon) B: 0110 (6
CPP)
2: ALU: 111101 (A and B) C: 001000000 (TOS) Mem: 000 (ingen mem opprasjon) B: 0100
(4 SP)
TOS = 0000, gjer funksjonen: CPP AND SP (0x5555 AND 0xAAAA)
Z = 1 og N = 0. Resultatet var 0 så då vil Z bli aktivert.

Page 4 of 16

O PPGÅVE 4: I NSTRUKSJONSSETT ARKITEKTUR (ISA)(25 % (5 % PÅ A , B ,
C OG 10 % PÅ D ))
Ein særs enkel prosessor har ein load, ein store, 8 ALU-instruksjonar og nokre spesialinstruksjonar,
inkludert NOP-instruksjonen og to flytkontrollinstruksjoner (flow control instructions). Prosessoren har 16 generelle register som er tilgjengeleg. Instruksjonsformatet for instruksjonane er vist i
figur 3. Alle register og bussar er 32-bit. Prosessoren har ein Harvard arkitektur.

Page 5 of 16

Instructions set:
LOAD: Load data from memory.
load Rn, Rn Load register Rn from memory location in Rn.
STORE: Store data in memory.
store Rn, Rn Store register Rn in memory location in Rn.
ALU: Data manipulation, register–register operations.
ADD Rn, Rn, Rn ADD, Rn = Rn + Rn. Set Z-flag if result =0.
NAND Rn, Rn, Rn Bitwise NAND, Rn = Rn · Rn. Set Z-flag if result =0.
OR Rn, Rn, Rn Bitwice OR, Rn = Rn or Rn. Set Z-flag if result =0.
INV Rn, Rn Bitwice invert, Rn = Rn. Set Z-flag if result =0.
INC Rn, Rn Increment, Rn = Rn + 1. Set Z-flag if result =0.
DEC Rn, Rn Decrement, Rn = Rn − 1. Set Z-flag if result =0.
MUL Rn, Rn, Rn Multiplication, Rn = Rn ∗ Rn. Set Z-flag if result =0.
CMP, Rn, Rn Compare, Set Z-flag if Rn = Rn
Special: Misc.
CP Rn, Rn Copy, Rn <- Rn
NOP Waste of time, 1 clk cycle.
MOVC Rn, constant Put a constant in register Rn = C.
Flow control: Branch.
BZ, Rn Conditional branch on zero, PC = Rn.
RT Return, return from branch.
Rn: Any user register.
DC: Don’t care.

Page 6 of 16

a. Dette er ein RISC-prosessor. Kvifor?
Answer: Enkle instruksjonar. Like lange instruksjonar, Load/store arkitektur, mange generelle register.
b.

i) Kva type (instruction format) instruksjon er MOVC?
ii) Kva type adresseringsmodi (addressing modes) brukar MOVC?
iii Kva type adresseringsmodi (addressing modes) brukar CP?
Answer: i) to-adresse instruksjon.
ii) imidiate addressing.
iii) Register addressing

c.

i) Er det mogleg å utvide med fleire register enn 32 utan å endre instruksjonslengda?
Forklar kort.
ii) Er denne prosessoren generell? Forklar kort.
Answer: i) Ja kan utvide med fleire regsister det er satt av 8 bit til register adressering. 16
register brukar 4 bit til adressering, 32 register 5 bit. Det er mulig å adresere totalt 256
register med 8 bit utan å utvide instruksjonslengda.
ii) Ja, Branch, I/O og ALU-funksjonar.

d. Følgjande register har gitt innhald:
R1 = 0x0000 AAAA,
R2 = 0x0000 5555,
R3 = 0xAAAA AAAA,
R4 = 0x5555 5555.
Følgjande sudo kode køyrer:
• :
• STORE R1, R3;
• STORE R2, R4;
• INV R3, R3;
• INV R4, R4;
• LOAD R1, R3;
• LOAD R2, R4;
i) Kva er innhaldet i R1 og R2 etter at koden er køyrt?
ii) I eit forsøk på å optimalisere endrast koden til:
• :
• STORE R1, R3;
• STORE R2, R4;
• CP R1, R2;
• CP R2, R1;
Page 7 of 16

Er resultatet det samme eller ikkje? Kort forklaring.
Answer: i) Bytter om register innhold ved å å bytte peikarar ved invertering. R1 = 0x0000
5555 og R2 = 0x0000 AAAA.
ii) Nei, her blir R2 kopiert til R1. (R1 = (R2) = 0x0000 5555), men så blir verdien i R2
oppdatert med ny R1 verdi, alså 0x0000 5555. For at dette skulle virke kunne ein foreksempel mellomlagre R1 i eit anna ledigt register.

Page 8 of 16

IJVM appendix

Page 9 of 16

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 6: ALU functions (IJVM).

Page 10 of 16

Figur 7: Timing diagram (IJVM).

Stage 1

Stage 2

Stage 3

5ns

10ns

16ns

Pipeline 1, 3 stages

Stage 1

Stage 2

Stage 3

Stage 4

5ns

10ns

8ns

8ns

Pipeline 2, 4 stages

Stage 1

Stage 2

5ns

5ns

Stage 3

Stage 4

Stage 5

8ns

8ns

5ns

Pipeline 3, 5 stages

Figur 8: Samlebandtidsforbruk.

Page 11 of 16

A0

Address bus

AND

AND

AND

AND

AND

AND

AND

NAND

NAND

CS
R/W

CS
R
D[7:0]

NAND

OR

Microcontroller

A15

Hi world

D[7:0]

RAM

CS
R Termostat

ROM

CS
W

D

R/W
Data[7:0]
Data bus

D[7:0]

8

Figur 9: Address decoding.

Load/store:
Load:
opCode

Rn

Rn

DC
0

32

Store:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

opCode

Rn

Rn

Rn

opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

DC

DC

DC

8 bit

8 bit

32

0

ALU:
32

0

32

0

8 bit

Spesial:
NOP:
opCode
32

0

8 bit

8 bit

MOVC:
opCode

Rn

Constant

32

0

8 bit

8 bit

16 bit

CP:
opCode

Rn

Rn

8 bit

8 bit

DC

32

0

8 bit

8 bit

Flow control:
BZ
opCode

Rn

DC

8 bit

8 bit

16 bit

opCode

DC

DC

8 bit

8 bit

32

0

RT
DC

32

0

8 bit

Rn: any user register, R0 - R15
DC: Don’t care: any data memory location

Figur 10: Instruction formats.

Page 12 of 16

8 bit

D
Display

Figur 11: Block diagram (IJVM).

Page 13 of 16

Figur 12: Microinstruction format (IJVM).

Page 14 of 16

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 13: ALU functions (IJVM).

Page 15 of 16

Figur 14: Timing diagram (IJVM).

Page 16 of 16

Norwegian University of Science and Technology
Engineering
The Department of Computer and Information Science

TDT4160

D ATAMASKINER OG DIGITALTEKNIKK
E KSAMEN
2. DESEMBER , 2015, 09:00–13:00

Kontakt under eksamen:
Gunnar Tufte 974 02 478
Tillatte hjelpemidler:
D.
Ingen trykte eller håndskrevne hjelpemidler er tillat.
Enkel godkjent kalkulator er tillatt.
Målform:
Bokmål

Page 1 of 19

O PPGAVE 1: O PPSTART, L ITT AV HVERT (25 %)
a. En ISA har tre alternative mikroarkitekturer. Alternativ 1 er utan samlebånd (pipeline) med
en klokkeperiode på 40ns. Alternativ 2 er med et samlebånd med tre trinn. Alternativ 3
er med et samlebånd på 5 trinn. Alternativ 2 og 3 er skissert i figur 1. Er det mulig å øke
klokkefrekvensen i mikroarkitekturene i alternativ 2 og 3? Oppgi klokkefrekvens for de to
alternativene.
Stage 1
10ns

Stage 2

Stage 3

5ns

20ns

Pipeline 1, 3 stages

Stage 1

Stage 2

5ns

5ns

Stage 3

Stage 4

Stage 5

7.5ns

7.5ns

10ns

Pipeline 2, 5 stages

Figur 1: Samleband for alternativ 2 og 3.
b. En prosessor har et enkelt minnesystem med et hoveddminne (RAM) med aksesstid på
0.5µs. I et forsøk på å skalere opp systemet og øke ytelsen ønsker man å doble minnestørrelsen og minske gjennomsnittlig aksesstid. I et forsøk blir hovedminnet byttet ut med et
dobbelt så stort minne med aksesstid på 2µs og et nivå hurtigbuffer (cache). Hurtigbuffer
har en aksesstid på 0, 025µs og trefforholdstall for systemet (hit ratio) er 90 %
Hva er gjennomsnittlig aksesstid for det nye minnesystemet (med et nivå hurtigbuffer)?
c. Hva kjennetegner en superscalar prosessor? Forklar kort.
d. Hva kjennetegner en SIMD-prosessor? Forklar kort.
e. Er grad av ILP definert på ISA-nivå?

Page 2 of 19

O PPGAVE 2: D IGITALT L OGISK N IVÅ (25 % (10 % PÅ A , 5 % PÅ B OG 10
% PÅ C ))
I et innvevd system (embedded system) benyttes det en mikrokontroller. Figur 2 viser det
eksterne bussgrensesnittet for mikrokontrolleren. Det er en ROM-brikke for program og to RAMbrikker. Alle enhetene benytter et aktivt lavt (logisk ”0”) CS (Chip Select)-signal. RAM-brikkene
har en aksesstid på 0.1µs ROM-brikken har en aksesstid på 1µs.
A0

Address bus

Microcontroller

A15
INV/
NOT
OR
NAND

CS
R/W
D[7:0]

CS
R/WD[7:0]

RAM 1
R/W
Data[7:0]

RAM 2

Data bus

CS
R

D[7:0]

ROM

8

Figur 2: Address decoding.
a.

i) Tegn minnekart for systemet.
ii) Er det mulig å utvide med mer RAM?.

b. Dette er en einsykel (single cycle) prosessor uten hurtigbuffer eller instruksjonskø. Systemet
har en klokke på 500 000hz. Prosessoren utfører nå en instruksjon hver klokkeperiode. Er
det mulig å øke klokkefrekvensen til systemet til 2 000 000hz og fortsatt kunne utføre en
instruksjon hver klokkeperiode? Forklar kort.

Page 3 of 19

c. Figur 3 viser en FSM.
X

D

SET

CLR

D

SET

CLR

Q

Q

Q

Q

CLK

Figur 3: FSM.
i) Er dette en Moore eller Mealy FSM? Forklar.
ii) Fullfør tabellen vist under. Bruk formatet som er vist.

Q0 Q1

Q0(nxt) Q1(nxt)
X=0
X=1

0 0

Figur 4: FSM tabell format.
iii) Når er utgangen Y = "1"?

Page 4 of 19

Y

O PPGAVE 3: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (25 % (5 %
PÅ A , 10 % PÅ B OG C ))
Bruk vedlagte diagram i figur 6, figur 7, figur 8 og figur 9 for IJVM til å løse oppgavene.
a. i) Er det noen av registrene i IJVM som ikke er tilgjengelig for programmereren?
ii) Hvilken funksjon har MAR-registeret og MDR-registeret? Forklar kort.
b. i) Lag mikroinstruksjon(er) som utfører funksjonen: kopier TOS til MAR (MAR = TOS) for
mikroarkitekturen i figur 6.
ii) Lag mikroinstruksjon(er) som utfører funksjonen: summerer innholdet i LV, MDR og PC
til PC (PC = LV + MAR + PC) for mikroarkitekturen i figur 6. Hvordan vil LV og MAR bli
påvirket av løsningen din?
Du trenger ikke ta hensyn til Addr- og J-feltene. Oppgi korrekt bit-verdi for ALU-, C-, Memog B-feltene. – Se figur 7.
c. IJVM-registrene i figur 6 er satt til følgende verdiar:
”SP”: hex(0001),
”LV”: hex(0002),
”CPP”: hex(0003),
”TOS”: hex(0004),
”OPC”: hex(0005),
”H”: hex(FF0A).
Hva er innholdet i H-registeret og OPC-registeret etter at følgende mikroinstruksjoner har
blitt utført? Oppgi svaret i hex-format.
1: ALU: 010100, C: 100000000, Mem: 000 og B: 0110
2: ALU: 011100, C: 101000000, Mem: 000 og B: 0111
3: ALU: 001100, C: 001000000, Mem: 000 og B: 1000

Page 5 of 19

O PPGAVE 4: I NSTRUKSJONSSETT ARKITEKTUR (ISA)(25 % ((5 % PÅ A , B , C
OG 10 % PÅ D ))
En avært enkel prosessor har en load, en store, 8 ALU-instruksjoner og noen spesialinstruksjoner, inkludert NOP-instruksjonen og to flytkontrollinstruksjoner (flow control instructions). Instruksjonsformatet for instruksjonene er vist i figur 5. Alle register og bussar er 32-bit. Det er 16
generelle register tilgjengelig. Prosessoren har en Harvard architecture.
Load/store:
Load:
opCode

Ri

Rj

DC
0

32

Store:
opCode

Ri

Rj

DC

8 bit

8 bit

8 bit

8 bit

opCode

Ri

Rj

Rk

32

0

ALU:
32

0

opCode

Ri

Rj

DC

8 bit

8 bit

8 bit

8 bit

opCode

DC

DC

DC

8 bit

8 bit

8 bit

8 bit

32

0

Spesial:
NOP:
32

0

MOVC:
opCode

Ri

Constant

32

0

8 bit

8 bit

16 bit

CP:
opCode

Ri

Rj

DC

8 bit

8 bit

8 bit

32

0

8 bit

Flow control:
BZ
opCode

Ri

DC

8 bit

8 bit

16 bit

opCode

DC

DC

DC

8 bit

8 bit

8 bit

8 bit

32

0

RT
32

0

Ri, Rj, Rk: any user register, R0 - R15
DC: Don’t care: any data or memory location

Figur 5: Instruction formats.

Page 6 of 19

Instructions set:
LOAD: Load data from memory.
load Ri, Rj Load register Ri from memory location in Rj.
STORE: Store data in memory.
store Ri, Rj Store register Ri in memory location in Rj.
ALU: Data manipulation, register–register operations.
ADD Ri, Rj, Rk ADD, Ri = Rj + Rk. Set Z-flag if result =0.
NAND Ri, Rj, Rk Bitwise NAND, Ri = Rj · Rk. Set Z-flag if result =0.
OR Ri, Rj, Rk Bitwice OR, Ri = Rj + Rk. Set Z-flag if result =0.
INV Ri, Rj Bitwice invert, Ri = Rj. Set Z-flag if result =0.
INC Ri, Rj Increment, Ri = Rj + 1. Set Z-flag if result =0.
DEC Ri, Rj Decrement, Ri = Rj − 1. Set Z-flag if result =0.
MUL Ri, Rj, Rk Multiplication, Ri = Rj ∗ Rk. Set Z-flag if result =0.
CMP, Ri, Rj Compare, Set Z-flag if Ri = Rj
Special: Misc.
CP Ri, Rj Copy, Ri < − Rj (copy Rj into Ri)
NOP Waste of time, 1 clk cycle.
MOVC Ri, constant Put a constant in register Ri = C.
Flow control: Branch.
BZ, Ri Conditional branch on zero, PC = Ri.
RT Return, return from branch.
Ri, Rj and Rk: Any user register.
DC: Don’t care.

Page 7 of 19

a. Hva slags type instruksjoner er:
i) BZ?
ii) RT?
b. Hva slags type adresseringsmodi (addressing modes) bruker:
i) MOVC?
ii) CP?
c. Kan LOAD- og STORE-instruksjonene adressere hele adresserommet (32-bit adressebusser)?
d. Følgende psaudokode er en del av et større program. Svar på spørsmålene ut i fra tilgjengelig
innformasjon.
• MOVC R1, 0x00 55;
• MOVC R2, 0x00 AA;
• STORE R1, R2;
• ADD R1, R1, R3;
• STORE R1, R3;
• LOAD R1, R2
• INV R3, R3;
• CMP R1, R2;
• BZ R2;
i) Hva slags adresse vil BZ hoppe til hvis betingelsene for et hopp er til stede?
ii) Vil psaudokode føre til at Z-flagget blir aktivert slik at betingelsene for et hopp er til stede?
Begrunn svaret.

Page 8 of 19

IJVM appendix

Page 9 of 19

Figur 6: Block diagram (IJVM).

Page 10 of 19

Figur 7: Microinstruction format (IJVM).

Page 11 of 19

A NSWER K EY

FOR

T HE E XAM

Page 1 of 19

O PPGAVE 1: O PPSTART, L ITT AV HVERT (25 %)
a. En ISA har tre alternative mikroarkitekturer. Alternativ 1 er utan samlebånd (pipeline) med
en klokkeperiode på 40ns. Alternativ 2 er med et samlebånd med tre trinn. Alternativ 3
er med et samlebånd på 5 trinn. Alternativ 2 og 3 er skissert i figur 1. Er det mulig å øke
klokkefrekvensen i mikroarkitekturene i alternativ 2 og 3? Oppgi klokkefrekvens for de to
alternativene.
Answer: Alternativ 1: Klokkefrekvens = 1/t = 1/40ns f = 25Mhz
I dei to andre er det eit samlebånd. I eit samlebånd er det det treigaste trinne som angir
klokka. Alle trinn må bli ferdig innan for ein klokkeperiode.
Alternativ 2: Klokkefrekvens = 1/t = 1/20ns f = 50Mhz
Alternativ 3: Klokkefrekvens = 1/t = 1/1ns f = 100Mhz
Så klokke frekvensen kan aukast ved innføring av samleband i denne mikroarkitekturen. I alternativ 2 og 3 kan klokkefrekvensen aukast til (max) forsinkelse i treigaste
trinn.
b. En prosessor har et enkelt minnesystem med et hoveddminne (RAM) med aksesstid på
0.5µs. I et forsøk på å skalere opp systemet og øke ytelsen ønsker man å doble minnestørrelsen og minske gjennomsnittlig aksesstid. I et forsøk blir hovedminnet byttet ut med et
dobbelt så stort minne med aksesstid på 2µs og et nivå hurtigbuffer (cache). Hurtigbuffer
har en aksesstid på 0, 025µs og trefforholdstall for systemet (hit ratio) er 90 %
Hva er gjennomsnittlig aksesstid for det nye minnesystemet (med et nivå hurtigbuffer)?
Answer: 2s; mean access time = c + (1 − h) ∗ m); 0.025 + (1 − 0.9) ∗ 2) = 0.225
Viser at det er mulig å få eit særs effektivt minnesystem ved å innføre hurtigbuffer. Det
nye systemet er raskare sjølv om hovedminne har auka akesstid med faktor 4.
c. Hva kjennetegner en superscalar prosessor? Forklar kort.
Answer: Innfører fleire av ein eller fleire einingar i ein prosessor med samleband, for eksempel felles fetch og decode, fleire ALUar. Sjå (f.eks) figur 2.6 i boka.
d. Hva kjennetegner en SIMD-prosessor? Forklar kort.
Answer: Single Instruction stream Multiple Data streams.
Parallelprosessorarklasse der multipleprosessorar utfører samme instruksjon på forskjellige data. Typisk array prosessorar, graffik er eit egna datasett for ein slik type
arkitektur. (klasseifisert i Flynn’s taxonomyfor datamaskin arkitektur).
e. Er grad av ILP definert på ISA-nivå?
Answer: ILP: Instruktion Level Paralellism. Nei, ILP angir mengd instruksjonar som utføres
samtidigt, f.eks pipeliner med fleire steg (djubde) vil ein få høgare ILP, enn med få steg.
MEN ILP er ikkje definert på ISA-nivå, ISA definerar instruksjonar logisk. Ein ISA kan
ha fleire alternative mikroarkitekturar med forskjelig ytelse (med forskjellig ILP).

Page 2 of 19

O PPGAVE 2: D IGITALT L OGISK N IVÅ (25 % (10 % PÅ A , 5 % PÅ B OG 10
% PÅ C ))
I et innvevd system (embedded system) benyttes det en mikrokontroller. Figur 2 viser det
eksterne bussgrensesnittet for mikrokontrolleren. Det er en ROM-brikke for program og to RAMbrikker. Alle enhetene benytter et aktivt lavt (logisk ”0”) CS (Chip Select)-signal. RAM-brikkene
har en aksesstid på 0.1µs ROM-brikken har en aksesstid på 1µs.
a.

i) Tegn minnekart for systemet.
ii) Er det mulig å utvide med mer RAM?.
Answer: i)
RAM 1: 0 - 0FFF
RAM 2: 8000 - 87FF
ROM: F000 - FFFF.
Det skal teiknast minnekart.
ii) Det er to ledige områder som kan brukast ved behov. (8800 - EFFF og 1000 - 7FFF).
Mengd RAM kan utvidast.

b. Dette er en einsykel (single cycle) prosessor uten hurtigbuffer eller instruksjonskø. Systemet
har en klokke på 500 000hz. Prosessoren utfører nå en instruksjon hver klokkeperiode. Er
det mulig å øke klokkefrekvensen til systemet til 2 000 000hz og fortsatt kunne utføre en
instruksjon hver klokkeperiode? Forklar kort.
Answer: Nei, ROM-brikken kan kunn følgje med oppmot max 1Mhz (sjølv om prosessoren
kan handtere auka klokke). Ved 2Mhz vil aksesstida møtte være min. 0.5µs for å klare
å halde kravet om ein instruksjon kvar klokkeperiode.

Page 3 of 19

c. Figur 3 viser en FSM.
i) Er dette en Moore eller Mealy FSM? Forklar.
ii) Fullfør tabellen vist under. Bruk formatet som er vist.
iii) Når er utgangen Y = "1"?
Answer: i) Moore, kunn state blir brukt til dekoding for utgangssignal. (ingen kopling frå
inngangar til dekodingen av state (q1 og Q0)
ii) Må definere kva som må til for at D0 og D1 skal være "1". Velger øverste som D0/Q0,
får då:
D0 = X and not(Q0)
D1 = X and (Q1 xor Q0)
Q0 = D0 og Q1 = D1
Utgangen gitt av Q0 og Q1:
Y = Q1 xor Q0.
iii) Y = Q1 xor Q0, ved state 01 og 10. X kan sjøast som f.eks reset signal (synkront). Ved
X = 0 går FSM tilbake til state 00.

Page 4 of 19

O PPGAVE 3: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (25 % (5 %
PÅ A , 10 % PÅ B OG C ))
Bruk vedlagte diagram i figur 6, figur 7, figur 8 og figur 9 for IJVM til å løse oppgavene.
a. i) Er det noen av registrene i IJVM som ikke er tilgjengelig for programmereren?
ii) Hvilken funksjon har MAR-registeret og MDR-registeret? Forklar kort.
Answer: i) Register i datapath: MBR-register, kan ikkje skrivast til, ingen buss tilkopling
for skriving, kunn loadfrå prog. minne. MAR kan ikkje lesast. For programerarar er
det då ikkje mulig å bruke desse registera direkte (uansett om det er IJVM ISA eller
ein alternativ ISA definert i control store. Ellers MIR og MPC (rett men dei er interne
register i CTRL-einingen (ikkje del av ISA) ingen minus viss dei ikkje er nevnt).
ii) MAR: Memory Adr. Reg. Innheld peikar til minnelokasjon (eksternt data minne),
MDR: Mem. Data Reg. inneheld data frå minne lokasjon peika på av MAR ved read.
Inneheld data til minnelokasjon (peika på av MAR) ved write.
b. i) Lag mikroinstruksjon(er) som utfører funksjonen: kopier TOS til MAR (MAR = TOS) for
mikroarkitekturen i figur 6.
ii) Lag mikroinstruksjon(er) som utfører funksjonen: summerer innholdet i LV, MDR og PC
til PC (PC = LV + MAR + PC) for mikroarkitekturen i figur 6. Hvordan vil LV og MAR bli
påvirket av løsningen din?
Du trenger ikke ta hensyn til Addr- og J-feltene. Oppgi korrekt bit-verdi for ALU-, C-, Memog B-feltene. – Se figur 7.
Answer: i)
ALU: B, C: MAR, B: TOS
ALU: 010100, C: 000000001, B: 0111 (7).
ii)
Her er det ein typo i eksamensette. Skal være i parantesen: (PC = LV + MDR + PC). Det
står rett i txt beskrivelsen av instruksjonen. Gir og rett for svar som skjønnar at ein må
dele i fleire mikroinstruksjonar og mellomlagre i H. Også rett viss nokon seier at dette
går ikkje fordi MAR ikkje kan legjast ut på B-buss (då har ein i alle fall vist at ein forstår
skjema over mikroarkitektur). F eks til løysing:
Må dele over fleire mikroinstruksjonar sidan kunn ein operand kan på B-buss
ALU: A, C: H, B: LV (mellomlagre LV i H
ALU: A + B, C: H, B: MDR (H = LV + MDR)
ALU: A + B, C: PC, B: PC (PC = H + PC)
Kan løysast på andre måtar også (rekkefølgje på addisjon og mellomlagring), men må
mellomlagre for å kunne summere alle operandar.
LV blir kunn lest, MAR (MDR viss nokon velg å bytte her og så ok (grunna typo, godkjenner alt som er rett) kunn lest. I denne instruksjonener det PC (og H) som skal endrast.
c. IJVM-registrene i figur 6 er satt til følgende verdiar:

Page 5 of 19

”SP”: hex(0001),
”LV”: hex(0002),
”CPP”: hex(0003),
”TOS”: hex(0004),
”OPC”: hex(0005),
”H”: hex(FF0A).
Hva er innholdet i H-registeret og OPC-registeret etter at følgende mikroinstruksjoner har
blitt utført? Oppgi svaret i hex-format.
1: ALU: 010100, C: 100000000, Mem: 000 og B: 0110
2: ALU: 011100, C: 101000000, Mem: 000 og B: 0111
3: ALU: 001100, C: 001000000, Mem: 000 og B: 1000
Answer: 1:
ALU: 010100 (B) C: 100000000 (H) Mem: 000 (ingen mem opprasjon) B: 0110 (6 CPP) (H
= CPP)
2
ALU: 011100 (OR) C: 101000000 (H og TOS) Mem: 000 (ingen mem opprasjon) B: 0111
(7 TOS) (H = H OR TOS)
3
ALU: 001100 (AND) C: 001000000 (TOS) Mem: 000 (ingen mem opprasjon) B: 1000 (8
OPC) H (uendra), TOS = H AND OPC
(H = 0007, OPC = 0005). Her blir det kunn skrevet til H-registeret (og TOS). OPC blir
kunn lest (kopiert) slik at det endrar seg ikkje.

Page 6 of 19

O PPGAVE 4: I NSTRUKSJONSSETT ARKITEKTUR (ISA)(25 % ((5 % PÅ A , B , C
OG 10 % PÅ D ))
En avært enkel prosessor har en load, en store, 8 ALU-instruksjoner og noen spesialinstruksjoner, inkludert NOP-instruksjonen og to flytkontrollinstruksjoner (flow control instructions). Instruksjonsformatet for instruksjonene er vist i figur 5. Alle register og bussar er 32-bit. Det er 16
generelle register tilgjengelig. Prosessoren har en Harvard architecture.

Page 7 of 19

Instructions set:
LOAD: Load data from memory.
load Ri, Rj Load register Ri from memory location in Rj.
STORE: Store data in memory.
store Ri, Rj Store register Ri in memory location in Rj.
ALU: Data manipulation, register–register operations.
ADD Ri, Rj, Rk ADD, Ri = Rj + Rk. Set Z-flag if result =0.
NAND Ri, Rj, Rk Bitwise NAND, Ri = Rj · Rk. Set Z-flag if result =0.
OR Ri, Rj, Rk Bitwice OR, Ri = Rj + Rk. Set Z-flag if result =0.
INV Ri, Rj Bitwice invert, Ri = Rj. Set Z-flag if result =0.
INC Ri, Rj Increment, Ri = Rj + 1. Set Z-flag if result =0.
DEC Ri, Rj Decrement, Ri = Rj − 1. Set Z-flag if result =0.
MUL Ri, Rj, Rk Multiplication, Ri = Rj ∗ Rk. Set Z-flag if result =0.
CMP, Ri, Rj Compare, Set Z-flag if Ri = Rj
Special: Misc.
CP Ri, Rj Copy, Ri < − Rj (copy Rj into Ri)
NOP Waste of time, 1 clk cycle.
MOVC Ri, constant Put a constant in register Ri = C.
Flow control: Branch.
BZ, Ri Conditional branch on zero, PC = Ri.
RT Return, return from branch.
Ri, Rj and Rk: Any user register.
DC: Don’t care.

Page 8 of 19

a. Hva slags type instruksjoner er:
i) BZ?
ii) RT?
Answer: i) BZ er ein 1 adresse instruksjon. 1 operand (og det er som angitt ein flytkontroll
instruksjon.).
ii) RT har ingen operandar og er ein 0 adresse instruksjon (også flytkontroll som angitt)
b. Hva slags type adresseringsmodi (addressing modes) bruker:
i) MOVC?
ii) CP?
Answer: MOVC: Imidiate. operand verdi er gitt i operand feltet i instruksjonen. operanden
vil då befinne seg i programminne.
CP: nyttar registeradressering, kvar operand er eit register (register-register).
c. Kan LOAD- og STORE-instruksjonene adressere hele adresserommet (32-bit adressebusser)?
Answer: Ja, begge brukar 32 bits register som kilde for å adressere minne (til 32 bit minnebussar). Ein kan då peike på alle adresser i adresserommet på 32 bit.
d. Følgende psaudokode er en del av et større program. Svar på spørsmålene ut i fra tilgjengelig
innformasjon.
• MOVC R1, 0x00 55;
• MOVC R2, 0x00 AA;
• STORE R1, R2;
• ADD R1, R1, R3;
• STORE R1, R3;
• LOAD R1, R2
• INV R3, R3;
• CMP R1, R2;
• BZ R2;
i) Hva slags adresse vil BZ hoppe til hvis betingelsene for et hopp er til stede?
ii) Vil psaudokode føre til at Z-flagget blir aktivert slik at betingelsene for et hopp er til stede?
Begrunn svaret.
Answer: i) BZ vil hoppe til 0x00 AA viss betingelsar for hopp er tilstades (innholde i R2 når
BZ instruksjonen blir exekvert). Finn det ved å sjå på koden (Koden er del av eit større
kodesegment, innhold i R3 påvirkar ikkje spørsmåla):
• MOVC R1, 0x00 55;
R1 = 0x00 55
• MOVC R2, 0x00 AA;
R2 = 0x00 AA
• STORE R1, R2;
Innold R1 (0x00 55) lagra i adresse 0x00 AA (gitt i R2)
Page 9 of 19

• ADD R1, R1, R3;
R1 = innhold i R1 + innhold i R3 (kva no det er)
• STORE R1, R3;
Innold R1 lagra i adresse som er gitt i R3
• LOAD R1, R2;
R1 = innhold i minnelokasjon gitt i R2 (0x00 AA) som er (0x00 55 (R1 = 0x0055))
• INV R3, R3;
Invertarar R3
• CMP R1, R2;
samanlignar innhald i R1 og R2 (0x00 55 med 0x00 AA) ikkje likt Z = 0
• BZ R2;
Z = 0 ikkje noko hopp.
ii) Nei CMP samanlignar R1 som er 0x00 55 og R2 som er 0x00 AA så Z = 0 og programmet vil fortsette med neste instruksjon (ikkje vist).

Page 10 of 19

IJVM appendix

Page 11 of 19

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 8: ALU functions (IJVM).

Page 12 of 19

Figur 9: Timing diagram (IJVM).

Stage 1
10ns

Stage 2

Stage 3

5ns

20ns

Pipeline 1, 3 stages

Stage 1

Stage 2

5ns

5ns

Stage 3

Stage 4

Stage 5

7.5ns

7.5ns

10ns

Pipeline 2, 5 stages

Figur 10: Samleband for alternativ 2 og 3.

Page 13 of 19

A0

Address bus

Microcontroller

A15
INV/
NOT
OR
NAND

CS
R/W
D[7:0]

CS

R

R/WD[7:0]

RAM 1
R/W
Data[7:0]

CS

RAM 2

Data bus

ROM

8

Figur 11: Address decoding.
X

D

SET

CLR

D

SET

CLR

Q

Q

Q

Q

CLK

Figur 12: FSM.

Q0 Q1

D[7:0]

Q0(nxt) Q1(nxt)
X=0
X=1

0 0

Figur 13: FSM tabell format.
Page 14 of 19

Y

Present state

Next state

0
0
1
1

Output
Y

Q0(nxt) Q1(nxt)
X=0X=1
0 0 10
0 0 01
0 0 11
0 0 00

Q0 Q1
0
1
0
1

0
1
1
0

Figur 14: Forslag til utfylt tabell, har også tatt med Y.

Load/store:
Load:
opCode

Ri

Rj

DC
0

32

Store:
opCode

Ri

Rj

DC

8 bit

8 bit

8 bit

8 bit

opCode

Ri

Rj

Rk

32

0

ALU:
32

0

opCode

Ri

Rj

DC

32

0

8 bit

8 bit

8 bit

8 bit

opCode

DC

DC

DC

8 bit

8 bit

8 bit

8 bit

Spesial:
NOP:
32

0

MOVC:
opCode

Ri

Constant

32

0

8 bit

8 bit

16 bit

CP:
opCode

Ri

Rj

DC

8 bit

8 bit

8 bit

32

0

8 bit

Flow control:
BZ
opCode

Ri

DC

8 bit

8 bit

16 bit

opCode

DC

DC

DC

8 bit

8 bit

8 bit

8 bit

32

0

RT
32

0

Ri, Rj, Rk: any user register, R0 - R15
DC: Don’t care: any data or memory location

Figur 15: Instruction formats.

Page 15 of 19

Figur 16: Block diagram (IJVM).

Page 16 of 19

Figur 17: Microinstruction format (IJVM).

Page 17 of 19

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 18: ALU functions (IJVM).

Page 18 of 19

Figur 19: Timing diagram (IJVM).

Page 19 of 19

Norwegian University of Science and Technology
Engineering
The Department of Computer and Information Science

TDT4160

D ATAMASKINER GRUNNKURS
E KSAMEN
6. AUGUST, 2015, 09:00–13:00

Kontakt under eksamen:
Odd Rune Lykkebø 473 24 556
Tillatte hjelpemidler:
D.
Ingen trykte eller håndskrivne hjelpemiddel er tillat.
Enkel godkjent kalkulator er tillat.
Målform:
Bokmål

Page 1 of 17

O PPGAVE 1: O PPSTART, L ITT AV HVERT (25 %)
a. Forklar kort hva som ligger i begrepet lokalitet (locality) i sammenheng med hurtigbuffer
(cache).
b. Hva er gjennomsnittlig aksesstid for et minnesystem med ett nivå hurtigbuffer (cache) der
hovedminnet har en aksesstid på 1µs, hurtigbuffer har en aksesstid på 0, 05µs og trefforholdstall for systemet (hit ratio) er 90 %?
c. Forklar kort forskjellen på asynkron og synkron bussoverføring?
d. Hva kjennetegner en prosessor med Harvard-arkitektur? Forklar kort.
e. Forklar kort hva begrepet ILP er og hvordan dybden på samlebånd (pipelines) påvirker ILP.

Page 2 of 17

O PPGAVE 2: D IGITALT L OGISK N IVÅ (25 % (15 % PÅ A , 5 % PÅ B OG C ))
I en rakett benyttes det en mikrokontroller for å overvåke, og eventuelt avbryte oppskytingen. Figur 1 viser det eksterne bussgrensesnittet for mikrokontrolleren. Det er en ROM-brikke for
program. En sensor som overvåker kursen og en enhet for å avbryte oppskytingen. Alle enhetene
benytter et aktivt lavt (logisk ”0”) CS (Chip Select)-signal. Det er 1K byte RAM tilgjengelig internt
i mikrokontrolleren.
A0

Address bus

INV
NAND

NAND

OR

AND

AND

AND

AND

AND

AND

AND

AND

Microcontroller

A15

CS
R
D[7:0]
CS
R

R/W
Data[7:0]

Data bus

D[7:0]

Sensor

D

CS
W Self-destruct

ROM

8

Figur 1: Address decoding.
a.

i) Tegn minnekart for systemet.
ii) Hva er det største programmet (i byte) som får plass i ROM.

b. Etter flere litt uheldige episoder blir det bestemt å endre programmet som ligger i ROM. Det
viser seg da at det er behov for mer RAM for å forbedre systemet. Hvor mye RAM er det
mulig å utvide med?
c. Ut i fra den informasjonen du har tilgjengelig:
Hva slags signal(er) er nødvendig for å avbryte oppskytingen? Forklar kort.

Page 3 of 17

O PPGAVE 3: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (25 % (5 %
PÅ A , 10 % PÅ B OG C ))
Bruk vedlagte diagram i figur 3, figur 4, figur 5 og figur 6 for IJVM til å løse oppgavene.
a. i) Er det mulig å skrive resultatet fra en ALU-operasjon direkte til registeret MBR? Begrunn
svaret.
ii) Når i klokkeperioden blir registerinnhold oppdatert i IJVM? Forklar kort.
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: CPP = CPP + LV.
Du behøver ikke ta hensyn til Addr- og J-feltene. Oppgi korrekt bit-verdi for ALU-, C-, Memog B-feltene. – Se figur 4.
c. IJVM-registrene i figur 3 er satt til følgende verdier:
”SP”: hex(0001),
”LV”: hex(0505),
”CPP”: hex(AAAA),
”TOS”: hex(5555),
”OPC”: hex(0000),
”H”: hex(FF0A).
Hva er innholdet i H-registeret og TOS-registeret etter at følgende mikroinstruksjoner har
blitt utført? Oppgi svaret i hex-format.
1: ALU: 010100, C: 100000000, Mem: 000 og B: 0110
2: ALU: 011100, C: 101000000, Mem: 000 og B: 0111
3: ALU: 001100, C: 001000000, Mem: 000 og B: 1000

Page 4 of 17

O PPGAVE 4: I NSTRUKSJONSSETT ARKITEKTUR (ISA)(25 %)
En svært enkel prosessor har en load, en store, 8 ALU-instruksjoner og noen spesialinstruksjoner,
inkludert NOP-instruksjonen og to flytkontrollinstruksjoner (fow control instructions).. Instruksjonsformatet for instruksjonene er vist i figur 2. Alle register og busser er 32-bit. Prosessoren har
en Harvard architecture.
Load/store:
Load:
opCode

Rn

Rn

DC
0

32

Store:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

opCode

Rn

Rn

Rn

opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

DC

DC

DC

8 bit

8 bit

32

0

ALU:
32

0

32

0

8 bit

Spesial:
NOP:
opCode
32

0

8 bit

8 bit

MOVC:
opCode

Rn

Constant

32

0

8 bit

8 bit

16 bit

CP:
opCode

Rn

Rn

8 bit

8 bit

DC

32

0

8 bit

8 bit

Flow control:
BZ
opCode

Rn

DC

8 bit

8 bit

16 bit

opCode

DC

DC

8 bit

8 bit

32

0

RT
DC

32

0

8 bit

Rn: any user register, R0 - R15
DC: Don’t care: any data memory location

Figur 2: Instruction formats.

Page 5 of 17

8 bit

Instructions set:
LOAD: Load data from memory.
load Rn, Rn Load register Rn from memory location in Rn.
STORE: Store data in memory.
store Rn, Rn Store register Rn in memory location in Rn.
ALU: Data manipulation, register–register operations.
ADD Rn, Rn, Rn ADD, Rn = Rn + Rn. Set Z-flag if result =0.
NAND Rn, Rn, Rn Bitwise NAND, Rn = Rn · Rn. Set Z-flag if result =0.
OR Rn, Rn, Rn Bitwice OR, Rn = Rn + Rn. Set Z-flag if result =0.
INV Rn, Rn Bitwice invert, Rn = Rn. Set Z-flag if result =0.
INC Rn, Rn Increment, Rn = Rn + 1. Set Z-flag if result =0.
DEC Rn, Rn Decrement, Rn = Rn − 1. Set Z-flag if result =0.
MUL Rn, Rn, Rn Multiplication, Rn = Rn ∗ Rn. Set Z-flag if result =0.
CMP, Rn, Rn Compare, Set Z-flag if Rn = Rn
Special: Misc.
CP Rn, Rn Copy, Rn < − Rn
NOP Waste of time, 1 clk cycle.
MOVC Rn, constant Put a constant in register Rn = C.
Flow control: Branch.
BZ, Rn Conditional branch on zero, PC = Rn.
RT Return, return from branch.
Rn: Any user register.
DC: Don’t care.

Page 6 of 17

a. Er dette en generell prosessor? Hvorfor/hvorfor ikke?
b. Hvilken type instruksjon er NOP og RT?
c. Hvilken type adresseringsmodi (addressing modes) bruker ALU-instruksjonene?
d. Hva er den maksimale størrelsen på konstanten som MOVC kan benytte?
e. Vil følgende psaudokode føre til at Z-flagget blir aktivert slik at betingelsene for et hopp er
tilstede? Begrunn svaret.
• MOVC R1, 0xAA 55;
• MOVC R2, 0x55 AA;;
• CP R3, R2;
• INV R3, R3;
• CMP R1, R3;
• BZ R2;

Page 7 of 17

IJVM appendix

Page 8 of 17

Figur 3: Block diagram (IJVM).

Page 9 of 17

Figur 4: Microinstruction format (IJVM).

Page 10 of 17

A NSWER K EY

FOR

T HE E XAM

Page 1 of 17

O PPGAVE 1: O PPSTART, L ITT AV HVERT (25 %)
a. Forklar kort hva som ligger i begrepet lokalitet (locality) i sammenheng med hurtigbuffer
(cache).
Answer: rom og tid.
Programinstruksjonar vert utført sekvensielt. Viss ein instruksjon blir brukt (akssess) vil
instruksjonar som er nærligjande (i rom (adresser)) sansynleg bli aksessert. Eksempel
er kode som ligg sekvensielt og utføres i den rekkefylgjen. Cache replacement algoritmen kan då utnytte dette med å anta at instruksjonar som (sansynleg) skal brukast kan
hentast frå nærligjande minnellokasjonar.
Vidare er det sansynleg at kode (instruksjonar) som har vore aksessert tidligare vil
bli gjennbrukt. Eksempel løkker eller funksjonskall. Her er det f.eks ein sekvens (med
hopp/branch) som blir gjenbrukt, instruksjonane og data har lokalitet i tid. dette utnytes også av Cache replacement til å halde blokker som det er sansynleg"at vil bli brukt
(gjennbrukt) i cache.
Data i minnesystemet kan behandlas på samme måte (av cach replacement algoritmer)
data (minnelokasjonar) som ligg nær kvarandre (tabell, vector, etc) har høg sansynligheit for å bli brukt. Sameleis for data som har blitt aksesert tidligare vil sansynlegvis bli
aksesert igjen.
b. Hva er gjennomsnittlig aksesstid for et minnesystem med ett nivå hurtigbuffer (cache) der
hovedminnet har en aksesstid på 1µs, hurtigbuffer har en aksesstid på 0, 05µs og trefforholdstall for systemet (hit ratio) er 90 %?
Answer: mean access time = c + (1 − h) ∗ m); 0.05 + (1 − 0.9) ∗ 1) = 0.15
note også med c*h ok-.
c. Forklar kort forskjellen på asynkron og synkron bussoverføring?
Answer: asynkron:
Har ikkje referanse klokke
Brukar handshaking signal (e.g. req og acc).
Varierande aksess tid. Blir bestemt av einingen. Kan kombinere einingar med forskjelig
responstid på samme buss. Komunikasjonsprotokollen vil ta seg av aksesstid forskjelar.
synkron:
Brukar klokke.
All timing relatert til klokke.
Komunikasjonsprotokollen brukar klokkesignal som referanse for data (og kontrolsig.)
Einingar må forholde seg til klokkehastigheit. Ved einingar med forskjelig aksesstid på
ein synkron buss er "waitstatesein moglegheit.
d. Hva kjennetegner en prosessor med Harvard-arkitektur? Forklar kort.
Answer: Separat buss for instruksjonsminne og dataminne.
Ein slik arkitektur kan tillate å aksesere data og instruksjonar samstundes. Totalbåndbredde aukar, men antal busslinjer er høgare (dobbelt ved likt minnesystem). Processorar kan ha Harvard internt mot cache, men felles buss mot hovedminne, eksempel
ARM.
Page 2 of 17

e. Forklar kort hva begrepet ILP er og hvordan dybden på samlebånd (pipelines) påvirker ILP.
Answer: Instruktion Level Paralellism. Med fleire steg (djubde) vil ein få høgare ILP. Fleire
instruksjonar er under utføring samstundes (i forskjellige trinn i pipeline). ILP er eit
omgrep for prosessorkjerner (eventuelt for homogen multipross) som angir graden av
paralellutføring av instruksjonar, instruksjonsnivå paralelitet. Superscalare arkitekturar kan auke ILP ytterligare. (Anna type paralelitet: Prosessornivå paralelitet er at fleire
prosessorar jobbar saman (mot f.eks. delt minne.))

Page 3 of 17

O PPGAVE 2: D IGITALT L OGISK N IVÅ (25 % (15 % PÅ A , 5 % PÅ B OG C ))
I en rakett benyttes det en mikrokontroller for å overvåke, og eventuelt avbryte oppskytingen. Figur 1 viser det eksterne bussgrensesnittet for mikrokontrolleren. Det er en ROM-brikke for
program. En sensor som overvåker kursen og en enhet for å avbryte oppskytingen. Alle enhetene
benytter et aktivt lavt (logisk ”0”) CS (Chip Select)-signal. Det er 1K byte RAM tilgjengelig internt
i mikrokontrolleren.
a.

i) Tegn minnekart for systemet.
ii) Hva er det største programmet (i byte) som får plass i ROM.
Answer: i) Sensor: FFFF, Sjølvøydlegjar: FFFE, ROM:0000 - 1FFF, ubrukt: 2000 - FFFD. Må
ha med minnekart
ii) hex 2000 (8192) bytes.

b. Etter flere litt uheldige episoder blir det bestemt å endre programmet som ligger i ROM. Det
viser seg da at det er behov for mer RAM for å forbedre systemet. Hvor mye RAM er det
mulig å utvide med?
Answer: Ledig plass fra adr: 2000 - FFFD, 57342Byte. Dette er maksimalt sidan heile adresseområdet då vil bli brukt.
c. Ut i fra den informasjonen du har tilgjengelig:
Hva slags signal(er) er nødvendig for å avbryte oppskytingen? Forklar kort.
Answer: Skrive til adreser FFFE. (adresere Self-destruct og gi eit skrive signal (låg R/ Wlinje)).

Page 4 of 17

O PPGAVE 3: M IKROARKITEKTUR OG MIKROINSTRUKSJONER (25 % (5 %
PÅ A , 10 % PÅ B OG C ))
Bruk vedlagte diagram i figur 3, figur 4, figur 5 og figur 6 for IJVM til å løse oppgavene.
a. i) Er det mulig å skrive resultatet fra en ALU-operasjon direkte til registeret MBR? Begrunn
svaret.
ii) Når i klokkeperioden blir registerinnhold oppdatert i IJVM? Forklar kort.
Answer: i) Nei, det er ikkje mulig å opdatere MBR frå nokon buss. Det er kunn mulig å oppdatere dette registrert frå eksternt minne. Registeret blir oppdatert frå eksternt minne
(PC peikar på instruksjon som lastast i MBR).
ii) Utfrå klokkeperiode figuren kan ein sjå at alle register oppdaterast på stigande flanke.
b. Lag mikroinstruksjon(er) for følgende IJVM-operasjon: CPP = CPP + LV.
Du behøver ikke ta hensyn til Addr- og J-feltene. Oppgi korrekt bit-verdi for ALU-, C-, Memog B-feltene. – Se figur 4.
Answer: 1: ALU: A, C: h, B: CPP (eller LV)
2: ALU: A+ B, C: CPP, B: LV (eller CPP)
c. IJVM-registrene i figur 3 er satt til følgende verdier:
”SP”: hex(0001),
”LV”: hex(0505),
”CPP”: hex(AAAA),
”TOS”: hex(5555),
”OPC”: hex(0000),
”H”: hex(FF0A).
Hva er innholdet i H-registeret og TOS-registeret etter at følgende mikroinstruksjoner har
blitt utført? Oppgi svaret i hex-format.
1: ALU: 010100, C: 100000000, Mem: 000 og B: 0110
2: ALU: 011100, C: 101000000, Mem: 000 og B: 0111
3: ALU: 001100, C: 001000000, Mem: 000 og B: 1000
Answer: 1:
ALU: 010100 (B) C: 100000000 (H) Mem: 000 (ingen mem opprasjon) B: 0110 (6 CPP)
2
ALU: 111101 (OR) C: 101000000 (H og TOS) Mem: 000 (ingen mem opprasjon) B: 0111
(7 TOS)
3
ALU: 001100 (AND) C: 001000000 (TOS) Mem: 000 (ingen mem opprasjon) B: 1000 (8
Page 5 of 17

OPC)
(H = FFFF, TOS = 0000)

Page 6 of 17

O PPGAVE 4: I NSTRUKSJONSSETT ARKITEKTUR (ISA)(25 %)
En svært enkel prosessor har en load, en store, 8 ALU-instruksjoner og noen spesialinstruksjoner,
inkludert NOP-instruksjonen og to flytkontrollinstruksjoner (fow control instructions).. Instruksjonsformatet for instruksjonene er vist i figur 2. Alle register og busser er 32-bit. Prosessoren har
en Harvard architecture.

Page 7 of 17

Instructions set:
LOAD: Load data from memory.
load Rn, Rn Load register Rn from memory location in Rn.
STORE: Store data in memory.
store Rn, Rn Store register Rn in memory location in Rn.
ALU: Data manipulation, register–register operations.
ADD Rn, Rn, Rn ADD, Rn = Rn + Rn. Set Z-flag if result =0.
NAND Rn, Rn, Rn Bitwise NAND, Rn = Rn · Rn. Set Z-flag if result =0.
OR Rn, Rn, Rn Bitwice OR, Rn = Rn + Rn. Set Z-flag if result =0.
INV Rn, Rn Bitwice invert, Rn = Rn. Set Z-flag if result =0.
INC Rn, Rn Increment, Rn = Rn + 1. Set Z-flag if result =0.
DEC Rn, Rn Decrement, Rn = Rn − 1. Set Z-flag if result =0.
MUL Rn, Rn, Rn Multiplication, Rn = Rn ∗ Rn. Set Z-flag if result =0.
CMP, Rn, Rn Compare, Set Z-flag if Rn = Rn
Special: Misc.
CP Rn, Rn Copy, Rn < − Rn
NOP Waste of time, 1 clk cycle.
MOVC Rn, constant Put a constant in register Rn = C.
Flow control: Branch.
BZ, Rn Conditional branch on zero, PC = Rn.
RT Return, return from branch.
Rn: Any user register.
DC: Don’t care.

Page 8 of 17

a. Er dette en generell prosessor? Hvorfor/hvorfor ikke?
Answer: Generell: Har datamanipulasjon, dataflytt og betinga hopp.
b. Hvilken type instruksjon er NOP og RT?
Answer: Null adresse instruksjonar.
c. Hvilken type adresseringsmodi (addressing modes) bruker ALU-instruksjonene?
Answer: Register addressing (Register Direct). Alle felt i instruksjonen viser til register. Register - Register instruksjon.
d. Hva er den maksimale størrelsen på konstanten som MOVC kan benytte?
Answer: 16 bit tal f.eks integer unsigned. Dette er ein imidate instruksjon. Data er lagra
saman med instruksjonen. Verdien blir generert ved kompilering.
e. Vil følgende psaudokode føre til at Z-flagget blir aktivert slik at betingelsene for et hopp er
tilstede? Begrunn svaret.
• MOVC R1, 0xAA 55;
• MOVC R2, 0x55 AA;;
• CP R3, R2;
• INV R3, R3;
• CMP R1, R3;
• BZ R2;
Answer: JA CMP samanlignar to like. Z blir set slik at betingelsane for eit hopp til adr
0xAA55 er oppfylgt.
Komentar til kva instruksjonane utfører.

Page 9 of 17

IJVM appendix

Page 10 of 17

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 5: ALU functions (IJVM).

Page 11 of 17

Figur 6: Timing diagram (IJVM).

A0

Address bus

INV
NAND

NAND

OR

AND

AND

AND

AND

AND

AND

AND

AND

Microcontroller

A15

CS
R
D[7:0]
CS
R

R/W
Data[7:0]

Data bus

D[7:0]

Sensor

D

8

Figur 7: Address decoding.

Page 12 of 17

CS
W Self-destruct

ROM

Load/store:
Load:
opCode

Rn

Rn

DC
0

32

Store:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

opCode

Rn

Rn

Rn

32

0

ALU:
32

0

opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

DC

DC

DC

8 bit

8 bit

32

0

8 bit

Spesial:
NOP:
opCode
32

0

8 bit

8 bit

MOVC:
opCode

Rn

Constant

32

0

8 bit

8 bit

16 bit

CP:
opCode

Rn

Rn

8 bit

8 bit

DC

32

0

8 bit

8 bit

Flow control:
BZ
opCode

Rn

DC

8 bit

8 bit

16 bit

opCode

DC

DC

8 bit

8 bit

32

0

RT
DC

32

0

8 bit

Rn: any user register, R0 - R15
DC: Don’t care: any data memory location

Figur 8: Instruction formats.

Page 13 of 17

8 bit

Figur 9: Block diagram (IJVM).

Page 14 of 17

Figur 10: Microinstruction format (IJVM).

Page 15 of 17

SLR1 SLL8 Function
0
0 No shift
0
1 Shift 8 bit left
1
0 Shift 1 bit right
Figur 11: ALU functions (IJVM).

Page 16 of 17

Figur 12: Timing diagram (IJVM).

Page 17 of 17

Institutt for datateknikk og informasjonsvitenskap

Eksamensoppgåve i TDT4160 datamaskiner og
digitalteknikk

Fagleg kontakt under eksamen: Gunnar Tufte
Tlf.: 97402478

Eksamensdato: 28 november 2016
Eksamenstid (frå-til): 9:00 – 13:00
Hjelpemiddelkode/Tillatne hjelpemiddel: D: Ingen prenta eller handskrivne hjelpemiddel
tillatne. Bestemt, enkel kalkulator tillaten.

Annan informasjon:

Målform/språk: nynorsk
Sidetal (utan framside): 9
Sidetal vedlegg: 2

Informasjon om trykking av eksamensoppgåve

Kontrollert av:

Originalen er:

1-sidig

x

svart/kvit x

2-sidig □
fargar □

Skjema for fleire val?

____________________________
Dato

Sign

□

___________________________________________________________________________________________
Merk! Studentane finn sensur i Studentweb. Har du spørsmål om sensuren må du kontakte instituttet ditt.
Eksamenskontoret vil ikkje kunne svare på slike spørsmål.

Oppgåve 1 Oppstart, litt av kvart (20%)
a)
Figur 1 viser ei prinsippskisse av von Neumann-datamaskiner. Relater enhetene i lista under (i – iii)
til minne (memory), kontroll (control unit) eller ALU (arithmetic logic unit) i Figur 1.
i)
Register Svar: ALU
ii)
mikroinstruksjonsminne (microprogram control store) Svar: Control unit.
iii)
hurtigbuffer (cache) Svar: Minne
Svar:Fordeling bygger på von-Neumann arkitektur, sjå Lysark og bok.
til rett eining (minne (memory), kontroll (control unit) eller ALU (arithmetic logic unit)) i Figur 1.

Memory

Control
Unit

Arithmetic
logic unit

Input

Accumulator

Output

Figur 1 Prinsippskisse av von Neumann-maskin.

b)
Forklar kort hva som ligg i omgrepa:
i)
Instruksjonsnivå paralelitet (Instruction-Level Parallelism (ILP))
ii)
Prosessornivå parallellitet (Processor-level Parallelism)
Svar: ILP: fleire instruksjonar i parallel (pipeline) på ein kjerne (side 65-69).
Prosessor-level) fleire kjernar som jobbar i paralell, multiple eller single instruction stream. Sjå
også CMP-artike (bok side 65-69l.
c)
Forklar kort forskjellen på programert I/O med travel venting (programmed I/O with busy waiting)
og avbruddsdreven I/O (interrupt-driven I/O).
Svar: Busy waiting: prosessor må lese status (f.eks. i ein loop (opptatt med å loope)) til I/O
eining.Prosessor vil då være opptatt med å vente, får ikkje kjørt anna kode enn loop ved venting.
IRQ: I/O eining kan gi IRQ-signal til prosessor for å få utført I/O oppgåva. Prosessor treng ikkje
overvåke i SW (IRQ code for eining utførast når IRQ signal gis, prosessor kan utføre anna kode når
I/O handtering ikkje er nødvendigt.. Sjå slides og boka f.eks 109 og 414)
d)
Forklar kort kva som ligg i omgrepet lokalitet (locality)) i samband med minnesystem, f. eks.
hurtigbuffer og virtueltminne (paging).
Lokalitet i tid og rom (Temporal and spatial locality) :
Tid: sansynlig at data/inst brukt vil bli brukt igjen.
Rom: sansynlig at data/inst aksesert har nærligande data/inst som kjem til å bli aksessert.brukes til å
få ein effektiv (låg aksesstid) avbilding av minne i f.eks cache. Sjå boka side 83 og 4.5.1 + slides
e)
Forklar kort forskjellen på homogene (homogeneous) og hetrogene (heterogeneous) Multi
Processorar (CMP).

Svar: homogene like kjerner, hetrogene ulike. Sjå f.eks CMP artikel for forklaring.

Oppgåve 2 Digitalt Logisk Nivå (20% (a: 6%, b: 6%, c: 6% og 2% på d))
a)
Figur 2 viser ein enkel 1-bit ALU. Det er 2 data inngangar (in A og in B), ein data utgang (out), 1 Cinngang og 1 C-utgang. ALUen har 3 kontroll inngangar for å bestemme funksjon (F0, F1 og F2).
Finn kva aretmetisk eller logisk funksjon ALUen gjer for dei mulige kombinasjonane av kontroll
inngangane (000 - 111). Bruk gjerne ein tabell som for IJVM sine ALU-funksjonar.

In A

In B

In C

Out C

Logical 0
F0
F1
F2

D7

D6

D5

D4
D3
D2
Multiplexer
F

D1

D0

Out
Figur 2 Enkel 1-bit ALU.

Svar: Enkel 1 bit ALU med 2 data inngangar og ein carry inngang. F2 – F0 velger ALU funksjo,
resultat av valg tilgjengeleg på mux-utgang .IJVM har 6 funksjonsinngangar (fig 11). Kan då f.eks.
forklare virkemåte(logiske/aretmetisk funksjonar) på samme måte som fig. 11:
F2-F0 Out
Komentar
000: 0
(satt til logisk 0)
001 Full adder ADD A+B
(Add med carry, fullader C er mente bit (carry inn og ut))
010 A XOR B
011 A AND B
100 A OR B
101 A NAND B
110 NOT A
111 A
Her er alle funksjonar aktive. Utganges funksjon er kunn gitt av kva F-inngangane er. Carry logikken
er såleis aktiv for alle funksjonane (Out C = (A and B) + ((A xor B) and in C).

b)
I eit innvevd system (embedded system) for miljø overvaking er det ein sensor eining med 16
sensorar tilkopla. Det er ein alarm som viser viss det blir målt verdiar over ein terskel for ein eller
fleire av sensorane.I systemet er det nytta ein mikrokontroller. Figur 3 viser det eksterne
bussgrensesnittet med adressedekodingslogikk for mikrokontrolleren. Det er ein ROM-brikke for
program, ein RAM-brikke, ein senormodul og ein alarmmodul. Alle einingane nyttar eit aktivt lågt
(logisk ''0'') CS (Chip Select)-signal. Alle einingane nyttar 8 bit data.
A0

Address bus

INV
NAND

NAND

OR

AND

AND

AND

AND

AND

AND

AND

Microcontroller

A15

CS
R

CS
R/W
D[7:0]

D[7:0]
CS
R Sensors

RAM
R/W
Data[7:0]

Data bus D[7:0]

D

CS
W

Alarm

ROM

8

Figur 3 Address decoding.

i)
ii)
iii)

Finn adresseområde for RAM, ROM, Sensors og Alarm.
Teikn minnekart utfrå adresseområde
Er overlapp i adresseringa. I så fall er dette problematisk? Forklar kort.

Svar:
i)
ROM: 0000 – 1FFF
RAM: 2000 – 3FFF
Sensor: FFF0- FFFF
Alarm: FFFE
ii)
Minnekart må teiknast for utteljing (utteljing viss område funnet i i) og minnekart stemmer)
iii)
Det er overlapp mellom sensor og alarm på adr: FFFE, men ikkje nødvendigvis problematisk sidan
sensor kun brukar read og alarm kunn write, det vil aldri bli konflikt i minne (eining) aksess.Her
ogsåutteljing viss begrunna, og relater til i)

c)
Figur 4 viser ei FSM som sjekkar at eit inngangssignal er stabilt over ei viss tid målt i klokke pulsar.
FSM-en vil gi klarsignal om at alt er OK ved å legge Y høg. Logikk for reset og set for vippene er
ikkje tegna inn.
OK

D0

D

SET

CLR

D1 D

SET

CLR

D2

SET

CLR

Q0
Q1
Q1
Q0
Q2
Q2

D

Q

Q0

Q

Q0

Q

Q1

Q

Q1

Q

Q2

Q

Q2

Y

CLK

Figur 4 Finite State Machine (FSM)

Finn dei logiske uttrykka for D0, D1 og D2 (exciation equation). Angi neste tilstands uttrykka (next
state equations) og lag transisjonstabell (next-state-table) for kretsen som viser oppførselen til denne
FSM-en og utgangssignalet Y.
Svar:
D0 = (~Q2~Q1~Q0 OK) + (~Q2Q1~Q0 OK)
D1 = (~Q2 Q1 ~Q0 OK) + (~Q2~Q1Q0 OK)
D2 = (~Q2 Q1 Q0 OK)
Q0= D0, Q1 = D1, Q2 = D2.
Y = Q2 ~Q1~Q0. Teikn tabel.f. eks:

CurStat Q2Q1Q0
000
001
010
011
100
101
110
111

Nxt State OK = 1
001
010
011
100
000
000
000
000

Nxt State OK = 0
000
000
000
000
000
000
000
000

Y
0
0
0
0
1
0
0
0

Og state diagram kan då teiknast slik (viss ein ønskjer, ikkje spørsmål om å teilne):

d)
Er FSM-en i Figur 4 av type Mealy eller Moore?
Svar: Kunn State driven, i.e. Moore. Utgang Y kunn avhengig av current state til state registeret.

Oppgåve 3 Mikroarkitektur og mikroinstruksjoner (20% (a: 4%, b: 5%, c: 5%, d: 4% og 2% på e))
Bruk vedlagte diagram i figur 9, figur 10, figur 11 og figur12 for IJVM til å løse oppgavene.
a)
IJVM (og i mange addre arkitekturar) har fire register som grensesnitte mot eksternt minne. I IJVM er
det følgjande register: MAR, MDR, PC og MBR. Forklar kort korleis desse registera brukast og kva
som er lagra i dei.
Svar: MAR: MemoryAdrReg; peikar til dataminne adr.
MDR: MemoryDataReg; data til/frå dataminne.
PC: peikar til instruksjonsminne (opcode eventuelt operands).
MBR: MemoryBufferReg; Opcode frå instruksjons (eller operand). Reg inneheld Opcode git av
peikaren i PC.
Sjå bok/lysark for forklaring.
b)
For mikroarkitekturen i Figur 9. Kva er minimum mengd mikroinstruksjonar ein må bruke for å
kopiere verien i H-registeret til alle desse registera: OPC, TOS, CPP. Angi korleis dette kan gjerast
effektivt ved å oppgi mikroinstruksjon(ar).
Sjå vekk frå Addr- og J-felte i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem
og B gitt i figur 10.
Svar:ALU: A (H-reg), C: OPC, TOS, CPP (bit = 1 for alle desse (skrives samtidig) .B-buss (DC, ikkje
i bruk). Då mulig å gjere på ein microinstruksjon.Bit i mikroinstruksjon utfrå vedlegg
c)
For mikroarkitekturen i Figur 9. Lag mikroinstruksjonar for ein funksjon som kan teste om innhalde i
registera MDR og LV er likt. Angi korleis ein slik likskap kan bli detektert.
Sjå vekk frå Addr- og J-felte i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem
og B gitt i figur 10.
Svar: Brukar inv og AND. 1: flytter LV invert til H: ALU: ~B, C: H, B:LV. Har då LV inv i H.
2: ALU: A AND B, C: 0 (lagrar ikkje resultat (kan velge å putte svar i f.eks H), B: MDR. Viss like vil
~LV AND MDR gi 0 og sette Z flagget . Andre løysingar mulig, f.eks. sub i andre mikro inst.
Bit i mikroinstruksjon utfrå vedlegg
d)
OpCode i IJVM er på 8-bit (f.eks. 0x60 IADD og 0x99 IFEQ). MPC er på 9 bit. Kva funksjon har det
ekstra bite i MPC? Når er det i bruk?
Svar: MSD(bit 8) i MPC har som funksjon å opne for programflyt i microprogram. MSD kan
manipulereast av N og Z flagg for å velje ein av to adr. i control store, e.g. for branch zero instr.; viss
Z = 0, MPC = 0xxxxxxxx. Viss Z = 1; MPC = 1xxxxxx. På denne måten kan ein få to alternative
programstiar i microprog for betinga hopp instruksjonar.Gitt av J felta i mikroinstruksjon.Sjå
kapittel 4, lysark.
e)
For IJVM arkitekturen i figur 9. Kva er lengden (i bit) på ein mikroinstruksjon og kva er maksimalt
mengd mikroinstruksjonar for denne versjonen av IJVM.
Svar: i figur 9 er control store definert til å inneholde ord på 36 bit. Det er 512 lokasjonar. Så då er
ein micro instruksjon 36 bit og det er plass til max 512 micro instruksjonar.

Oppgåve 4 Instruksjonssett arkitektur (ISA) (20 (20% (a: 3%, b: 4%, c: 3% og 10% på d))
BarabassX42 er ein særs enkel prosessor. BarabassX42 har ein ”load”, ein ”store”, 8 ALUinstruksjonar og nokre spesialinstruksjonar, inkludert NOP-instruksjonen og to
flytkontrollinstruksjonar (flow control instructions). Instruksjonsformatet for instruksjonane er vist i
figur 5, figur 6 viser instruksjonssettet. Alle register og bussar er 32-bit. Det er 32 generelle register
tilgjengeleg. Prosessoren har ein Harvard architecture. Bruk figur 5 og figur 6 til å løyse oppgåva.
a)
Denne prosessoren har mange eigenskapar frå RISC-prosessorar. Utfrå tilgjengelig informasjon nevn
minst tre av eigenskapane til BarabassX42 som er RISC-inspirert.
Svar: F.eks:
Load/store architectur
Like lengde på alle instruksjonar (instuksjons format)
Få addreseringsmodes
Enkle instruksjonar (dei fleste untatt muligens eksternminne aksess) kan gjerast på 1 clk)’
Register-Register basert instruksjonar
Mange generelle register.
(sjå bok lysark for meir)
b)
Gi eksempel på ein BarabassX42 instruksjon som nyttar adresseringsmodi (addressing mode)
imidiate adressing.
Svar: MOVC. Operand gitt som verdi i instruksjon.
Gi eksempel på ein BarabassX42 instruksjon med instruksjonsformatet null adresseinstruksjon (zeroaddress instruction).
Svar: NOP og RT. Begge har ikkje operandar. Det er kunn opCode.
c)
Kva er det maksimale adresserommet BarabassX42 kan adressere?
Svar: 2^32 (oxFFFFFFFF + 1). Det er 32 bit adressebuss og register som innheld adr. Peikar er på
32 bit.
d)
R8 har følgjande verdi: 0xFFFF 0000, R9 har følgjande verdi: 0xFFFF 0002. I data minne ligg
følgjande data frå adresse 0xFFFF 0000:
Adresse
Data
0xFFFF 0000: 0x00 00 00 55
0xFFFF 0001: 0x00 AA 00 00
0xFFFF 0002: 0x00 00 00 AA
0xFFFF 0003: 0x00 00 55 00
0xFFFF 0004: 0x00 00 00 00
Følgjande psaudokode er ein del av eit større program. Svar på spørsmåla utfrå tilgjengeleg
innformasjon.
LOAD R1, R8;
LOAD R2, R9;
STORE R1, R2;
ADD R1, R1, R8;
STORE R1, R8;
LOAD R1, R2;

R1 = 00 00 00 55, Load frå ekternt minne (R8 adr, operand til R1)
R2 = 00 00 00 AA, Load frå ekternt minne (R9 adr, operand til R2)
00 00 00 AA -> 00 00 00 55; Store ekternt mine (R1 lagra på adr gitt av R2)
R1 = 55 + FFFF 0000= FFFF 0055, ADD, R1 ny verdi
FFFF 0000 <- FFFF 0055, Store resultat frå ADD i ektern adr gitt av R8
R1 = 55, LOAD R1 med data frå ekternt minne adr gitt av R2 (0000AA)

MOVC R16, 0x0055; R16 = 0x55, Immidiate load av constant.
ADD R1, R1, R16; R1 = 55 + 55 = AA, ADD, ny verdi i R1
CMP R1, R2;
AA = AA, Samanlignar to like verdiar Z-flagg = 1.
BZ R1;
Z = 1, Hopp til instruksjonsminne adr gitt av R1 = PC = 00 00 00 AA
Forklar kva som skjer i koden. Kva verdi vil R1 ha etter at koden har køyrt?
Svar: R1 = 00 00 00 AA. Forklaring over som komentar til kodegitt over.

Load/store:
Load:
opCode

Ri

Rj

DC
0

31

Store:
opCode

Ri

Rj

DC

8 bit

8 bit

8 bit

8 bit

opCode

Ri

Rj

Rk

31

0

ALU:
31

0

opCode

Ri

Rj

DC

31

0

8 bit

8 bit

8 bit

8 bit

opCode

DC

DC

DC

Spesial:
NOP:
31

0

8 bit

8 bit

8 bit

8 bit

MOVC:
opCode

Ri

Constant

31

0

8 bit

8 bit

16 bit

CP:
opCode

Ri

Rj

DC

31

0

8 bit

8 bit

8 bit

8 bit

Flow control:
BZ
opCode

Ri

DC

31

0

8 bit

8 bit

opCode

DC

16 bit

RT
DC

DC

31

0

8 bit

8 bit

8 bit

Ri, Rj and Rk: any user register, R0 - R31
DC: Don’t care: any data memory location
Figur 5 Instruction format BarabassX42

8 bit

Figur 6 Instruction set BarabassX42.

Oppgåve 5 Ytelse (20 (20% (a: 5%, b: 10%, og 5% på c))
a)
Ein prosessor har eit minnesystem med RAM og eit nivå med hurtigbuffer (cache). Minnesystemet
har følgjande eigenskapar:
RAM: aksesstid: 100ns
Cache: aksesstid 10 ns
Trefforholdstal (Hit ratio) på 80%
Kva er gjennomsnittleg aksesstid for dette minnesystemet?
Svar akessTime = c + (1 – h) * m = 10 + (1 – 0.8) * 100 = 30ns
b)
1) Figur 7 viser samlebåndet (pipeline) for ein prosessor. Det er 5 steg. Estimer maksimal
klokkefrekvens for denne prosessoren?
Svar: treigaste trinn gir klokke, i.e. f = 1/15ns = 66.7 Mhz
Fetch

Decode

5ns

5ns

Operand

Execute

Writeback

7.5ns

15ns

5ns

Figur 7 5 stage pipeline.

2) For å auke ytinga blir execute steget delt i tre som vist i figur 8. Kva er no maksimal
klokkefrekvens for prosessoren?
Svar: treigaste trinn gir klokke, i.e. f = 1/7.5ns = 133 Mhz
Fetch

Decode

Operand

Execute 1

Execute 2

Execute 3

Writeback

5ns

5ns

7.5ns

5ns

5ns

5ns

5ns

Figur 8 7 stage pipeline.

3) Det eksisterar ein variant av prosessoren utan samlebånd. Estimer kva klokkefrekvensen på denne
varianten er?
Svar:Då må alle enkelt operasjonane i instruksjon utførast på ein clk periode. Må då sette klokke
frekvensen til summen av enkelt operasjonar, i.e. f = 1/37.5ns = 26.667 Mhz
4) Kva ulemper medfører det å ha djupe (mange steg) i samlebånd? Forklar kort.
Svar: Djupe piupelines er problematisk ved programflyt operasjonar, f.eks conditional branch. Då
må pipeline tømmast viss ein hoppar (eller viss branch predict bommar og fyller pipeline med feil
programsti instruksjonar/operands). Avhengigheiter der resultat av ein instrukson ikkje er f.eks
ferdigt før det skal brukast av neste instruksjon, får då «stal» i pipelina
c)
Figure 9 viser mikroarkitekturen til IJVM. Foreslå to tiltak som aukar ytelsen.
Svar: Frå bok forelesing:
-Innføre A-buss, kan då gi ALU tilgong på 2 vilkårlege register (sparar mikroinstruksjonar (raskare
instruksjonsutføring))
-Innføre Instruction Fetch Unit (IFU) som hentar instruksjonar automagisk. Slepp å bruke datapath
til å oppdatere PC og kan ha kø av instruksjonar og operandar (slepp å vente på minne aksess (prefetch).
-Innføre pipeline, mange muligheiter, f.eks. fetch, decode, operand fetch (kø), tre trinn i datapath,
writeback.
-Cache, for å minke aksesstid for minne aksess.

Vedlegg IJVM

Figur 9 IJVM

Figur 10 Microinstruction format.

SLR1 SLL8 Function
0
0
No shift
0
1
Shift 8 bit left
1
0
Shift 1 bit right
Figur 11 ALU functions.

Figur 12 iming diagram.

Institutt for datateknikk og informasjonsvitenskap

Eksamensoppgave i TDT4160 datamaskiner og
digitalteknikk
Faglig kontakt under eksamen: Gunnar Tufte
Tlf.: 97402478

Eksamensdato: 28. november 2016
Eksamenstid (fra-til): 9:00–13:00
Hjelpemiddelkode/Tillatte hjelpemidler: D: Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillat.

Annen informasjon:

Målform/språk: Bokmål
Antall sider (uten forside): 9
Antall sider vedlegg: 2

Informasjon om trykking av eksamensoppgave

Kontrollert av:

Originalen er:

x

2-sidig □

sort/hvit x

farger □

1-sidig

Dato

Sign

skal ha flervalgskjema □
___________________________________________________________________________________________
Merk! Studenter finner sensur i Studentweb. Har du spørsmål om din sensur må du kontakte instituttet ditt.
Eksamenskontoret vil ikke kunne svare på slike spørsmål.

Oppgave 1 Oppstart, litt av hvert (20%)
a)
Figur 1 viser en prinsippskisse av von Neumann-datamaskiner. Relater enhetene i lista under (i – iii)
til minne (memory), kontroll (control unit) eller ALU (arithmetic logic unit) i Figur 1.
i)
register
ii)
mikroinstruksjonsminne (microprogram control store)
iii)
hurtigbuffer (cache)

Memory

Control
Unit

Arithmetic
logic unit

Input

Accumulator

Output

Figur 1 Prinsippskisse av von Neumann-maskin.

b)
Forklar kort hva som ligger i begrepene:
i)
Instruksjonsnivå parallellitet (Instruction-Level Parallelism (ILP))
ii)
Prosessornivå parallellitet (Processor-level Parallelism)
c)
Forklar kort forskjellen på programmert I/O med travel venting (programmed I/O with busy waiting)
og avbruddsdrevet I/O (interrupt-driven I/O).
d)
Forklar kort hva som ligger i begrepet lokalitet (locality) i forbindelse med minnesystem, f. eks.
hurtigbuffer og virtuelt minne (paging).
e)
Forklar kort forskjellen på homogene (homogeneous) og heterogene (heterogeneous) Multi
Prosessorer (CMP).

Oppgave 2 Digitalt Logisk Nivå (20% (a: 6%, b: 6%, c: 6% og 2% på d))
a)
Figur 2 viser en enkel 1-bit ALU. Det er 2 datainnganger (in A og in B), en datautgang (out), 1 Cinngang og 1 C-utgang. ALU-en har 3 kontrollinnganger for å bestemme funksjon (F0, F1 og F2).
Finn hva aritmetisk eller logisk funksjon ALU-en gjør for de mulige kombinasjonene av
kontrollinngangene (000 - 111). Bruk gjerne en tabell som for IJVM sine ALU-funksjoner.

In A

In B

In C

Out C

Logical 0
F0
F1
F2

D7

D6

D5

D4
D3
D2
Multiplexer
F
Out
Figur 2 Enkel 1-bit ALU.

D1

D0

b)
I et innvevd system (embedded system) for miljøovervåkning er det en sensorenhet med 16 sensorer
tilkoblet. Det er tilkoblet en alarm som går hvis det blir målt verdier over en terskel for en eller flere
av sensorene. I systemet er det benyttet en mikrokontroller. Figur 3 viser det eksterne
bussgrensesnittet med adressedekodingslogikk for mikrokontrolleren. Det er en ROM-brikke for
program, en RAM-brikke, en sensormodul og en alarmmodul. Alle enhetene benytter et aktivt lavt
(logisk ''0'') CS (Chip Select)-signal. Alle enhetene benytter 8-bit data.
A0

Address bus

INV
NAND

NAND

OR

AND

AND

AND

AND

AND

AND

AND

Microcontroller

A15

CS
R

CS
R/W
D[7:0]

D[7:0]
CS
R Sensors

RAM
R/W
Data[7:0]

Data bus D[7:0]

D

CS
W

Alarm

8

Figur 3 Address decoding.

i)
ii)
iii)

Finn adresseområdene for RAM, ROM, Sensors og Alarm.
Tegn minnekart ut fra adresseområdet.
Er det overlapp i adresseringa. I så fall er dette problematisk? Forklar kort.

ROM

c)
Figur 4 viser en FSM som sjekker at et inngangssignal er stabilt over en viss tid målt i klokkepulser.
FSM-en vil gi klarsignal om at alt er OK ved å legge Y høyt. Logikk for reset og set for vippene er
ikke tegnet inn.
OK

D0

D

SET

CLR

D1 D

SET

CLR

D2

SET

CLR

Q0
Q1
Q1
Q0
Q2
Q2

D

Q

Q0

Q

Q0

Q

Q1

Q

Q1

Q

Q2

Q

Q2

Y

CLK

Figur 4 Finite State Machine (FSM)

Finn de logiske uttrykkene for D0, D1 og D2 (excitation equation). Angi de neste tilstandsuttrykkene
(next state equations) og lag transisjonstabell (next-state-table) for kretsen, som viser oppførselen til
denne FSM-en og utgangssignalet Y.
d)
Er FSM-en i Figur 4 av typen Mealy eller Moore?

Oppgave 3 Mikroarkitektur og mikroinstruksjoner (20% (a: 4%, b: 5%, c: 5%, d: 4% og 2% på e))
Bruk vedlagte diagram i figur 9, figur 10, figur 11 og figur12 for IJVM til å løse oppgavene.
a)
IJVM (og i mange andre arkitekturer) har fire register som grensesnitt mot eksternt minne. I IJVM er
det følgende register: MAR, MDR, PC og MBR. Forklar kort hvordan disse registrene brukes og hva
som er lagra i dem.
b)
For mikroarkitekturen i Figur 9. Kva er minimum mengde mikroinstruksjoner en må bruke for å
kopiere verdien i H-registeret til alle disse registrene: OPC, TOS, CPP. Angi hvordan dette kan gjøres
effektivt ved å oppgi mikroinstruksjon(er).
Se vekk fra Addr- og J-feltet i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem
og B gitt i figur 10.
c)
For mikroarkitekturen i Figur 9. Lag mikroinstruksjoner for en funksjon som kan teste om innholdet i
register MDR og LV er likt. Angi hvordan en slik likhet kan bli detektert.
Se vekk fra Addr- og J-feltene i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem
og B gitt i figur 10.
d)
OpCode i IJVM er på 8-bit (f.eks. 0x60 IADD og 0x99 IFEQ). MPC er på 9 bit. Hvilken funksjon har
det ekstra bit-et i MPC? Når er det i bruk?
e)
For IJVM-arkitekturen i figur 9. Hva er lengden (i bit) på en mikroinstruksjon og hva er maksimal
mengde mikroinstruksjoner for denne versjonen av IJVM.

Oppgave 4 Instruksjonssett arkitektur (ISA) (20% (a: 3%, b: 4%, c: 3% og 10% på d))
BarabbasX42 er en svært enkel prosessor. BarabbasX42 har en ”load”, en ”store”, 8 ALUinstruksjoner og noen spesialinstruksjoner, inkludert NOP-instruksjonen og to
flytkontrollinstruksjoner (flow control instructions). Instruksjonsformatet for instruksjonene er vist i
figur 5, figur 6 viser instruksjonssettet. Alle register og busser er 32-bit. Det er 32 generelle register
tilgjengelig. Prosessoren har en Harvard-arkitektur. Bruk figur 5 og figur 6 til å løyse oppgaven.
a)
Denne prosessoren har mange egenskaper fra RISC-prosessorer. Ut fra tilgjengelig informasjon nevn
minst tre av egenskapene til BarabbasX42 som er RISC-inspirert.
b)
Gi eksempel på en BarabbasX42-instruksjon som benytter adresseringsmodi (addressing mode)
imidiate adressing.
Gi eksempel på en BarabbasX42-instruksjon med instruksjonsformatet null adresseinstruksjon (zeroaddress instruction).
c)
Hva er det maksimale adresserommet BarabbasX42 kan adressere?
d)
R8 har følgende verdi: 0xFFFF 0000, R9 har følgende verdi: 0xFFFF 0002. I dataminnet ligg
følgende data fra adresse 0xFFFF 0000:
Adresse
Data
0xFFFF 0000: 0x00 00 00 55
0xFFFF 0001: 0x00 AA 00 00
0xFFFF 0002: 0x00 00 00 AA
0xFFFF 0003: 0x00 00 55 00
0xFFFF 0004: 0x00 00 00 00
Følgende psaudokode er en del av et større program. Svar på spørsmåla ut fra tilgjengelig
informasjon.
LOAD R1, R8;
LOAD R2, R9;
STORE R1, R2;
ADD R1, R1, R8;
STORE R1, R8;
LOAD R1, R2
MOVC R16, 0x0055;
ADD R1, R1, R16;
CMP R1, R2;
BZ R1;
Forklar Hva som skjer i koden. Hvilken verdi vil R1 ha etter at koden har kjørt?

Load/store:
Load:
opCode

Ri

Rj

DC
0

32

Store:
opCode

Ri

Rj

DC

8 bit

8 bit

8 bit

8 bit

opCode

Ri

Rj

32

0

ALU:
Rk

32

0

opCode

Ri

Rj

DC

32

0

8 bit

8 bit

8 bit

8 bit

opCode

DC

DC

DC

Spesial:
NOP:
32

0

8 bit

8 bit

8 bit

8 bit

MOVC:
opCode

Ri

Constant

32

0

8 bit

8 bit

16 bit

CP:
opCode

Ri

Rj

DC

32

0

8 bit

8 bit

8 bit

8 bit

Flow control:
BZ
opCode

Ri

DC

8 bit

8 bit

16 bit

opCode

DC

32

0

RT
DC

DC

32

0

8 bit

8 bit

8 bit

Ri, Rj and Rk: any user register, R0 - R31
DC: Don’t care: any data memory location
Figur 5 Instruction format BarabbasX42

8 bit

Figur 6 Instruction set BarabbasX42.

Oppgave 5 Ytelse (20 (20% (a: 5%, b: 10%, og 5% på c))
a)
En prosessor har et minnesystem med RAM og eit nivå med hurtigbuffer (cache). Minnesystemet har
følgende egenskaper:
RAM: aksesstid: 100ns
Cache: aksesstid 10 ns
Trefforholdstall (Hit ratio) på 80%
Hva er gjennomsnittlig aksesstid for dette minnesystemet?
b)
1) Figur 7 viser samlebåndet (pipeline) for en prosessor. Det er 5 steg. Estimer maksimal
klokkefrekvens for denne prosessoren?
Fetch

Decode

5ns

5ns

Operand

Execute

Writeback

7.5ns

15ns

5ns

Figur 7 5 stage pipeline.

2) For å øke ytelsen blir execute-steget delt i tre som vist i figur 8. Hva er nå maksimal
klokkefrekvens for prosessoren?
Fetch

Decode

Operand

Execute 1

Execute 2

Execute 3

Writeback

5ns

5ns

7.5ns

5ns

5ns

5ns

5ns

Figur 8 7 stage pipeline.

3) Det eksisterer en variant av prosessoren uten samlebånd. Estimer hva klokkefrekvensen på denne
varianten er?
4) Hvilke ulemper medfører det å ha dype (mange steg) i samlebånd? Forklar kort.
c)
Figur 9 viser mikroarkitekturen til IJVM. Foreslå to tiltak som øker ytelsen.

Vedlegg IJVM

Figur 9 IJVM

Figur 10 Microinstruction format.

SLR1 SLL8 Function
0
0
No shift
0
1
Shift 8 bit left
1
0
Shift 1 bit right
Figur 11 ALU functions.

Figur 12 Timing diagram.

Institutt for datateknikk og informasjonsvitenskap

Eksamensoppgave i TDT4160 datamaskiner og
digitalteknikk
Faglig kontakt under eksamen: Gunnar Tufte
Tlf.: 97402478

Eksamensdato: 17. august 2017
Eksamenstid (fra-til): 9:00–13:00
Hjelpemiddelkode/Tillatte hjelpemidler: D: Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillat.

Annen informasjon:

Målform/språk: Bokmål
Antall sider (uten forside): 10
Antall sider vedlegg: 2

Informasjon om trykking av eksamensoppgave

Kontrollert av:

Originalen er:

x

2-sidig □

sort/hvit x

farger □

1-sidig

Dato

Sign

skal ha flervalgskjema □
___________________________________________________________________________________________
Merk! Studenter finner sensur i Studentweb. Har du spørsmål om din sensur må du kontakte instituttet ditt.
Eksamenskontoret vil ikke kunne svare på slike spørsmål.

Oppgave 1 Oppstart, litt av hvert (20%)
a)
Figur 1 viser en skisse av en mulig bussarbitreringsmekanisme. Ut fra informasjonen i figur 1 svar på
følgende spørsmål:
i)
Hvilken enhet vil få bussen hvis enhet C og D gjør en «Buss request» samtidig? Forklar
kort.
ii)
Er dette en sentralisert eller en desentralisert arbitreringsmekanisme? Forklar kort.

E

D

C

B

A

Figur 1 Bussarbitrering.

Svar: Dette er ein desentralisert bussarbitrering, det er ingen arbitreringslogikk sentralt einheitane
forhandlar seg i mellom. Dei er «Daisy chained» slik at prioriteringen er gitt av plasering, høgast
prioritert nærast +5V Arbitration line, lågast prioritert siste eining i kjeden.
Ved samtidig request vil C og D dra ned Bus request (open collector kopla). D vil bryte
arbitreringsignalet, sender 0V vidar og «ta bussen» med å signalisere Busy (dra ned til 0V). Når D
er ferdig vil den slippe Busy linja og C kan ta bussen ved å å dra bussy låg (og bryte arbit. Linja).
b)
Angi endring i aksesstid, lagringskapasitet og pris (bit/kr) når man går nedover i lagerhierarkiet
(memory hierarchies), fra CPU-register, hurtigbuffer til hovedminne (main memory).
Svar: For kvar skritt ned i hierarkiet:
Top Register, Kortast aksesstid, minst kapasitet (n word-register), dyrast
Hurtigbuffer, auka akesstid, auka kapasitet, minka pris
Hovedminne, auka akesstid, auka kapasitet, minka pris
Sjå 2.3.1 i boka.
c)
Hva er «latency hiding», og hvorfor har dette fått økt oppmerksomhet ved økt CPU-ytelse? Forklar
kort.
Svar sjå lysarkt memory (cache), og ytelse auke forskjell i prosessor ytelse og minne ytelse, Fig:

d)
Hva er en «interrupt vector»? Forklar kort.
Svar: Peikar til adresse for interrupt code, kan og være peikar til IRQ-handler, sjå bok 2.4.6 (s200),
5.6.5 og lysark.
e) De tre instruksjonene vist under (I1, I2 og I3) er del av et større program. Er det avhengigheter
(true dependence) i koden under? Forklar kort.
I1: ADD R1, R2, R3; ( R1 = R1 + R3, Rn Register nummer)
I2: SUB R4, R1, R5; (R4 = R1 + R5)
I3: AND R0, R7, R9; (R0 = R7 and R9)
Svar: Her er det ein trykkfeil:
ADD R1, R2, R3; ( R1 = R1 + R3, skal være ADD R1, R2, R3; ( R1 = R2 + R3)
Har ikkje betyding for sanne avhengigheiter I dei tre viste linjene.
Sann avhengigheit:
R1 write, I1
R1 read, I2. (RAW). Dette kan gi problemer vist ikkje handtert I pipeline (paralellitet).

Oppgave 2 Digitalt Logisk Nivå (20% (a: 5%, b: 7.5% og c: 7.5%))
a)
Figur 2 viser en skisse av innholdet i en ALU. Det er to datainnganger (A og B), én datautgang
(Result), én Carry-inngang og én Carry-utgang. ALU-en har tre kontrollinnganger for å bestemme
funksjon. Internt er det komponenter for aritmetikk og logikk, disse kan repliseres til ønsket
bitbredde, tre multiplexere og kontrollogikk. ALU-en bruker en klokkeperiode på å utføre en
operasjon.

MUX

MUX

MUX

Figur 2 ALU-skisse.

Hvor mange klokkeperioder er nødvendig for å utføre en subtraksjon (Result=operand1–operand2)?
Forklar hvilke ALU operasjoner som må utføres for en subtraksjonen. Du kan fritt velge hvilken
datainngang (A eller B) operandene tilordnes. Det er ikke nødvendig å spesifisere eventuelle
mellomlagringer i spesifikke register, bruk tilgjengelig informasjon og oppgi eventuelle
forutsetninger.
Svar: Må bruke 2er komplement. For eksempel T-skje måte:
Kan sette opp A – B,
1: not B. (Inv i mux (L)) + 1 (frå mux (R), (svar tilgjengeleg på B for neste)
2: A + B (Svar tilgjengeleg på resultat)
Altså gjere om operand på B inngang til toer-komplement og så gjere ein ADD
Masse måtar å få dette til på, i eksempelet 2 klokke periodar.

b)
I et innvevd system (embedded system) er det benyttet én mikrokontroller, to RAM-brikker på 32k
byte og én ROM-brikke på 16k byte. Figur 3 viser det eksterne bussgrensesnittet med
adressedekodingslogikk. Alle enhetene benytter et aktivt lavt (logisk ''0'') CS (Chip Select)-signal.
Alle enhetene benytter 8-bit data.
A0

Address bus

Microcontroller

A15

OR

INV
CS
R/W
D[7:0]

CS
R/W
D[7:0]

RAM 1

RAM 2

R/W
Data[7:0]

CS
R

D[7:0]

ROM

Data bus

8

D[7:0]

Figur 3 Addresse decoding 1.

I et forsøk på å spare komponenter blir systemet endret til å bare bruke en RAM-brikke på 64k byte.
Det nye systemet er vist i figur 4.
i)
Er de to systemene vist i figur 3 og figur 4 kompatible (likt adresseområde)? Forklar.
ii)
Vil et program skrevet for systemet vist i figur 3 virke uten endringer på systemet vist i
figur 4? Forklar kort hvorfor/hvorfor ikke.
Svar: Fig 3:
ROM 0000 – 00FF
RAM1 0100 – 7FFF
RAM2 8000 - FFFF
Fig 4:
ROM 0000 – 00FF
RAM 0100 – FFFF
Det er ikkje noko forskjell set frå programeraren (eller CPU) sidan begge systema kan adresser og
har RAM nok til å dekke alle adressene i det adreserbare område.

A0

Address bus

Microcontroller

A15

CS
R/W
D[7:0]

CS
R

RAM 1
R/W
Data[7:0]

D[7:0]

ROM

Data bus

Figur 4 Addresse decoding 2.

8

D[7:0]

c)
Figur 5 viser tilstandsdiagramet for en FSM som brukes i kontrollogikken i en CPU. Det er to bit
input fra dekodingslogikken (Input), og tre utgangssignal (output): A (enable for ALU), MW
(memory write signal) og MR (memory read signal).
Input = 00

Input = 10
Input = 11

IDLE
A = 0, MR = 0,
MW = 0

Input = 01
ALU
A = 1, MR = 0,
MW = 0

MR
A = 0, MR = 1,
MW = 0

MW
A = 0, MR = 0,
MW = 1

Wait
A = 0, MR = 0,
MW = 0

Figur 5 Finite State Machine (FSM)

i)

Fullfør transisjonstabellen på følgende format:
Current
state
Idle
MW
MR
ALU
Wait

ii)

Nxt state
Input=00
Idle
Wait
Wait
Idle
Idle

Nxt state
Input=01
MW
Wait
Wait
Idle
Idle

Nxt state
Input=10
MR
Wait
Wait
Idle
Idle

Nxt state
Input=11
ALU
Wait
Wait
Idle
Idle

Output
A
0
0
0
1
0

Output
MR
0
0
1
0
0

Output
WR
0
1
0
0
0

Hva er minimum størrelse på stateregisteret (antall flip-flops)?
Svart: for å dekke alle states trengs det 5 unike tilstandar, 3 bit state register. I eit slikt 3
bit register kan (f.eks) states 000 – 100 kodast som states i FSM-en (har då tilstandane
101, 110 og 111 som ikkje er spesifiser. Desse skal legjast til som retur til ein kjent
definert tilstand (IDLE). (Current state 101-> IDLE for alle kombinasjonar av input. ETC
for 110 og 111).

Oppgave 3 Mikroarkitektur og mikroinstruksjoner (20% (a: 7.5%, b: 7.5% og c: 5%))
Bruk vedlagte diagram i figur 10, figur 11, figur 12 og figur 13 for IJVM til å løse oppgavene.
a)
Forklar kort funksjonen til de forskjellige feltene i MIR (Addr, J, ALU, C; M og B).
Svar: Oppsummert (for kort) Addr:adresse til neste mikroinst.i instruksjon, J for branch instruksjonar,
ALU ALU funksjon (tabell), C: kontroll signal for register load, B: buss kontroll for kva register som
skal leggje data på B-buss.M kontroll for read, write og fetch for ekstern minne akkess, Sjå 4.1.2 og
4.1.3 i boka.
b)
For mikroarkitekturen i Figur 9. Angi mikroinstruksjon(er) for å utføre en NAND funksjon mellom
innholdet i registerene LV og TOS. Resultatet skal lagres i OPC-registeret (OPC = LV NAND TOS).
Se vekk fra Addr- og J-feltet i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem
og B gitt i figur 10.
Svar: F.eks ein måte (må opp gi bits også):
1: LV -> H (B: LV, C: H, ALU B)
2: H AND TOS -> H (B: TOS, ALU A AND B, C: H)
3 H A invert -> OPC (B: DC, ALU B~, C:OPC
c)
Hvilke parameter bestemmer klokkefrekvensen denne versjonen av IJVM kan operere på?
Svar: Den er gitt av tidsforsinkelsen dW + dX + dY + dZ i Fig:

Dette er prog. Delay i dathapath som angir tiden det tar frå register blir aksessert til data er stabile og
kan lagrast (i register).

Oppgave 4 Instruksjonssett arkitektur (ISA) (20% (a: 5%, b: 5% og 10% på c))
Letni X68 er en svært enkel prosessor. Letni X68 har én «load», én «store», åtte ALU-instruksjoner
og noen spesialinstruksjoner, inkludert NOP-instruksjonen og tre flytkontrollinstruksjoner (flow
control instructions). Instruksjonsformatet for instruksjonene er vist i figur 6, figur 7 viser
instruksjonssettet. Alle register og busser er 32-bit. Det er 32 generelle register tilgjengelig.
Prosessoren har en Harvard-arkitektur. Bruk figur 6 og figur 7 til å løse oppgaven.
a)
Hva betyr det at Letni X68 har en Harvard-arkitektur?
Svar: separate bussar for aksess til prog.minne og dataminne.
b)
Hvilke instruksjonsformat(er) benytter Letni X68?
0, 1, 2 og 3 adresse instformat.(register adreserings format, direct og imidiate..)
c)
R0 har følgende verdi: 0x0000 FFFF, R8 har følgende verdi: 0xFFFF 0000, R11 har følgende verdi:
0x0000 0000 og R12 har følgende verdi: 0x0000 0003. I dataminnet ligger følgende data fra adresse
0xFFFF 0000:
Adresse
Data
0xFFFF 0000: 0x00 00 00 55
0xFFFF 0001: 0x00 AA 00 00
0xFFFF 0002: 0x00 00 00 AA
0xFFFF 0003: 0x00 00 55 00
0xFFFF 0004: 0x00 00 00 00
Følgende psaudokode er en del av et større program. Kodesnutten starter på addresse 0000 FFFF i
programminnet. Svar på spørsmålet ut fra tilgjengelig informasjon.
0x0000 FFFF: LOAD R1, R8;
0x0001 0000: ADD R11, R1, R11;
0x0001 0001: INC R8, R8;
0x0001 0002: DEC R12, R12
0x0001 0003:BNZ R0;
0x0001 0004
:

R1 = 0x00 00 00 55
R11 = 0x00 00 00 55 + R11 55 fyrstegong, 2.
R8 = R8 + 1 (kvar gong, endrar adr for LOAD inst)
R12 = R12 – 1 (fyrste gong 2, 2. Gong 1, siste 0)
Hopp till 0x0000 FFFF så lenge R12 ikkje er 0

Det er siste instruksjon som styrer Z flagge; DEC R12, R12.
R11 = 1. Iterasjon; 55, 2. Iterasjon: (AA0000 + 55) , 3. Iterasjon (AA0055 + AA) = AA00FF
Då er Z = 0 og det er ingen branch til 0x0000 FFFF.
Forklar hva som skjer i koden. Hvilken verdi vil R11 ha etter at koden har kjørt (PC = 0001 0004)?

Load/store:
Load:
opCode

Rn

Rn

DC
0

31

Store:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

opCode

Rn

Rn

Rn

31

0

ALU:
31

0

opCode

Rn

Rn

DC

31

0

8 bit

8 bit

8 bit

8 bit

opCode

DC

DC

DC

8 bit

8 bit

8 bit

Spesial:
NOP:
31

0

8 bit

MOVC:
opCode

Rn

Constant

8 bit

8 bit

16 bit

31

0

CP:
opCode

Rn

Rn

8 bit

8 bit

8 bit

DC

31

0

8 bit

Flow control:
BZ/BNZ
opCode

Rn

DC

8 bit

8 bit

16 bit

opCode

DC

DC

8 bit

8 bit

8 bit

31

0

RT
DC

31

0

Rn: any user register, R0 - R31
DC: Don’t care: any data memory location
Figur 6 Instruction format Letni X68

8 bit

Figur 7 Instruction set Letnii X68.

Oppgave 5 Ytelse (20 (20% (a: 5%, b: 10%, og 5% på c))
a)
En prosessor har et minnesystem med RAM og et nivå med hurtigbuffer (cache). Minnesystemet har
følgende egenskaper:
RAM: aksesstid: 100 ns
Cache: aksesstid 10 ns
Trefforholdstall (Hit ratio) på 80 %
Hva betyr det at systemet har en Trefforholdstall (Hit ratio) på 80 %? Forklar kort.
Svar sjå f.eks. side 84 i boka (sansynligheit for at data/inst er i cache, treff data/inst)
b)
1) Figur 8 viser samlebåndet (pipeline) for en prosessor. Det er fem steg. Hvor lang tid vil det ta å
utføre et program på 100 instruksjoner? Gå ut fra at det ikke er noen avhengigheter eller hopp i
koden.
Svar: 5 + 99 klokkeperiodar, klokkeperiode er 1/15*10^-9s, 1.56us
Fetch

Decode

5ns

5ns

Operand

Execute

Writeback

7.5ns

15ns

5ns

Figur 8 5 stage pipeline.

2) For å øke ytelsen blir operand og execute-endret og utvidet til fire steg som vist i figur 9. Hvor
lang tid vil det ta å utføre programmet på denne versjonen av prosessoren?
Fetch

Decode

Operand

Execute 1

Execute 2

Execute 3

Writeback

5ns

5ns

6ns

6ns

6ns

6ns

5ns

Figur 9 7 stage pipeline.

Svar: 7 + 99 klokkeperiodar, klokkeperiode er 1/6*10^-9s, 0.639us
c) Er økt ILP hoveddrivkraften for å utvide antal kjerner i en Chip Multiprocessor? Forklar kort
hvorfor/hvorfor ikke.
Nei egentlig ikkje, går over til å dyrke prosessornivå paralellitet. Problem med å få auka ytelse ved å
dyrke ILP (på grunn av blant anna design kompleksitet og energiforbruk) gjorde at ein gikk over til
CMP der ein kan skalere opp ytelse ved å legge til fleire prosessorar (på ein brikke).

Vedlegg IJVM

Figur 10 IJVM

Figur 11 Microinstruction format.

SLR1 SLL8 Function
0
0
No shift
0
1
Shift 8 bit left
1
0
Shift 1 bit right
Figur 12 ALU functions.

Figur 13 Timing diagram.

Institutt for datateknikk og informasjonsvitenskap

Eksamensoppgave i TDT4160 datamaskiner og
digitalteknikk
Faglig kontakt under eksamen: Gunnar Tufte
Tlf.: 97402478

Eksamensdato: 17. august 2017
Eksamenstid (fra-til): 9:00–13:00
Hjelpemiddelkode/Tillatte hjelpemidler: D: Ingen trykte eller håndskrevne hjelpemidler tillatt.
Bestemt, enkel kalkulator tillat.

Annen informasjon:

Målform/språk: Bokmål
Antall sider (uten forside): 10
Antall sider vedlegg: 2

Informasjon om trykking av eksamensoppgave

Kontrollert av:

Originalen er:

x

2-sidig □

sort/hvit x

farger □

1-sidig

Dato

Sign

skal ha flervalgskjema □
___________________________________________________________________________________________
Merk! Studenter finner sensur i Studentweb. Har du spørsmål om din sensur må du kontakte instituttet ditt.
Eksamenskontoret vil ikke kunne svare på slike spørsmål.

Oppgave 1 Oppstart, litt av hvert (20%)
a)
Figur 1 viser en skisse av en mulig bussarbitreringsmekanisme. Ut fra informasjonen i figur 1 svar på
følgende spørsmål:
i)
Hvilken enhet vil få bussen hvis enhet C og D gjør en «Buss request» samtidig? Forklar
kort.
ii)
Er dette en sentralisert eller en desentralisert arbitreringsmekanisme? Forklar kort.

E

D

C

B

A

Figur 1 Bussarbitrering.

b)
Angi endring i aksesstid, lagringskapasitet og pris (bit/kr) når man går nedover i lagerhierarkiet
(memory hierarchies), fra CPU-register, hurtigbuffer til hovedminne (main memory).
c)
Hva er «latency hiding», og hvorfor har dette fått økt oppmerksomhet ved økt CPU-ytelse? Forklar
kort.
d)
Hva er en «interrupt vector»? Forklar kort.
e) De tre instruksjonene vist under (I1, I2 og I3) er del av et større program. Er det avhengigheter
(true dependence) i koden under? Forklar kort.
I1: ADD R1, R2, R3; ( R1 = R1 + R3, Rn Register nummer)
I2: SUB R4, R1, R5; (R4 = R1 + R5)
I3: AND R0, R7, R9; (R0 = R7 and R9)

Oppgave 2 Digitalt Logisk Nivå (20% (a: 5%, b: 7.5% og c: 7.5%))
a)
Figur 2 viser en skisse av innholdet i en ALU. Det er to datainnganger (A og B), én datautgang
(Result), én Carry-inngang og én Carry-utgang. ALU-en har tre kontrollinnganger for å bestemme
funksjon. Internt er det komponenter for aritmetikk og logikk, disse kan repliseres til ønsket
bitbredde, tre multiplexere og kontrollogikk. ALU-en bruker en klokkeperiode på å utføre en
operasjon.

MUX

MUX

MUX

Figur 2 ALU-skisse.

Hvor mange klokkeperioder er nødvendig for å utføre en subtraksjon (Result=operand1–operand2)?
Forklar hvilke ALU operasjoner som må utføres for en subtraksjonen. Du kan fritt velge hvilken
datainngang (A eller B) operandene tilordnes. Det er ikke nødvendig å spesifisere eventuelle
mellomlagringer i spesifikke register, bruk tilgjengelig informasjon og oppgi eventuelle
forutsetninger.

b)
I et innvevd system (embedded system) er det benyttet én mikrokontroller, to RAM-brikker på 32k
byte og én ROM-brikke på 16k byte. Figur 3 viser det eksterne bussgrensesnittet med
adressedekodingslogikk. Alle enhetene benytter et aktivt lavt (logisk ''0'') CS (Chip Select)-signal.
Alle enhetene benytter 8-bit data.
A0

Address bus

Microcontroller

A15

OR

INV

R/W
Data[7:0]

CS
R/W
D[7:0]

CS
R/W
D[7:0]

RAM 1

RAM 2

CS
R

D[7:0]

ROM

Data bus

8

D[7:0]

Figur 3 Addresse decoding 1.

I et forsøk på å spare komponenter blir systemet endret til å bare bruke en RAM-brikke på 64k byte.
Det nye systemet er vist i figur 4.
i)
Er de to systemene vist i figur 3 og figur 4 kompatible (likt adresseområde)? Forklar.
ii)
Vil et program skrevet for systemet vist i figur 3 virke uten endringer på systemet vist i
figur 4? Forklar kort hvorfor/hvorfor ikke.

A0

Address bus

Microcontroller

A15

CS
R/W
D[7:0]

CS
R

RAM 1
R/W
Data[7:0]

D[7:0]

ROM

Data bus

Figur 4 Addresse decoding 2.

8

D[7:0]

c)
Figur 5 viser tilstandsdiagramet for en FSM som brukes i kontrollogikken i en CPU. Det er to bit
input fra dekodingslogikken (Input), og tre utgangssignal (output): A (enable for ALU), MW
(memory write signal) og MR (memory read signal).
Input = 00

Input = 10
Input = 11

IDLE
A = 0, MR = 0,
MW = 0

MR
A = 0, MR = 1,
MW = 0

Input = 01
ALU
A = 1, MR = 0,
MW = 0

MW
A = 0, MR = 0,
MW = 1

Wait
A = 0, MR = 0,
MW = 0

Figur 5 Finite State Machine (FSM)

i)

Fullfør transisjonstabellen på følgende format:
Current
state
Idle

ii)

Nxt state
Input=00
Idle

Nxt state
Input=01
MW

Nxt state
Input=10
MR

Nxt state
Input=11
ALU

Output
A
0

Hva er minimum størrelse på stateregisteret (antall flip-flops)?

Output
MR
0

Output
WR
0

Oppgave 3 Mikroarkitektur og mikroinstruksjoner (20% (a: 7.5%, b: 7.5% og c: 5%))
Bruk vedlagte diagram i figur 10, figur 11, figur 12 og figur 13 for IJVM til å løse oppgavene.
a)
Forklar kort funksjonen til de forskjellige feltene i MIR (Addr, J, ALU, C; M og B).
b)
For mikroarkitekturen i Figur 9. Angi mikroinstruksjon(er) for å utføre en NAND funksjon mellom
innholdet i registerene LV og TOS. Resultatet skal lagres i OPC-registeret (OPC = LV NAND TOS).
Se vekk fra Addr- og J-feltet i mikroinstruksjonsformatet. Angi korrekte bit for ALU, C, Mem
og B gitt i figur 10.
c)
Hvilke parameter bestemmer klokkefrekvensen denne versjonen av IJVM kan operere på?

Oppgave 4 Instruksjonssett arkitektur (ISA) (20% (a: 5%, b: 5% og 10% på c))
Letni X68 er en svært enkel prosessor. Letni X68 har én «load», én «store», åtte ALU-instruksjoner
og noen spesialinstruksjoner, inkludert NOP-instruksjonen og tre flytkontrollinstruksjoner (flow
control instructions). Instruksjonsformatet for instruksjonene er vist i figur 6, figur 7 viser
instruksjonssettet. Alle register og busser er 32-bit. Det er 32 generelle register tilgjengelig.
Prosessoren har en Harvard-arkitektur. Bruk figur 6 og figur 7 til å løse oppgaven.
a)
Hva betyr det at Letni X68 har en Harvard-arkitektur?
b)
Hvilke instruksjonsformat(er) benytter Letni X68?
c)
R0 har følgende verdi: 0x0000 FFFF, R8 har følgende verdi: 0xFFFF 0000, R11 har følgende verdi:
0x0000 0000 og R12 har følgende verdi: 0x0000 0003. I dataminnet ligger følgende data fra adresse
0xFFFF 0000:
Adresse
Data
0xFFFF 0000: 0x00 00 00 55
0xFFFF 0001: 0x00 AA 00 00
0xFFFF 0002: 0x00 00 00 AA
0xFFFF 0003: 0x00 00 55 00
0xFFFF 0004: 0x00 00 00 00
Følgende psaudokode er en del av et større program. Kodesnutten starter på addresse 0000 FFFF i
programminnet. Svar på spørsmålet ut fra tilgjengelig informasjon.
0x0000 FFFF: LOAD R1, R8;
0x0001 0000: ADD R11, R1, R11;
0x0001 0001: INC R8, R8;
0x0001 0002: DEC R12, R12
0x0001 0003:BNZ R0;
0x0001 0004
:
Forklar hva som skjer i koden. Hvilken verdi vil R11 ha etter at koden har kjørt (PC = 0001 0004)?

Load/store:
Load:
opCode

Rn

Rn

DC
0

31

Store:
opCode

Rn

Rn

DC

8 bit

8 bit

8 bit

8 bit

opCode

Rn

Rn

Rn

31

0

ALU:
31

0

opCode

Rn

Rn

DC

31

0

8 bit

8 bit

8 bit

8 bit

opCode

DC

DC

DC

8 bit

8 bit

8 bit

Spesial:
NOP:
31

0

8 bit

MOVC:
opCode

Rn

Constant

8 bit

8 bit

16 bit

31

0

CP:
opCode

Rn

Rn

8 bit

8 bit

8 bit

DC

31

0

8 bit

Flow control:
BZ/BNZ
opCode

Rn

DC

8 bit

8 bit

16 bit

opCode

DC

DC

8 bit

8 bit

8 bit

31

0

RT
DC

31

0

Rn: any user register, R0 - R31
DC: Don’t care: any data memory location
Figur 6 Instruction format Letni X68

8 bit

Figur 7 Instruction set Letnii X68.

Oppgave 5 Ytelse (20 (20% (a: 5%, b: 10%, og 5% på c))
a)
En prosessor har et minnesystem med RAM og et nivå med hurtigbuffer (cache). Minnesystemet har
følgende egenskaper:
RAM: aksesstid: 100 ns
Cache: aksesstid 10 ns
Trefforholdstall (Hit ratio) på 80 %
Hva betyr det at systemet har en Trefforholdstall (Hit ratio) på 80 %? Forklar kort
b)
1) Figur 8 viser samlebåndet (pipeline) for en prosessor. Det er fem steg. Hvor lang tid vil det ta å
utføre et program på 100 instruksjoner? Gå ut fra at det ikke er noen avhengigheter eller hopp i
koden.
Fetch

Decode

5ns

5ns

Operand

Execute

Writeback

7.5ns

15ns

5ns

Figur 8 5 stage pipeline.

2) For å øke ytelsen blir operand og execute-endret og utvidet til fire steg som vist i figur 9. Hvor
lang tid vil det ta å utføre programmet på denne versjonen av prosessoren?
Fetch

Decode

Operand

Execute 1

Execute 2

Execute 3

Writeback

5ns

5ns

6ns

6ns

6ns

6ns

5ns

Figur 9 7 stage pipeline.

c) Er økt ILP hoveddrivkraften for å utvide antal kjerner i en Chip Multiprocessor? Forklar kort
hvorfor/hvorfor ikke.

Vedlegg IJVM

Figur 10 IJVM

Figur 11 Microinstruction format.

SLR1 SLL8 Function
0
0
No shift
0
1
Shift 8 bit left
1
0
Shift 1 bit right
Figur 12 ALU functions.

Figur 13 Timing diagram.

